{"version":3,"sources":["reducers/gameReducer.js","reducers/rootReducer.js","components/cards/CardFront.js","components/cards/CardBack.js","components/cards/FlippableCard.js","components/cards/MovableFlippableCard.js","components/game/helperFunctions.js","components/cards/DraggableCard.js","components/game/ControllablePlayerCard.js","components/game/PlayerCards.js","components/game/CommonGameStacks.js","components/game/ControllableComputerCard.js","components/game/ComputerCards.js","components/game/Game.js","components/setup/WelcomeView.js","components/setup/SmallDot.js","components/setup/LargeDot.js","components/setup/DottedSlider.js","components/setup/Stack.js","components/setup/StackSelection.js","components/setup/SelectionView.js","components/setup/createStacks.js","components/setup/SetUpGame.js","components/game/Winner.js","components/GameOfNopsa.js","App.js","index.js"],"names":["initialState","isOn","gameReducer","state","action","type","data","rootReducer","combineReducers","game","CardFront","card","color","char","suit","cardText","value","View","style","justifyContent","alignItems","Text","fontSize","CardBack","scaleUnit","viewStyle","backgroundColor","width","height","borderRadius","rows","i","push","key","displayCards","FlippableCard","React","forwardRef","props","ref","unit","cardStyle","unitsAndLocations","timing","animatedFlipBackside","Animated","Value","animatedFlipBacksideStyle","transform","rotateX","interpolate","inputRange","outputRange","animatedFlipFrontside","animatedFlipFrontsideStyle","flip","stateAfterFlipping","index","sequence","toValue","tension","friction","duration","start","performFlipAnimations","setTimeout","convertCardState","medium","useImperativeHandle","position","left","moveToNewLocation","animatedMove","startLocation","delay","newLocation","x","y","MovableFlippableCard","useState","ValueXY","animatedMoveStyle","translateX","translateY","referenceFlip","createRef","current","moveAndPossiblyFlip","endLocation","moveAndNull","targetLocation","nullify","setComputerCardToPlayed","returnToOriginal","top","getCardFlipStateAfterDealing","cardIndex","cardCount","toLeftOrRightGameStackInSingleCardDealing","side","countOfCardsToDeal","opponentCardCount","countOfComputerCardsToDeal","Math","min","getPlayerCardSolitaireLocation","scalingUnit","spacing","positionX","positionY","unitHeight","origoY","wasReleasedOnRightStack","releaseX","releaseY","gamingStackRightX","gamingStackRightY","wasReleasedOnLeftStack","gamingStackLeftX","gamingStackLeftY","valueIsOKforPlacingOntoStack","whatStack","topmostLeft","topmostRight","newCard","currentTopmostValue","newValue","getIndexOfPossibleCardBelow","onTopAndBelowCardIndexPairs","Map","get","getComputerCardSolitaireLocation","moveToNewPosition","animatedDraggable","newPosition","oldPosition","DraggableCard","size","dragStyle","updatedLocation","setUpdatedLocation","movedToEmpty","setMovedToEmpty","emptyIndexOccupied","setEmptyIndexOccupied","handleReleasedCard","returnCard","whatStackCardWasReleasedOn","wasReleasedOnLeft","wasReleasedOnRight","whatStackWasReleasedOn","topmostStuff","valueLeft","valueRight","moveCardToGameStack","changeTopmostLeft","changeTopmostRight","changeLeft","changeRight","setPlayerCardToPlayed","handleEmptyPositionStateChanged","flipPossibleCardBelow","whatEmptyPositionTheCardWasReleasedOn","emptyPositions","positionsX","emptyPosition","whatEmptyPositionWasReleasedOn","positionIndex","moveCardToEmptyPosition","returnCardToStartDragPosition","panResponder","PanResponder","create","onStartShouldSetPanResponder","evt","gestureState","onPanResponderMove","event","dx","dy","moveCardAlongDrag","onPanResponderRelease","moveX","moveY","TouchableOpacity","disabled","panHandlers","ControllablePlayerCard","cardState","setCardState","locationAtStart","getPlayerCardLocationAfterDealing","locationAfterDealing","cardWillFlipAfterDealing","newState","PlayerCards","playerCards","map","cardReferences","length","indexDealNext","setIndexDealNext","playedStates","getPlayerCardsPlayedStates","setPlayedStates","setEmptyPositions","useEffect","gameOver","gameOverEndRound","updatedPlayedCards","dealSolitaireCards","limit","dealSingleCard","indexOfCardBelow","indexOfEmptyPosition","empties","getCardViewStyle","commonStyles","zIndex","leftGamingStackXY","rightGamingStackXY","GameStack","topmost","background","CommonGameStacks","cardViewStyleLeft","cardViewStyleRight","ControllableComputerCard","getComputerCardLocationAfterDealing","ComputerCards","computerCards","computerCardCount","number","visibleCards","getVisibleComputerCardsAtStart","setVisibleCards","getComputerCardsPlayedStates","performComputerCardMoveIfPossible","stack","indexOfCardToMove","visibleCardIndexes","cardAndTarget","visibleCard","leftOK","rightOK","target","getIndexOfCardToMoveAndTargetStack","targetPackLocation","updatedVisibleCards","filter","ConnectedGame","connect","setTopmostLeft","setTopmostRight","playerStack","computerStack","referencePlayerCards","referenceComputerCards","theWinner","gameRoundOver","onPress","setInterval","getStyles","StyleSheet","contents","marginTop","titleText","fontWeigth","fontFamily","infoText","spacer","buttonView","padding","buttonText","WelcomeView","startSetting","styles","visibility","animatedVisibility","opacity","SmallDot","dotViewWidth","styleOuterView","styleInnerView","dotNumber","LargeDot","handleSelectionChanged","borderWidth","borderColor","DottedSlider","optionCount","selectedValue","setSelectedValue","changeInterval","startValue","changes","max","changeUpOrDown","direction","clearInterval","getSelectedValue","container","dotSliderView","dots","displayDotSlider","marginBottom","instructionText","fontWeight","flexDirection","Stack","displayColor","selectStack","stackStyle","StackSelection","selectedStack","setSelectedStack","changedSelection","id","getSelectedStack","player","computer","borderColorStack1","borderColorStack2","mapDispatchToProps","setGameSettings","settings","ConnectedSelectionView","referenceSkill","referenceSpeed","referenceStack","stacks","j","stackShuffled","shuffle","slice","createStacks","skill","speed","SetUpGame","settingNew","setSettingNew","ConnectedWinner","winner","ConnectedGameOfNopsa","screenWidth","Dimensions","screenHeight","getUnitsAndLocations","gameIsOn","setWinner","GameWithRounds","screen","leftDealingStackXY","rightDealingStackXY","short","long","store","createStore","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.63455fdc.chunk.js","sourcesContent":["const initialState = { isOn: false }\n\nconst gameReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n    case 'SET_GAME_SETTINGS':\n        return action.data\n    default:\n        return state\n    }\n\n}\n\nexport const setGameSettings = (settings) => {\n    return {\n        type: 'SET_GAME_SETTINGS',\n        data: settings,\n    }\n}\n\n\nexport default gameReducer\n\n","import { combineReducers } from 'redux'\nimport gameReducer from './gameReducer'\n\nconst rootReducer = combineReducers({\n    game: gameReducer,\n})\n\nexport default rootReducer\n\n\n","import React from 'react'\nimport { View, Text } from 'react-native'\n\nconst CardFront = ({ card }) => {\n\n    let color = 'black'\n    let char = ''\n    switch (card.suit) {\n    case 2:\n        char = '♥'\n        color = 'red'\n        break\n    case 3:\n        char = '♣'\n        break\n    case 4:\n        char = '♦'\n        color = 'red'\n        break\n    default:\n        char = '♠'\n        break\n    }\n\n    const cardText = card.value === 1 ? 'A' : card.value\n\n    return (\n        <View  style={{ justifyContent: 'center', alignItems: 'center' }}>\n            <Text style={{ color: color, fontSize: 30 }}>{char}</Text>\n            <Text style={{ color: color, fontSize: 30 }}>{cardText}</Text>\n        </View>\n    )\n}\n\n\nexport default CardFront\n\n\n","import React from 'react'\nimport { View, Text } from 'react-native'\n\nconst CardBack = ({ scaleUnit }) => {\n\n    const viewStyle = {\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#B9CC3F',\n        width: scaleUnit,\n        height: scaleUnit * 1.7,\n        borderRadius: 6,\n    }\n\n    const displayCards = () => {\n        let rows = []\n        for (let i = 0; i < 9 ; i++) {\n            rows.push(<Text key={i} style={{ color: 'green', fontSize: scaleUnit / 7 }}>©©©©©©©</Text>)\n        }\n        return rows\n    }\n\n    return (\n        <View  style={viewStyle}>\n            {displayCards()}\n        </View>\n    )\n}\n\nexport default CardBack\n\n","import React, { useImperativeHandle } from 'react'\nimport { View, Animated } from 'react-native'\nimport CardFront from './CardFront'\nimport CardBack from './CardBack'\n\n\nconst getCardStyle = (unit) => {\n    return {\n        width: unit,\n        height: unit * 1.7,\n        borderRadius: 7,\n        backgroundColor: 'papayawhip',\n    }\n}\n\nconst performFlipAnimations = (animatedFlipBackside, animatedFlipFrontside) => {\n    Animated.sequence([\n        Animated.timing(animatedFlipBackside, {\n            toValue: 90, tension: 10, friction: 10, duration: 300,\n        }),\n        Animated.timing(animatedFlipFrontside, {\n            toValue: 180, tension: 10, friction: 10, duration: 300,\n        }),\n    ]).start()\n}\n\n\n\nconst FlippableCard = React.forwardRef((props, ref) => {\n\n    const cardStyle = getCardStyle(props.unitsAndLocations.unit)\n    const timing = props.unitsAndLocations.timing\n\n    let animatedFlipBackside = new Animated.Value(0)\n    const interpolatedFlipBackside = animatedFlipBackside.interpolate({\n        inputRange: [0, 180], outputRange: ['180deg', '360deg'],\n    })\n    const animatedFlipBacksideStyle = { transform: [ { rotateX: interpolatedFlipBackside } ] }\n\n    let animatedFlipFrontside = new Animated.Value(90)\n    const interpolatedFlipFrontside = animatedFlipFrontside.interpolate({\n        inputRange: [0, 180], outputRange: ['180deg', '360deg'],\n    })\n    const animatedFlipFrontsideStyle = { transform: [ { rotateX: interpolatedFlipFrontside } ] }\n\n\n    const flip = () => {\n        const stateAfterFlipping = props.index > 14 ? 'null' : 'draggable'\n        performFlipAnimations(animatedFlipBackside, animatedFlipFrontside)\n        setTimeout(() => {\n            props.convertCardState(stateAfterFlipping)\n        }, timing.medium)\n    }\n\n    useImperativeHandle(ref, () => {\n        return { flip }\n    })\n\n\n    return (\n        <View>\n            <Animated.View style={[cardStyle, { position: 'absolute', left: 0 }, animatedFlipBacksideStyle]}>\n                <CardBack scaleUnit={props.unitsAndLocations.unit}/>\n            </Animated.View>\n            <Animated.View style={[cardStyle, animatedFlipFrontsideStyle]}>\n                <CardFront card={props.card}/>\n            </Animated.View>\n        </View>\n    )\n})\n\nexport default FlippableCard\n\n","import React, { useImperativeHandle, useState } from 'react'\nimport { Animated } from 'react-native'\nimport FlippableCard from '../cards/FlippableCard'\n\n\nconst moveToNewLocation = (animatedMove, startLocation, delay, newLocation) => {\n    Animated.sequence([\n        Animated.delay(delay),\n        Animated.timing(animatedMove, {\n            toValue: { x: newLocation.x - startLocation.x, y: newLocation.y - startLocation.y }, duration: 1000,\n        }),\n    ]).start()\n}\n\n\n\nconst MovableFlippableCard = React.forwardRef((props, ref) => {\n\n    const [animatedMove] = useState(new Animated.ValueXY())\n    const animatedMoveStyle = { transform: [ { translateX: animatedMove.x }, { translateY: animatedMove.y } ] }\n    const [startLocation] = useState(props.startLocation)\n    const referenceFlip = React.createRef()\n\n    const flip = () => {\n        referenceFlip.current.flip()\n    }\n\n    const moveAndPossiblyFlip = () => {\n        const delay = props.index > 14 ? 0 : 500 * props.index\n        moveToNewLocation(animatedMove, startLocation, delay, props.endLocation)\n        if (props.flip) {\n            setTimeout(() => {\n                flip()\n            }, delay + 1000)\n        }\n    }\n\n    const moveAndNull = (targetLocation, nullify) => {\n        moveToNewLocation(animatedMove, startLocation, 0, targetLocation)\n        if (nullify) {\n            setTimeout(() => {\n                props.convertCardState('null')\n                props.setComputerCardToPlayed(props.index)\n            }, 1000)\n        }\n    }\n\n    const returnToOriginal = () => {\n        moveToNewLocation(animatedMove, startLocation, 0, { x: 0, y: 0 })\n        setTimeout(() => {\n            props.convertCardState('movable')\n        }, 1000)\n    }\n\n    useImperativeHandle(ref, () => {\n        return { moveAndPossiblyFlip, flip, moveAndNull, returnToOriginal }\n    })\n\n    return (\n        <Animated.View style={[animatedMoveStyle, { position: 'absolute', left: startLocation.x, top: startLocation.y }]}>\n            <FlippableCard\n                ref={referenceFlip}\n                index={props.index}\n                card={props.card}\n                convertCardState={props.convertCardState}\n                unitsAndLocations={props.unitsAndLocations}\n            />\n        </Animated.View>\n    )\n})\n\nexport default MovableFlippableCard\n\n\n","\nexport const getPlayerCardStartLocation = (scalingUnit, spacing) => {\n    const positionX = spacing + (1/6 + 1 + 4/6 + 1 + 2/6 + 1 + 4/6) * scalingUnit\n    const positionY = (0.5 + 1.5 + 0.75) * 1.7 * scalingUnit\n    return { x: positionX, y: positionY }\n}\n\nexport const getCardFlipStateAfterDealing = (cardIndex, cardCount) => {\n    let flip = false\n    switch (cardIndex) {\n    case 0: case 5: case 9: case 12: case 14:\n        flip = true\n        break\n    case 1: case 2: case 3: case 4:\n        if (cardIndex + 4 > cardCount) {\n            flip = true\n        }\n        break\n    case 6: case 7: case 8:\n        if (cardIndex + 4 > cardCount) {\n            flip = true\n        }\n        break\n    case 10: case 11:\n        if (cardIndex + 4 > cardCount) {\n            flip = true\n        }\n        break\n    case 13:\n        if (cardIndex + 4 > cardCount) {\n            flip = true\n        }\n        break\n    default:\n        break\n    }\n    if (cardIndex > 14) {\n        flip = true\n    }\n    return flip\n}\n\n\nexport const getPlayerCardLocationAfterDealing = (cardIndex, scalingUnit, spacing, cardCount) => {\n\n    if (cardIndex < 15) {\n        return getPlayerCardSolitaireLocation(cardIndex, scalingUnit, spacing)\n    } else {\n        const positionY = (0.5 + 1.5 + 0.75) * 1.7 * scalingUnit\n        const toLeftOrRightStack = toLeftOrRightGameStackInSingleCardDealing('right', cardIndex, cardCount)\n        if (toLeftOrRightStack === 'right') {\n            const rightPackPositionX = spacing + (1/6 + 1 + 4/6 + 1 + 2/6) * scalingUnit\n            return { x: rightPackPositionX, y: positionY }\n        } else {\n            const leftPackPositionX = spacing + (1/6 + 1 + 4/6) * scalingUnit\n            return { x: leftPackPositionX, y: positionY }\n        }\n    }\n\n}\n\n\nexport const toLeftOrRightGameStackInSingleCardDealing = (side, cardIndex, cardCount) => {\n    const countOfCardsToDeal = cardCount - 15 > 0 ? cardCount - 15 : 0\n    const opponentCardCount = 52 - cardCount\n    const countOfComputerCardsToDeal = opponentCardCount - 15 > 0 ? opponentCardCount - 15 : 0\n    const numberOfBothPlayersDealCards = Math.min(countOfCardsToDeal, countOfComputerCardsToDeal)\n    if (cardIndex < 15 + numberOfBothPlayersDealCards) {\n        return side\n    } else {\n        if (opponentCardCount % 2 === 0 && cardIndex% 2 === 0) {\n            return side\n        } else {\n            return side === 'right' ? 'left' : 'right'\n        }\n    }\n}\n\n\nconst getPlayerCardSolitaireLocation = (cardIndex, scalingUnit, spacing) => {\n\n    const unitHeight = 1.7 * scalingUnit\n    const origoY =  (0.5 + 1.5 + 0.75 + 1.0 + 0.75) * unitHeight\n\n    let positionX\n\n    switch (cardIndex) {\n    case 0:\n        positionX = spacing + 1 / 6 * scalingUnit\n        break\n    case 1: case 5:\n        positionX = spacing + (2 / 6  + 1)* scalingUnit\n        break\n    case 2: case 6: case 9:\n        positionX = spacing +  (3 / 6 + 2) * scalingUnit\n        break\n    case 3: case 7: case 10: case 12:\n        positionX = spacing +  (4 / 6 + 3) * scalingUnit\n        break\n    default:\n        positionX = spacing +  (5 / 6 + 4) * scalingUnit\n    }\n\n    let positionY\n\n    switch (cardIndex) {\n    case 14:\n        positionY = origoY + (4 * 0.125) * unitHeight\n        break\n    case 12: case 13:\n        positionY = origoY + (3 * 0.125) * unitHeight\n        break\n    case 9: case 10: case 11:\n        positionY = origoY + (2 * 0.125) * unitHeight\n        break\n    case 5: case 6: case 7: case 8:\n        positionY = origoY + (1 * 0.125) * unitHeight\n        break\n    default:\n        positionY = origoY\n    }\n\n    return { x: positionX, y: positionY }\n}\n\nexport const whatStackWasReleasedOn = (releaseX, releaseY, scaleUnit, spacing) => {\n    const wasReleasedOnLeft = wasReleasedOnLeftStack(releaseX, releaseY, scaleUnit, spacing)\n    const wasReleasedOnRight = wasReleasedOnRightStack(releaseX, releaseY, scaleUnit, spacing)\n    if (wasReleasedOnLeft) {\n        return 'left'\n    } else if (wasReleasedOnRight) {\n        return 'right'\n    } else {\n        return 'none'\n    }\n}\n\nconst wasReleasedOnRightStack = (releaseX, releaseY, scaleUnit, spacing) => {\n    const gamingStackRightX = spacing + (1/6 + 1 + 4/6 + 1 + 2/6) * scaleUnit\n    const gamingStackRightY = (0.5 + 1.5 + 0.75) * scaleUnit * 1.7\n    if (!(releaseX > gamingStackRightX && releaseX < gamingStackRightX + scaleUnit)) {\n        return false\n    }\n    if (!(releaseY > gamingStackRightY && releaseY < gamingStackRightY + scaleUnit * 1.7)) {\n        return false\n    }\n    return true\n}\n\nconst wasReleasedOnLeftStack = (releaseX, releaseY, scaleUnit, spacing) => {\n    const gamingStackLeftX = spacing + (1/6 + 1 + 4/6) * scaleUnit\n    const gamingStackLeftY = (0.5 + 1.5 + 0.75) * scaleUnit * 1.7\n    if (!(releaseX > gamingStackLeftX && releaseX < gamingStackLeftX + scaleUnit)) {\n        return false\n    }\n    if (!(releaseY > gamingStackLeftY && releaseY < gamingStackLeftY + scaleUnit * 1.7)) {\n        return false\n    }\n    return true\n}\n\n\nexport const valueIsOKforPlacingOntoStack = (whatStack, topmostLeft, topmostRight, newCard) => {\n    const currentTopmostValue = whatStack === 'left' ? topmostLeft.value : topmostRight.value\n    const newValue = newCard.value\n    if (currentTopmostValue === 1) {\n        if (newValue === 2 || newValue === 13) {\n            return true\n        }\n    } else if (currentTopmostValue === 13) {\n        if (newValue === 12 || newValue === 1) {\n            return true\n        }\n    } else {\n        if (newValue === currentTopmostValue + 1 || newValue === currentTopmostValue - 1) {\n            return true\n        } else {\n            return false\n        }\n    }\n}\n\nexport const getIndexOfPossibleCardBelow = (cardIndex) => {\n    const onTopAndBelowCardIndexPairs = new Map([\n        [14, 13],\n        [13, 11],\n        [12, 10],\n        [11, 8],\n        [10, 7],\n        [9, 6],\n        [8, 4],\n        [7, 3],\n        [6, 2],\n        [5, 1],\n        ['default', -1],\n    ])\n    return onTopAndBelowCardIndexPairs.get(cardIndex) || onTopAndBelowCardIndexPairs.get('default')\n}\n\n\nexport const whatEmptyPositionWasReleasedOn = (releaseX, releaseY, scaleUnit, spacing, emptyPositions) => {\n\n    const positionsX = []\n    for (let i = 0; i < 5; i++) {\n        positionsX.push(spacing + (1/6 + i * (1 + 1/6)) * scaleUnit)\n    }\n    const positionY = (0.5 + 1.5 + 0.75 + 1 + 0.75) * 1.7 * scaleUnit\n\n    let emptyPosition = 'none'\n    for (let i = 0; i < 5; i++) {\n        if (emptyPositions[i]) {\n            if ((releaseX > positionsX[i] && releaseX < positionsX[i] + scaleUnit)) {\n                if ((releaseY > positionY && releaseY < positionY + scaleUnit * 1.7)) {\n                    emptyPosition = i\n                }\n            }\n        }\n    }\n    return emptyPosition\n}\n\n\n\nexport const getComputerCardStartLocation = (scalingUnit, spacing) => {\n    const positionX = spacing + (1/6) * scalingUnit\n    const positionY = (0.5 + 1.5 + 0.75) * 1.7 * scalingUnit\n    return { x: positionX, y: positionY }\n}\n\n\nexport const getComputerCardLocationAfterDealing = (cardIndex, scalingUnit, spacing, cardCount) => {\n\n    if (cardIndex < 15) {\n        return getComputerCardSolitaireLocation(cardIndex, scalingUnit, spacing)\n    } else {\n        const positionY = (0.5 + 1.5 + 0.75) * 1.7 * scalingUnit\n        const toLeftOrRightStack = toLeftOrRightGameStackInSingleCardDealing('left', cardIndex, cardCount)\n        if (toLeftOrRightStack === 'right') {\n            const rightPackPositionX = spacing + (1/6 + 1 + 4/6 + 1 + 2/6) * scalingUnit\n            return { x: rightPackPositionX, y: positionY }\n        } else {\n            const leftPackPositionX = spacing + (1/6 + 1 + 4/6) * scalingUnit\n            return { x: leftPackPositionX, y: positionY }\n        }\n    }\n\n}\n\n\n\nexport const getComputerCardSolitaireLocation = (cardIndex, scalingUnit, spacing) => {\n    const unitHeight = 1.7 * scalingUnit\n    const origoY =  0\n\n    let positionX = spacing\n    switch (cardIndex) {\n    case 14: case 13: case 11: case 8: case 4:\n        positionX += 1 / 6 * scalingUnit\n        break\n    case 12: case 10: case 7: case 3:\n        positionX += (2 / 6  + 1)* scalingUnit\n        break\n    case 9: case 6: case 2:\n        positionX +=  (3 / 6 + 2) * scalingUnit\n        break\n    case 5: case 1:\n        positionX +=  (4 / 6 + 3) * scalingUnit\n        break\n    default:\n        positionX +=  (5 / 6 + 4) * scalingUnit\n    }\n\n    let positionY = 0\n    switch (cardIndex) {\n    case 4: case 3: case 2: case 1: case 0:\n        positionY = origoY + (4 * 0.125) * unitHeight\n        break\n    case 8: case 7: case 6: case 5:\n        positionY = origoY + (3 * 0.125) * unitHeight\n        break\n    case 11: case 10: case 9:\n        positionY = origoY + (2 * 0.125) * unitHeight\n        break\n    case 13: case 12:\n        positionY = origoY + (1 * 0.125) * unitHeight\n        break\n    default:\n        positionY = origoY\n    }\n    return { x: positionX, y: positionY }\n}\n\n\nexport const getVisibleComputerCardsAtStart = (computerCardCount) => {\n    const number = Math.min(15, computerCardCount)\n    let visibleCards = []\n    for (let i = 0; i < number; i++) {\n        const cardFlips = getCardFlipStateAfterDealing(i, computerCardCount)\n        if (cardFlips) {\n            visibleCards.push(i)\n        }\n    }\n    return visibleCards\n}\n\n\nexport const getIndexOfCardToMoveAndTargetStack = (computerCards, visibleCardIndexes, topmostLeft, topmostRight) => {\n    let cardAndTarget = { cardIndex: -1, stack: 'none' }\n    let i = 0\n    while (i < visibleCardIndexes.length) {\n        let visibleCard = computerCards[visibleCardIndexes[i]]\n        const leftOK =  valueIsOKforPlacingOntoStack('left', topmostLeft, topmostRight, visibleCard)\n        const rightOK =  valueIsOKforPlacingOntoStack('right', topmostLeft, topmostRight, visibleCard)\n        if (leftOK) {\n            cardAndTarget = { cardIndex: visibleCardIndexes[i], target: 'left' }\n            i = 100\n        } else if (rightOK) {\n            cardAndTarget = { cardIndex: visibleCardIndexes[i], target: 'right' }\n            i = 100\n        }\n        i++\n    }\n    return cardAndTarget\n}\n\nexport const getTargetPackLocation = (stack, scaleUnit, spacing) => {\n    const locations = new Map([\n        ['left', { x: spacing +(1/6 + 1 + 4/6) * scaleUnit, y: (0.5 + 1.5 + 0.75) * 1.7 * scaleUnit }],\n        ['right', { x: spacing + (1/6 + 1 + 4/6 + 1 + 2/6) * scaleUnit, y: (0.5 + 1.5 + 0.75) * 1.7 * scaleUnit }],\n    ])\n    return locations.get(stack)\n}\n\nexport const isMoveStillOk = (card, side, topmostLeft, topmostRight) => {\n    if (side === 'left') {\n        return valueIsOKforPlacingOntoStack('left', topmostLeft, topmostRight, card)\n    } else {\n        valueIsOKforPlacingOntoStack('right', topmostLeft, topmostRight, card)\n    }\n}","import React, { useState } from 'react'\nimport { Animated, PanResponder, TouchableOpacity } from 'react-native'\nimport CardFront from './CardFront'\nimport { whatStackWasReleasedOn, valueIsOKforPlacingOntoStack, whatEmptyPositionWasReleasedOn } from '../game/helperFunctions.js'\n\n\nconst getCardStyle = (size) => {\n    return {\n        width: size,\n        height: size * 1.7,\n        borderRadius: 7,\n        backgroundColor: 'papayawhip',\n    }\n}\n\nconst returnCardToStartDragPosition = (animatedDraggable, updatedLocation) => {\n    Animated.timing(animatedDraggable, {\n        toValue: {  x: 0 - updatedLocation.x, y: 0 - updatedLocation.y  }, duration: 500,\n    }).start()\n}\n\nconst moveCardAlongDrag = (dx, dy, animatedDraggable, updatedLocation) => {\n    Animated.timing(animatedDraggable, {\n        toValue: { x: dx - updatedLocation.x, y: dy - updatedLocation.y }, duration: 0,\n    }).start()\n}\n\nconst moveToNewPosition = (animatedDraggable, newPosition, oldPosition) => {\n    Animated.timing(animatedDraggable, {\n        toValue: { x: newPosition.x - oldPosition.x, y: newPosition.y - oldPosition.y }, duration: 500,\n    }).start()\n}\n\nconst moveCardToGameStack = (animatedDraggable, side, scaleUnit, spacing, startLocation) => {\n    const newX =  side === 'left' ? (spacing + (1/6 + 1 + 4/6) * scaleUnit) : (spacing + (1/6 + 1 + 4/6 + 1 + 2/6) * scaleUnit)\n    const newY = (0.5 + 1.5 + 0.75) * 1.7 * scaleUnit\n    moveToNewPosition(animatedDraggable, { x: newX, y: newY }, startLocation )\n}\n\nconst updateGameStackTopmostCard = (side, changeTopmostLeft, changeTopmostRight, card) => {\n    if (side === 'left') {\n        changeTopmostLeft(card)\n    } else {\n        changeTopmostRight(card)\n    }\n}\n\nconst moveCardToEmptyPosition = (animatedDraggable, positionIndex, scaleUnit, spacing, startLocation) => {\n    const newX = spacing + (1/6 + positionIndex * (1 + 1/6)) * scaleUnit\n    const newY = (0.5 + 1.5 + 0.75 + 1 + 0.75) * 1.7 * scaleUnit\n    moveToNewPosition(animatedDraggable, { x: newX, y: newY }, startLocation )\n}\n\n\n\nconst DraggableCard = React.forwardRef((props, ref) => {\n\n    const cardStyle = getCardStyle(props.unitsAndLocations.unit)\n    const [startLocation] = useState(props.startLocation)\n\n    // let animatedDraggable = new Animated.ValueXY()\n    const [animatedDraggable, setAnimatedDraggable] = useState(new Animated.ValueXY())\n    const dragStyle = { transform: [ { translateX: animatedDraggable.x }, { translateY: animatedDraggable.y }] }\n    const [updatedLocation, setUpdatedLocation] = useState({ x: 0, y: 0 })\n    const [movedToEmpty, setMovedToEmpty] = useState(false)\n    const [emptyIndexOccupied, setEmptyIndexOccupied] = useState(props.index)\n\n\n    const handleReleasedCard = (releaseX, releaseY) => {\n\n        let returnCard = true\n        // dealing with possible release of card on either of the middle game stacks\n        const whatStackCardWasReleasedOn = whatStackWasReleasedOn(releaseX, releaseY, props.unitsAndLocations.unit, props.unitsAndLocations.spacing)\n        if (whatStackCardWasReleasedOn !== 'none') {\n            const valueIsOK = valueIsOKforPlacingOntoStack(whatStackCardWasReleasedOn, props.topmostStuff.valueLeft, props.topmostStuff.valueRight, props.card)\n            if (valueIsOK) {\n                returnCard = false\n                moveCardToGameStack(animatedDraggable, whatStackCardWasReleasedOn, props.unitsAndLocations.unit, props.unitsAndLocations.spacing, props.startLocation)\n                setTimeout(() => {\n                    updateGameStackTopmostCard(whatStackCardWasReleasedOn, props.topmostStuff.changeLeft, props.topmostStuff.changeRight, props.card)\n                    props.convertCardState('null')\n                    props.setPlayerCardToPlayed(props.index)\n                    if (props.index < 5 || movedToEmpty) {\n                        props.handleEmptyPositionStateChanged('vacate', emptyIndexOccupied)\n                    }\n                    if (!movedToEmpty) {\n                        props.flipPossibleCardBelow(props.index)\n                    }\n                }, 500)\n            }\n        }\n\n        // dealing with possible release of card on an empty position in the solitaire\n        const whatEmptyPositionTheCardWasReleasedOn = whatEmptyPositionWasReleasedOn(releaseX, releaseY, props.unitsAndLocations.unit, props.unitsAndLocations.spacing, props.emptyPositions)\n        if (whatEmptyPositionTheCardWasReleasedOn !== 'none' && !movedToEmpty && props.index > 4) {\n            moveCardToEmptyPosition(animatedDraggable, whatEmptyPositionTheCardWasReleasedOn, props.unitsAndLocations.unit, props.unitsAndLocations.spacing, props.startLocation)\n            setTimeout(() => {\n                props.flipPossibleCardBelow(props.index)\n            }, 500)\n            setTimeout(() => {\n                returnCard = false\n                setMovedToEmpty(true)\n                setUpdatedLocation({\n                    x: startLocation.x - (props.spacing + (1/6 + whatEmptyPositionTheCardWasReleasedOn * (1 + 1/6)) * props.unitsAndLocations.unit),\n                    y: startLocation.y - ((0.5 + 1.5 + 0.75 + 1 + 0.75) * 1.7 * props.unitsAndLocations.unit),\n                })\n                props.handleEmptyPositionStateChanged('occupy', whatEmptyPositionTheCardWasReleasedOn)\n                setEmptyIndexOccupied(whatEmptyPositionTheCardWasReleasedOn)\n            }, 1000)\n\n            return\n        }\n\n        // otherwise return the card to original position\n        if (returnCard) {\n            returnCardToStartDragPosition(animatedDraggable, updatedLocation)\n        }\n    }\n\n    const panResponder = PanResponder.create({\n        onStartShouldSetPanResponder: (evt, gestureState) => true,\n        onPanResponderMove: (event, gestureState) => {\n            moveCardAlongDrag(gestureState.dx, gestureState.dy, animatedDraggable, updatedLocation)\n        },\n        onPanResponderRelease: (evt, gestureState) => {\n            handleReleasedCard(gestureState.moveX, gestureState.moveY)\n        },\n    })\n\n\n    return (\n        <TouchableOpacity  disabled={false}>\n            <Animated.View style={[cardStyle, dragStyle, { position: 'absolute', left: startLocation.x, top: startLocation.y }]} {...panResponder.panHandlers} >\n                <CardFront card={props.card}/>\n            </Animated.View>\n        </TouchableOpacity>\n    )\n})\n\nexport default DraggableCard\n\n\n\n","import React, { useState } from 'react'\nimport MovableFlippableCard from '../cards/MovableFlippableCard'\nimport DraggableCard from '../cards/DraggableCard'\nimport { getPlayerCardLocationAfterDealing, getPlayerCardStartLocation, getCardFlipStateAfterDealing } from './helperFunctions.js'\n\n\nconst ControllablePlayerCard = React.forwardRef((props, ref) => {\n\n\n    const [cardState, setCardState] = useState('movable')\n    const [locationAtStart] = useState(getPlayerCardStartLocation(props.unitsAndLocations.unit, props.unitsAndLocations.spacing))\n    const [locationAfterDealing] = useState(getPlayerCardLocationAfterDealing(props.index, props.unitsAndLocations.unit, props.unitsAndLocations.spacing, props.cardCount))\n    const [cardWillFlipAfterDealing] = useState(getCardFlipStateAfterDealing(props.index, props.cardCount))\n\n    const convertCardState = (newState) => {\n        setCardState(newState)\n    }\n\n    if (cardState === 'null') {\n        return null\n    } else if (cardState === 'draggable') {\n        return (\n            <DraggableCard\n                card={props.card}\n                ref={ref}\n                index={props.index}\n                startLocation={locationAfterDealing}\n                convertCardState={convertCardState}\n                flipPossibleCardBelow={props.flipPossibleCardBelow}\n                setPlayerCardToPlayed={props.setPlayerCardToPlayed}\n                emptyPositions={props.emptyPositions}\n                handleEmptyPositionStateChanged={props.handleEmptyPositionStateChanged}\n                unitsAndLocations={props.unitsAndLocations}\n                topmostStuff={props.topmostStuff}\n            />\n        )\n    } else {\n        return (\n            <MovableFlippableCard\n                ref={ref}\n                index={props.index}\n                startLocation={locationAtStart}\n                card={props.card}\n                endLocation={locationAfterDealing}\n                flip={cardWillFlipAfterDealing}\n                convertCardState={convertCardState}\n                unitsAndLocations={props.unitsAndLocations}\n            />\n        )\n    }\n\n})\n\nexport default ControllablePlayerCard\n\n","import React, { useState, useImperativeHandle, useEffect } from 'react'\nimport { View } from 'react-native'\nimport ControllablePlayerCard from './ControllablePlayerCard'\nimport { toLeftOrRightGameStackInSingleCardDealing, getIndexOfPossibleCardBelow } from './helperFunctions.js'\n\n\nconst getPlayerCardsPlayedStates = (cardCount) => {\n    let playedStates = []\n    for (let i = 0; i < cardCount; i++) {\n        playedStates.push(false)\n    }\n    return playedStates\n}\n\n\nconst PlayerCards = React.forwardRef((props, ref) => {\n\n\n    const [playerCards] = useState(props.playerCards)\n    const [cardReferences] = useState(playerCards.map(card => React.createRef()))\n    const [indexDealNext, setIndexDealNext] = useState(props.playerCards.length > 15 ? 15 : 100)\n    const [playedStates, setPlayedStates] = useState(getPlayerCardsPlayedStates(props.playerCards.length))\n    const [emptyPositions, setEmptyPositions] = useState([false, false, false, false, false])\n\n    // tämän päivittäminen muualla, että saadaan peli päättymään, jos pelaaja voittaa!!!\n    useEffect(() => {\n        let gameOver = true\n        let min = Math.min(15, playerCards.length)\n        for (let i = 0; i < min; i++) {\n            if (playedStates[i] === false) {\n                gameOver = false\n            }\n        }\n        if (gameOver) {\n            props.gameOverEndRound('player')\n        }\n    },[playedStates, playerCards.length, props])\n\n    const setPlayerCardToPlayed = (cardIndex) => {\n        const updatedPlayedCards = [...playedStates]\n        updatedPlayedCards[cardIndex] = true\n        setPlayedStates(updatedPlayedCards)\n    }\n\n    const dealSolitaireCards = () => {\n        const limit = Math.min(playerCards.length, 15)\n        for (let i = 0; i < limit; i++) {\n            cardReferences[i].current.moveAndPossiblyFlip()\n        }\n    }\n\n    const dealSingleCard = () => {\n        if (indexDealNext < props.playerCards.length) {\n            cardReferences[indexDealNext].current.moveAndPossiblyFlip()\n            setTimeout(() => {\n                const toWhichStack = toLeftOrRightGameStackInSingleCardDealing(indexDealNext, playerCards.length)\n                if (toWhichStack === 'right')  {\n                    props.topmostStuff.changeRight(playerCards[indexDealNext])\n                } else {\n                    props.topmostStuff.changeLeft(playerCards[indexDealNext])\n                }\n                setIndexDealNext(indexDealNext + 1)\n            }, 1600)\n        }\n    }\n\n    const flipPossibleCardBelow = (cardIndex) => {\n        const indexOfCardBelow = getIndexOfPossibleCardBelow(cardIndex)\n        if (indexOfCardBelow !== -1) {\n            cardReferences[indexOfCardBelow].current.flip()\n        }\n    }\n\n    const handleEmptyPositionStateChanged = (action, indexOfEmptyPosition) => {\n        const empties = [ ...emptyPositions ]\n        if (action === 'occupy') {\n            empties[indexOfEmptyPosition] = false\n        } else {\n            empties[indexOfEmptyPosition] = true\n        }\n        setEmptyPositions(empties)\n    }\n\n    useImperativeHandle(ref, () => {\n        return { dealSolitaireCards, dealSingleCard }\n    })\n\n\n    return (\n        <View>\n            {playerCards.map((card, index) => {\n                return (\n                    <ControllablePlayerCard\n                        key={index}\n                        index={index}\n                        card={card}\n                        ref={cardReferences[index]}\n                        cardCount={playerCards.length}\n                        flipPossibleCardBelow={flipPossibleCardBelow}\n                        setPlayerCardToPlayed={setPlayerCardToPlayed}\n                        emptyPositions={emptyPositions}\n                        handleEmptyPositionStateChanged={handleEmptyPositionStateChanged}\n                        unitsAndLocations={props.unitsAndLocations}\n                        topmostStuff={props.topmostStuff}\n                    />\n                )\n            })}\n        </View>\n    )\n})\n\n\nexport default PlayerCards\n\n","import React from 'react'\nimport { View } from 'react-native'\nimport CardFront from '../cards/CardFront'\n\n\nconst getCardViewStyle = (side, unitsAndLocations) => {\n    let commonStyles = {\n        position: 'absolute',\n        width: unitsAndLocations.unit,\n        height: 1.7 * unitsAndLocations.unit,\n        borderRadius: 7,\n        zIndex: 0,\n    }\n    if (side === 'left') {\n        return { ...commonStyles,\n            left: unitsAndLocations.leftGamingStackXY.x,\n            top: unitsAndLocations.leftGamingStackXY.y,\n        }\n    } else {\n        return { ...commonStyles,\n            left: unitsAndLocations.rightGamingStackXY.x,\n            top: unitsAndLocations.rightGamingStackXY.y,\n        }\n    }\n}\n\n\nconst GameStack = ({ viewStyle, topmost }) => {\n    const background = topmost === '' ? 'green' : 'papayawhip'\n    return (\n        <View style={[viewStyle, { backgroundColor: background }]}>\n            {topmost !== '' ?\n                <CardFront card={topmost}/>\n                :\n                null\n            }\n        </View>\n    )\n}\n\nconst CommonGameStacks = ({ topmostLeft, topmostRight, unitsAndLocations }) => {\n\n    const cardViewStyleLeft = getCardViewStyle('left', unitsAndLocations)\n    const cardViewStyleRight = getCardViewStyle('right', unitsAndLocations)\n\n    return (\n        <View>\n            <GameStack\n                viewStyle={cardViewStyleLeft}\n                topmost={topmostLeft}\n            />\n            <GameStack\n                viewStyle={cardViewStyleRight}\n                topmost={topmostRight}\n            />\n        </View>\n    )\n}\n\nexport default CommonGameStacks\n\n","import React, { useState } from 'react'\nimport MovableFlippableCard from '../cards/MovableFlippableCard'\nimport { getCardFlipStateAfterDealing,\n    getComputerCardLocationAfterDealing,\n    getComputerCardStartLocation,\n} from './helperFunctions.js'\n\n\n\nconst ControllableComputerCard = React.forwardRef((props, ref) => {\n\n    const [cardState, setCardState] = useState('movable')\n    const [locationAtStart] = useState(getComputerCardStartLocation(props.unitsAndLocations.unit, props.unitsAndLocations.spacing))\n    const [locationAfterDealing] = useState(getComputerCardLocationAfterDealing(props.index, props.unitsAndLocations.unit, props.unitsAndLocations.spacing, props.cardCount))\n    const [cardWillFlipAfterDealing] = useState(getCardFlipStateAfterDealing(props.index, props.cardCount))\n\n    const convertCardState = (newState) => {\n        setCardState(newState)\n    }\n\n    if (cardState === 'null') {\n        return null\n    } else {\n        return (\n            <MovableFlippableCard\n                ref={ref}\n                index={props.index}\n                startLocation={locationAtStart}\n                card={props.card}\n                endLocation={locationAfterDealing}\n                flip={cardWillFlipAfterDealing}\n                convertCardState={convertCardState}\n                setComputerCardToPlayed={props.setComputerCardToPlayed}\n                unitsAndLocations={props.unitsAndLocations}\n            />\n        )\n    }\n\n})\n\nexport default ControllableComputerCard\n\n","import React, { useState, useImperativeHandle, useEffect } from 'react'\nimport { View } from 'react-native'\nimport ControllableComputerCard from './ControllableComputerCard'\nimport { toLeftOrRightGameStackInSingleCardDealing,\n    getIndexOfPossibleCardBelow,\n    getVisibleComputerCardsAtStart,\n    getIndexOfCardToMoveAndTargetStack,\n    getTargetPackLocation,\n} from './helperFunctions.js'\n\n\nconst getComputerCardsPlayedStates = (cardCount) => {\n    let playedStates = []\n    for (let i = 0; i < cardCount; i++) {\n        playedStates.push(false)\n    }\n    return playedStates\n}\n\n\nconst ComputerCards = React.forwardRef((props, ref) => {\n\n    const [computerCards] = useState(props.computerCards)\n    const [cardReferences] = useState(computerCards.map(card => React.createRef()))\n    const [indexDealNext, setIndexDealNext] = useState(props.computerCards.length > 15 ? 15 : 100)\n    const [visibleCards, setVisibleCards] = useState(getVisibleComputerCardsAtStart(computerCards.length))\n    const [playedStates, setPlayedStates] = useState(getComputerCardsPlayedStates(props.computerCards.length))\n\n    useEffect(() => {\n        let gameOver = true\n        let min = Math.min(15, computerCards.length)\n        for (let i = 0; i < min; i++) {\n            if (playedStates[i] === false) {\n                gameOver = false\n            }\n        }\n        if (gameOver) {\n            props.gameOverEndRound('computer')\n        }\n    },[playedStates, computerCards.length, props])\n\n\n    const setComputerCardToPlayed = (cardIndex) => {\n        const updatedPlayedCards = [...playedStates]\n        updatedPlayedCards[cardIndex] = true\n        setPlayedStates(updatedPlayedCards)\n    }\n\n    const dealSolitaireCards = () => {\n        const limit = Math.min(computerCards.length, 15)\n        for (let i = 0; i < limit; i++) {\n            cardReferences[i].current.moveAndPossiblyFlip()\n        }\n    }\n\n    const dealSingleCard = () => {\n        if (indexDealNext < props.computerCards.length) {\n            cardReferences[indexDealNext].current.moveAndPossiblyFlip()\n            setTimeout(() => {\n                const toWhichStack = toLeftOrRightGameStackInSingleCardDealing('left', indexDealNext, computerCards.length)\n                if (toWhichStack === 'right')  {\n                    props.topmostStuff.changeRight(computerCards[indexDealNext])\n                } else {\n                    props.topmostStuff.changeLeft(computerCards[indexDealNext])\n                }\n                setIndexDealNext(indexDealNext + 1)\n            }, 1600)\n        }\n    }\n\n    const performComputerCardMoveIfPossible = () => {\n        const indexOfCardToMove = getIndexOfCardToMoveAndTargetStack(computerCards, visibleCards, props.topmostStuff.valueLeft, props.topmostStuff.valueRight)\n        // console.log('indexOfCardToMove',indexOfCardToMove)\n        if (indexOfCardToMove.cardIndex !== -1) {\n            const targetPackLocation = getTargetPackLocation(indexOfCardToMove.target, props.unitsAndLocations.unit, props.unitsAndLocations.spacing)\n            // console.log('targetPackLocation',targetPackLocation)\n            cardReferences[indexOfCardToMove.cardIndex].current.moveAndNull(targetPackLocation, true)\n            //puuttuu vielä se, että palautetaan takaisin omalle paikalleen, mikäli pelaaja on jo\n            // ehtinyt tässä välissä tuomaan kortin pinoon\n            setTimeout(() => {\n                if (indexOfCardToMove.target === 'right')  {\n                    props.topmostStuff.changeRight(computerCards[indexOfCardToMove.cardIndex])\n                } else {\n                    props.topmostStuff.changeLeft(computerCards[indexOfCardToMove.cardIndex])\n                }\n                let updatedVisibleCards = visibleCards.filter(cardIndex => cardIndex !== indexOfCardToMove.cardIndex)\n                const indexOfCardBelow = getIndexOfPossibleCardBelow(indexOfCardToMove.cardIndex)\n                if (indexOfCardBelow !== -1) {\n                    updatedVisibleCards.push(indexOfCardBelow)\n                }\n                setVisibleCards(updatedVisibleCards)\n            }, 1000)\n            setTimeout(() => {\n                flipPossibleCardBelow(indexOfCardToMove.cardIndex)\n            }, 1500)\n\n        }\n\n    }\n\n\n    useImperativeHandle(ref, () => {\n        return { dealSolitaireCards, dealSingleCard, performComputerCardMoveIfPossible }\n    })\n\n    const flipPossibleCardBelow = (cardIndex) => {\n        const indexOfCardBelow = getIndexOfPossibleCardBelow(cardIndex)\n        if (indexOfCardBelow !== -1) {\n            cardReferences[indexOfCardBelow].current.flip()\n        }\n    }\n\n\n\n    return (\n        <View>\n            {computerCards.map((card, index) => {\n                return (\n                    <ControllableComputerCard\n                        key={index}\n                        index={index}\n                        card={card}\n                        ref={cardReferences[index]}\n                        spacing={props.spacing}\n                        cardCount={computerCards.length}\n                        flipPossibleCardBelow={flipPossibleCardBelow}\n                        setComputerCardToPlayed={setComputerCardToPlayed}\n                        unitsAndLocations={props.unitsAndLocations}\n                    />\n                )\n            })}\n        </View>\n    )\n\n\n})\n\nexport default ComputerCards\n\n\n","import React, { useState } from 'react'\nimport { View, TouchableOpacity, Text } from 'react-native'\nimport { connect } from 'react-redux'\nimport PlayerCards from './PlayerCards'\nimport CommonGameStacks from './CommonGameStacks'\nimport ComputerCards from './ComputerCards'\n\nconst Game = (props) => {\n\n    const [topmostLeft, setTopmostLeft] = useState('')\n    const [topmostRight, setTopmostRight] = useState('')\n    const [playerCards] = useState(props.game.playerStack)\n    const [computerCards] = useState(props.game.computerStack)\n    const [referencePlayerCards] = useState(React.createRef())\n    const [referenceComputerCards] = useState(React.createRef())\n    const [unitsAndLocations] = useState(props.unitsAndLocations)\n    const [cumulativeLeftStack, setCumulativeLeftStack] = useState([])\n    const [cumulativeRightStack, setCumulativeRightStack] = useState([])\n    const [touchingDisabled, setTouchingDisabled] = useState(true)\n\n    const dealSolitaireCards = () => {\n        referencePlayerCards.current.dealSolitaireCards()\n        referenceComputerCards.current.dealSolitaireCards()\n    }\n    const dealSingleCards = () => {\n        referencePlayerCards.current.dealSingleCard()\n        referenceComputerCards.current.dealSingleCard()\n    }\n\n    const changeTopmostRight = (card) => {\n        setTopmostRight(card)\n        // lisättävä tieto cumulative stackkiin, että mistä pinosta\n        // kortti on tulossa ja talletetaan cumulativeen esim. muodossa\n        // { card: ###, from: ### }\n    }\n    const changeTopmostLeft = (card) => {\n        setTopmostLeft(card)\n        // lisättävä tieto cumulative stackkiin, että mistä pinosta\n        // kortti on tulossa ja talletetaan cumulativeen esim. muodossa\n        // { card: ###, from: ### }\n    }\n\n\n    const computerPlay = () => {\n        setInterval(() => {\n            referenceComputerCards.current.performComputerCardMoveIfPossible()\n        }, 4000)\n    }\n\n    const gameOverEndRound = (theWinner) => {\n        setTimeout(() => {\n            props.gameRoundOver(theWinner)\n        }, 2000)\n    }\n\n    const topmostStuff = {\n        valueLeft: topmostLeft,\n        valueRight: topmostRight,\n        changeLeft: changeTopmostLeft,\n        changeRight: changeTopmostRight,\n    }\n\n    return (\n        <View>\n            <CommonGameStacks\n                topmostLeft={topmostLeft}\n                topmostRight={topmostRight}\n                unitsAndLocations={unitsAndLocations}\n            />\n            <PlayerCards\n                playerCards={playerCards}\n                ref={referencePlayerCards}\n                gameOverEndRound={gameOverEndRound}\n                unitsAndLocations={unitsAndLocations}\n                topmostStuff={topmostStuff}\n            />\n            <ComputerCards\n                computerCards={computerCards}\n                ref={referenceComputerCards}\n                gameOverEndRound={gameOverEndRound}\n                unitsAndLocations={unitsAndLocations}\n                topmostStuff={topmostStuff}\n            />\n            <Text style={{ backgroundColor: 'powderblue' }}>PROTOTYPE, UNDER DEVELOPMENT!!!</Text>\n            <TouchableOpacity onPress={dealSolitaireCards} >\n                <Text  style={{  backgroundColor: 'rosybrown' }}>BUTTON deal player solitaire (press only ONCE)</Text>\n            </TouchableOpacity>\n            <TouchableOpacity onPress={dealSingleCards} >\n                <Text  style={{  backgroundColor: 'powderblue' }}>BUTTON deal single card (press after solitaire animations)</Text>\n            </TouchableOpacity>\n            <TouchableOpacity onPress={computerPlay} >\n                <Text  style={{  backgroundColor: 'red' }}>BUTTON computer play</Text>\n            </TouchableOpacity>\n        </View>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n\n}\n\nconst ConnectedGame = connect(mapStateToProps, mapDispatchToProps)(Game)\n\n\nexport default ConnectedGame\n\n\n","import React from 'react'\nimport { View, TouchableOpacity, StyleSheet, Text, Animated } from 'react-native'\n\n\nconst WelcomeView = ({ startSetting, scaleUnit }) => {\n\n    const styles = getStyles(scaleUnit)\n\n    const visibility = new Animated.Value(1)\n    const animatedVisibility = { opacity: visibility }\n    const fadeOut = () => {\n        Animated.timing(visibility, {\n            toValue: 0, duration: 1000,\n        }).start()\n        setTimeout(() => {\n            startSetting()\n        }, 1000)\n    }\n\n    return (\n        <View>\n            <Animated.View style={animatedVisibility}>\n                <View style={styles.contents}>\n                    <Text style={styles.titleText}>nopsa</Text>\n                    <Text style={styles.infoText}>a card game for those with</Text>\n                    <Text style={styles.infoText}> skill, speed and luck</Text>\n                    <View style={styles.spacer}></View>\n                    <Text style={styles.infoText}>feel like playing?</Text>\n                    <TouchableOpacity onPress={fadeOut} style={styles.buttonView}>\n                        <Text style={styles.buttonText}>setup a new game</Text>\n                    </TouchableOpacity>\n                </View>\n            </Animated.View>\n        </View>\n    )\n}\n\n\nconst getStyles = (scaleUnit) => {\n    return StyleSheet.create({\n        contents:{\n            alignItems: 'center',\n            marginTop: scaleUnit / 2,\n        },\n        titleText: {\n            fontSize: scaleUnit / 1.5,\n            fontWeigth: 'bold',\n            color: '#B9CC3F',\n            fontFamily: 'Arial Black',\n        },\n        infoText: {\n            fontSize: scaleUnit / 2.5,\n            color: '#B9CC3F',\n            fontFamily: 'Arial',\n        },\n        spacer: {\n            height: scaleUnit / 2,\n        },\n        buttonView: {\n            backgroundColor: '#B9CC3F',\n            padding: scaleUnit / 5,\n            borderRadius: 8,\n            marginTop: scaleUnit / 5,\n        },\n        buttonText: {\n            color: 'green',\n            fontFamily: 'Arial',\n            fontSize: scaleUnit / 2.5,\n        },\n    })\n}\n\n\nexport default WelcomeView\n\n","import React from 'react'\nimport {  View } from 'react-native'\n\nconst SmallDot = ({ value, dotViewWidth, dotNumber }) => {\n\n    const changingOpacity = (value >= dotNumber) ? 1 : 0.2\n\n    const styleOuterView = {\n        width: dotViewWidth,\n        height: dotViewWidth * 1.4,\n        justifyContent: 'center',\n        alignItems: 'center',\n    }\n    const styleInnerView = {\n        width: 4,\n        height: 4,\n        opacity: changingOpacity,\n        backgroundColor: '#B9CC3F',\n        borderRadius: 3,\n    }\n\n\n    return (\n        <View style={styleOuterView}>\n            <View style={styleInnerView}/>\n        </View>\n    )\n}\n\nexport default SmallDot\n\n","import React from 'react'\nimport {  View, TouchableOpacity } from 'react-native'\n\n\nconst LargeDot = ({ value, dotNumber, dotViewWidth, handleSelectionChanged }) => {\n\n    const changingOpacity = (value >= dotNumber) ? 1 : 0.2\n\n    const styleOuterView = {\n        width: dotViewWidth,\n        height: dotViewWidth * 1.4,\n        justifyContent: 'center',\n        alignItems: 'center',\n        borderWidth: 1.5,\n        opacity: changingOpacity,\n        borderColor: '#B9CC3F',\n        borderRadius: dotViewWidth,\n    }\n    const styleInnerView = {\n        width: 4,\n        height: 4,\n        backgroundColor: '#B9CC3F',\n        borderRadius: 2.0,\n    }\n\n\n    return (\n        <TouchableOpacity onPress={() => handleSelectionChanged(dotNumber)}>\n            <View style={styleOuterView}>\n                <View  style={styleInnerView}/>\n            </View>\n        </TouchableOpacity>\n    )\n}\n\nexport default LargeDot\n\n","import React, { useState, useImperativeHandle } from 'react'\nimport {  View, StyleSheet } from 'react-native'\nimport SmallDot from './SmallDot'\nimport LargeDot from './LargeDot'\n\n\n\n\nconst DottedSlider = React.forwardRef((props, ref) => {\n\n    const scaleUnit = props.scaleUnit\n    const index = props.optionCount - 1\n    const [selectedValue, setSelectedValue] = useState(1)\n    const dotViewWidth = 6 * scaleUnit / 30\n\n    const handleSelectionChanged = (newValue) => {\n        let startValue = selectedValue\n        const changes = Math.max(newValue - selectedValue, selectedValue - newValue)\n        function changeUpOrDown(direction) {\n            return setInterval(() => {\n                if (direction === 'up' && startValue < newValue) {\n                    startValue++\n                    setSelectedValue(startValue)\n                } else if (direction === 'down' && newValue < startValue) {\n                    startValue--\n                    setSelectedValue(startValue)\n                }\n            }, 180 / changes)\n        }\n        let changeInterval\n        if (selectedValue < newValue) {\n            changeInterval = changeUpOrDown('up')\n        } else if (selectedValue > newValue) {\n            changeInterval = changeUpOrDown('down')\n        }\n        setTimeout(() => {\n            clearInterval(changeInterval)\n        }, 180 * changes)\n    }\n\n    const getSelectedValue = () => {\n        return (selectedValue - 1) / 6 + 1\n    }\n    useImperativeHandle(ref, () => {\n        return { getSelectedValue }\n    })\n\n\n    const displayDotSlider = () => {\n        let dots = []\n        for (let i = 1; i <= index * 6 + 1; i++) {\n            if ((i - 1) % 6 !== 0) {\n                dots.push(\n                    <SmallDot\n                        key={i}\n                        value={selectedValue}\n                        dotViewWidth={dotViewWidth}\n                        dotNumber={i}\n                    />)\n            } else {\n                dots.push(\n                    <LargeDot\n                        key={i}\n                        value={selectedValue}\n                        dotViewWidth={dotViewWidth}\n                        handleSelectionChanged={handleSelectionChanged}\n                        dotNumber={i}\n                    />)\n            }\n        }\n        return dots\n    }\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.dotSliderView}>\n                {displayDotSlider()}\n            </View>\n        </View>\n\n    )\n\n\n})\n\nexport default DottedSlider\n\n\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n        marginBottom: 50,\n    },\n    instructionText: {\n        color: '#B9CC3F',\n        fontFamily: 'Arial',\n        fontWeight: 'bold',\n        marginBottom: 15,\n    },\n    dotSliderView: {\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n})\n\n","import React from 'react'\nimport { View, TouchableOpacity } from 'react-native'\nimport CardBack from '../cards/CardBack'\n\nconst Stack = ({ displayColor, number, selectStack, scaleUnit }) => {\n\n    const stackStyle = {\n        width: scaleUnit * 1.5,\n        height: scaleUnit * 1.7 * 1.3,\n        borderRadius: 7 * 1.3,\n        borderWidth: 1.3,\n        justifyContent: 'center',\n        alignItems: 'center',\n    }\n\n    return (\n        <TouchableOpacity onPress={() => selectStack(number)}>\n            <View style={[stackStyle, displayColor]}>\n                <CardBack scaleUnit={scaleUnit}/>\n            </View>\n        </TouchableOpacity>\n    )\n}\n\nexport default Stack\n\n","import React, { useState, useImperativeHandle } from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport Stack from './Stack'\n\n\nconst StackSelection = React.forwardRef((props, ref) => {\n\n    const scaleUnit = props.scaleUnit\n    const styles = getStyles()\n\n    const [selectedStack, setSelectedStack] = useState(0)\n    const changedSelection = (id) => {\n        setSelectedStack(id)\n    }\n\n    const getSelectedStack = () => {\n        if (selectedStack === 0) {\n            return { player: 0, computer: 1 }\n        } else {\n            return { player: 1, computer: 0 }\n        }\n    }\n    useImperativeHandle(ref, () => {\n        return { getSelectedStack }\n    })\n\n    const borderColorStack1 = selectedStack === 0 ? { borderColor: '#B9CC3F' } : { borderColor: 'green' }\n    const borderColorStack2 = selectedStack === 1 ?  { borderColor: '#B9CC3F' } : { borderColor: 'green' }\n\n\n    return (\n        <View style={styles.container}>\n            <View style={{ flexDirection: 'row' }}>\n                <Stack displayColor={borderColorStack1} number={0} selectStack={changedSelection} scaleUnit={scaleUnit}/>\n                <View style={{ width: 30 }}/>\n                <Stack displayColor={borderColorStack2} number={1} selectStack={changedSelection} scaleUnit={scaleUnit}/>\n            </View>\n        </View>\n    )\n})\n\nexport default StackSelection\n\n\nconst getStyles = (scaleUnit) => {\n    return  StyleSheet.create({\n        container: {\n            alignItems: 'center',\n        },\n        instructionText: {\n            fontSize: scaleUnit / 2.5,\n            color: '#B9CC3F',\n            fontFamily: 'Arial',\n            marginBottom: scaleUnit / 3,\n        },\n    })\n}\n","import React from 'react'\nimport { View, TouchableOpacity, Animated, StyleSheet, Text } from 'react-native'\nimport { connect } from 'react-redux'\nimport { setGameSettings } from '../../reducers/gameReducer'\nimport DottedSlider from './DottedSlider'\nimport StackSelection from './StackSelection'\nimport { createStacks } from './createStacks.js'\n\n\nconst SelectionView = (props) => {\n\n    const scaleUnit = props.scaleUnit\n    const styles = getStyles(scaleUnit)\n\n    const referenceSkill = React.createRef()\n    const referenceSpeed = React.createRef()\n    const referenceStack = React.createRef()\n\n    const visibility = new Animated.Value(1)\n    const animatedVisibility = { opacity: visibility }\n\n    const saveSelectedSettings = () => {\n        Animated.timing(visibility, {\n            toValue: 0, duration: 1000,\n        }).start()\n        const stacks = createStacks()\n        setTimeout(() => {\n            props.setGameSettings({\n                skill: referenceSkill.current.getSelectedValue(),\n                speed: referenceSpeed.current.getSelectedValue(),\n                playerStack: stacks[referenceStack.current.getSelectedStack().player],\n                computerStack : stacks[referenceStack.current.getSelectedStack().computer],\n                isOn: true,\n            })\n        }, 1000)\n\n    }\n\n\n    return (\n        <Animated.View style={[styles.container, animatedVisibility]}>\n            <Text style={styles.instructionText}>select opponent skill level</Text>\n            <DottedSlider\n                scaleUnit={scaleUnit}\n                optionCount={3}\n                ref={referenceSkill}\n            />\n            <Text style={styles.instructionText}>select opponent speed</Text>\n            <DottedSlider\n                scaleUnit={scaleUnit}\n                optionCount={5}\n                ref={referenceSpeed}\n            />\n            <Text style={styles.instructionText}>select your stack</Text>\n            <StackSelection\n                scaleUnit={scaleUnit}\n                ref={referenceStack}\n            />\n            <View style={styles.spacer}></View>\n            <TouchableOpacity onPress={saveSelectedSettings} style={styles.buttonView}>\n                <Text style={styles.buttonText}>save settings</Text>\n            </TouchableOpacity>\n        </Animated.View>\n    )\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n    setGameSettings,\n}\n\nconst ConnectedSelectionView = connect(mapStateToProps, mapDispatchToProps)(SelectionView)\n\nexport default ConnectedSelectionView\n\n\nconst getStyles = (scaleUnit) => {\n    return  StyleSheet.create({\n        container: {\n            alignItems: 'center',\n            marginTop: 50,\n        },\n        instructionText: {\n            fontSize: scaleUnit / 2.5,\n            color: '#B9CC3F',\n            fontFamily: 'Arial',\n            marginBottom: scaleUnit / 3,\n        },\n        spacer: {\n            height: scaleUnit / 2,\n        },\n        buttonView: {\n            backgroundColor: '#B9CC3F',\n            padding: scaleUnit / 5,\n            borderRadius: 8,\n            marginTop: scaleUnit / 5,\n        },\n        buttonText: {\n            color: 'green',\n            fontFamily: 'Arial',\n            fontSize: scaleUnit / 2.5,\n        },\n    })\n}\n\n\n","import shuffle from 'shuffle-array'\n\nexport const createStacks = () => {\n    const stack = []\n    for (let j = 1; j < 5; j++) {\n\n        for (let i = 1; i < 14; i++) {\n            stack.push({ suit: j, value: i })\n        }\n\n    }\n\n    const stackShuffled = shuffle(stack)\n\n    return [ stackShuffled.slice(0, 26), stackShuffled.slice(26) ]\n}\n\n","import React, { useState } from 'react'\nimport { View } from 'react-native'\nimport WelcomeView from './WelcomeView'\nimport SelectionView from './SelectionView'\n\n\nconst SetUpGame = ({ scaleUnit }) => {\n\n    const [settingNew, setSettingNew] = useState(false)\n\n    const startSettingUpNewGame = () => {\n        setSettingNew(true)\n    }\n\n    return (\n        <View>\n            {settingNew ?\n                <SelectionView  scaleUnit={scaleUnit}/>\n                :\n                <WelcomeView startSetting={startSettingUpNewGame} scaleUnit={scaleUnit}/>\n            }\n        </View>\n    )\n}\n\nexport default SetUpGame\n\n\n\n\n\n\n","import React from 'react'\nimport { View, Text } from 'react-native'\nimport { connect } from 'react-redux'\n\n\nconst Winner = (props) => {\n\n    return (\n        <View>\n            <Text>Winner of the round:</Text>\n            <Text>{props.winner}</Text>\n        </View>\n    )\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n}\n\nconst ConnectedWinner = connect(mapStateToProps, mapDispatchToProps)(Winner)\n\nexport default ConnectedWinner\n\n\n\n","import React, { useState } from 'react'\nimport { View, Dimensions, StyleSheet } from 'react-native'\nimport { connect } from 'react-redux'\nimport Game from './game/Game'\nimport SetUpGame from './setup/SetUpGame'\nimport Winner from './game/Winner'\n\n\nconst GameOfNopsa = (props) => {\n\n    const screenWidth = Dimensions.get('window').width\n    const screenHeight = Dimensions.get('window').height\n    const scaleUnit = Math.min(screenWidth / 6, screenHeight /(6 * 1.7))\n    const styles = getStyles(screenWidth, screenHeight)\n    const spacing = (screenWidth - 6 * scaleUnit) / 2\n    const unitsAndLocations = getUnitsAndLocations(scaleUnit, spacing)\n    const gameIsOn = props.game.isOn\n\n    const [winner, setWinner] = useState('none')\n\n    const gameRoundOver = (theWinner) => {\n\n        setWinner(theWinner)\n    }\n    const GameWithRounds = () => {\n        if (winner === 'none') {\n            return <Game scaleUnit={scaleUnit} spacing={spacing} gameRoundOver={gameRoundOver} unitsAndLocations={unitsAndLocations}/>\n        } else {\n            return <Winner winner={winner}/>\n        }\n    }\n\n\n    return (\n        <View style={styles.screen}>\n            {gameIsOn ?\n                <GameWithRounds/>\n                :\n                <SetUpGame scaleUnit={scaleUnit}/>\n            }\n        </View>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n}\n\nconst ConnectedGameOfNopsa = connect(mapStateToProps, mapDispatchToProps)(GameOfNopsa)\n\nexport default ConnectedGameOfNopsa\n\nconst getStyles = (screenWidth, screenHeight) => {\n    return StyleSheet.create({\n        screen: {\n            width: screenWidth,\n            height: screenHeight,\n            backgroundColor: 'green',\n        },\n    })\n}\n\n\nconst getUnitsAndLocations = (unit, spacing) => {\n\n    const leftDealingStackXY = {\n        x: spacing + (1/6) * unit,\n        y: (0.5 + 1.5 + 0.75) * 1.7 * unit,\n    }\n    const leftGamingStackXY = {\n        x: spacing + (1/6 + 1 + 4/6) * unit,\n        y: (0.5 + 1.5 + 0.75) * 1.7 * unit,\n    }\n    const rightGamingStackXY = {\n        x: spacing + (1/6 + 1 + 4/6 + 1 + 2/6) * unit,\n        y: (0.5 + 1.5 + 0.75) * 1.7 * unit,\n    }\n    const rightDealingStackXY = {\n        x: spacing + (1/6 + 1 + 4/6 + 1 + 2/6 + 1 + 4/6) * unit,\n        y: (0.5 + 1.5 + 0.75) * 1.7 * unit,\n    }\n\n    return {\n        unit: unit,\n        spacing: spacing,\n        leftDealingStackXY: leftDealingStackXY,\n        leftGamingStackXY: leftGamingStackXY,\n        rightGamingStackXY: rightGamingStackXY,\n        rightDealingStackXY: rightDealingStackXY,\n        timing: {\n            short: 100,\n            medium: 600,\n            long: 500,\n        },\n    }\n\n\n}\n\n\n\n","\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers/rootReducer'\nimport GameOfNopsa from './components/GameOfNopsa'\n\nconst store = createStore(rootReducer)\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            <GameOfNopsa/>\n        </Provider>\n    )\n}\n\nexport default App\n","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n"],"sourceRoot":""}