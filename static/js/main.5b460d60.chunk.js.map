{"version":3,"sources":["reducers/gameReducer.js","reducers/rootReducer.js","components/game/Game.js","components/setup/WelcomeView.js","components/setup/SmallDot.js","components/setup/LargeDot.js","components/setup/DottedSlider.js","components/setup/SelectionView.js","components/setup/SetUpGame.js","components/GameOfNopsa.js","App.js","index.js"],"names":["initialState","isOn","gameReducer","state","action","type","data","rootReducer","combineReducers","game","ConnectedGame","connect","props","View","Text","getStyles","scaleUnit","StyleSheet","create","contents","alignItems","marginTop","titleView","titleText","fontSize","fontWeigth","color","fontFamily","infoText","spacer","height","buttonView","backgroundColor","padding","borderRadius","buttonText","WelcomeView","startSetting","styles","visibility","Animated","Value","animatedVisibility","opacity","style","TouchableOpacity","onPress","timing","toValue","duration","start","setTimeout","SmallDot","value","dotViewWidth","styleOuterView","width","justifyContent","styleInnerView","dotNumber","LargeDot","handleSelectionChanged","borderWidth","borderColor","DottedSlider","React","forwardRef","ref","index","optionCount","useState","selectedValue","setSelectedValue","newValue","changeInterval","startValue","changes","Math","max","changeUpOrDown","direction","setInterval","clearInterval","getSelectedValue","useImperativeHandle","container","dotSliderView","dots","i","push","key","displayDotSlider","marginBottom","instructionText","fontWeight","flexDirection","mapDispatchToProps","setGameSettings","settings","ConnectedSelectionView","referenceSkill","createRef","referenceSpeed","console","log","current","SetUpGame","screenWidth","Dimensions","get","screenHeight","min","settingNew","setSettingNew","screen","ConnectedGameOfNopsa","gameIsOn","store","createStore","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5b460d60.chunk.js","sourcesContent":["const initialState = { isOn: false }\n\nconst gameReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n    case 'SET_GAME_SETTINGS':\n        return action.data\n    default:\n        return state\n    }\n\n}\n\nexport const setGameSettings = (settings) => {\n    return {\n        type: 'SET_GAME_SETTINGS',\n        data: settings,\n    }\n}\n\n\nexport default gameReducer\n\n","import { combineReducers } from 'redux'\nimport gameReducer from './gameReducer'\n\nconst rootReducer = combineReducers({\n    game: gameReducer,\n})\n\nexport default rootReducer\n\n\n","import React from 'react'\nimport { View, Text, Dimensions } from 'react-native'\nimport { connect } from 'react-redux'\n\n// const screenWidth = Dimensions.get('window').width\n// const screenHeight = Dimensions.get('window').height\n// const cardWidthIfScreenWidthIsUsed = screenWidth / 6\n// const cardWidthIfScreenHeightIsUsed = screenHeight / ((0.5 + 1 + 0.75 + 1 + 0.75 + 1.5 + 0.5) * 1.7)\n// const cardWidth = Math.min(cardWidthIfScreenWidthIsUsed, cardWidthIfScreenHeightIsUsed)\n// const cardHeight = 1.7 * cardWidth\n// const spacing = (screenWidth - 6 * cardWidth) / 2\n\n\nconst Game = (props) => {\n\n    return (\n        <View>\n            <Text>GAME</Text>\n        </View>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n\n}\n\nconst ConnectedGame = connect(mapStateToProps, mapDispatchToProps)(Game)\n\n\nexport default ConnectedGame","import React from 'react'\nimport { View, TouchableOpacity, StyleSheet, Text, Animated } from 'react-native'\n\n\nconst WelcomeView = ({ startSetting, scaleUnit }) => {\n\n    const styles = getStyles(scaleUnit)\n\n    const visibility = new Animated.Value(1)\n    const animatedVisibility = { opacity: visibility }\n    const fadeOut = () => {\n        Animated.timing(visibility, {\n            toValue: 0, duration: 1000,\n        }).start()\n        setTimeout(() => {\n            startSetting()\n        }, 1000)\n    }\n\n    return (\n        <View>\n            <Animated.View style={animatedVisibility}>\n                <View style={styles.contents}>\n                    <Text style={styles.titleText}>nopsa</Text>\n                    <Text style={styles.infoText}>a card game for those with</Text>\n                    <Text style={styles.infoText}> skill, speed and luck</Text>\n                    <View style={styles.spacer}></View>\n                    <Text style={styles.infoText}>feel like playing?</Text>\n                    <TouchableOpacity onPress={fadeOut} style={styles.buttonView}>\n                        <Text style={styles.buttonText}>setup a new game</Text>\n                    </TouchableOpacity>\n                </View>\n            </Animated.View>\n        </View>\n    )\n}\n\n\nconst getStyles = (scaleUnit) => {\n    return StyleSheet.create({\n        contents:{\n            alignItems: 'center',\n            marginTop: scaleUnit / 2,\n        },\n        titleView: {\n            alignItems: 'center',\n        },\n        titleText: {\n            fontSize: scaleUnit / 1.5,\n            fontWeigth: 'bold',\n            color: '#B9CC3F',\n            fontFamily: 'Arial Black',\n        },\n        infoText: {\n            fontSize: scaleUnit / 2.5,\n            color: '#B9CC3F',\n            fontFamily: 'Arial',\n        },\n        spacer: {\n            height: scaleUnit / 2,\n        },\n        buttonView: {\n            backgroundColor: '#B9CC3F',\n            padding: scaleUnit / 5,\n            borderRadius: 8,\n            marginTop: scaleUnit / 5,\n        },\n        buttonText: {\n            color: 'green',\n            fontFamily: 'Arial',\n            fontSize: scaleUnit / 2.5,\n        },\n    })\n}\n\n\nexport default WelcomeView\n\n","import React from 'react'\nimport {  View } from 'react-native'\n\nconst SmallDot = ({ value, dotViewWidth, dotNumber }) => {\n\n    const changingOpacity = (value >= dotNumber) ? 1 : 0.2\n\n    const styleOuterView = {\n        width: dotViewWidth,\n        height: dotViewWidth * 1.4,\n        justifyContent: 'center',\n        alignItems: 'center',\n    }\n    const styleInnerView = {\n        width: 4,\n        height: 4,\n        opacity: changingOpacity,\n        backgroundColor: '#B9CC3F',\n        borderRadius: 3,\n    }\n\n\n    return (\n        <View style={styleOuterView}>\n            <View style={styleInnerView}/>\n        </View>\n    )\n}\n\nexport default SmallDot\n\n","import React from 'react'\nimport {  View, TouchableOpacity } from 'react-native'\n\n\nconst LargeDot = ({ value, dotNumber, dotViewWidth, handleSelectionChanged }) => {\n\n    const changingOpacity = (value >= dotNumber) ? 1 : 0.2\n\n    const styleOuterView = {\n        width: dotViewWidth,\n        height: dotViewWidth * 1.4,\n        justifyContent: 'center',\n        alignItems: 'center',\n        borderWidth: 1.5,\n        opacity: changingOpacity,\n        borderColor: '#B9CC3F',\n        borderRadius: dotViewWidth,\n    }\n    const styleInnerView = {\n        width: 4,\n        height: 4,\n        backgroundColor: '#B9CC3F',\n        borderRadius: 2.0,\n    }\n\n\n    return (\n        <TouchableOpacity onPress={() => handleSelectionChanged(dotNumber)}>\n            <View style={styleOuterView}>\n                <View  style={styleInnerView}/>\n            </View>\n        </TouchableOpacity>\n    )\n}\n\nexport default LargeDot\n\n","import React, { useState, useImperativeHandle } from 'react'\nimport {  View, StyleSheet } from 'react-native'\nimport SmallDot from './SmallDot'\nimport LargeDot from './LargeDot'\n\n\n\nconst DottedSlider = React.forwardRef((props, ref) => {\n\n    const scaleUnit = props.scaleUnit\n    const index = props.optionCount - 1\n    const [selectedValue, setSelectedValue] = useState(1)\n    const dotViewWidth = 6 * scaleUnit / 30\n\n    const handleSelectionChanged = (newValue) => {\n        let startValue = selectedValue\n        const changes = Math.max(newValue - selectedValue, selectedValue - newValue)\n        function changeUpOrDown(direction) {\n            return setInterval(() => {\n                if (direction === 'up' && startValue < newValue) {\n                    startValue++\n                    setSelectedValue(startValue)\n                } else if (direction === 'down' && newValue < startValue) {\n                    startValue--\n                    setSelectedValue(startValue)\n                }\n            }, 180 / changes)\n        }\n        let changeInterval\n        if (selectedValue < newValue) {\n            changeInterval = changeUpOrDown('up')\n        } else if (selectedValue > newValue) {\n            changeInterval = changeUpOrDown('down')\n        }\n        setTimeout(() => {\n            clearInterval(changeInterval)\n        }, 180 * changes)\n    }\n\n    const getSelectedValue = () => {\n        return (selectedValue - 1) / 6 + 1\n    }\n    useImperativeHandle(ref, () => {\n        return { getSelectedValue }\n    })\n\n\n    const displayDotSlider = () => {\n        let dots = []\n        for (let i = 1; i <= index * 6 + 1; i++) {\n            if ((i - 1) % 6 !== 0) {\n                dots.push(\n                    <SmallDot\n                        key={i}\n                        value={selectedValue}\n                        dotViewWidth={dotViewWidth}\n                        dotNumber={i}\n                    />)\n            } else {\n                dots.push(\n                    <LargeDot\n                        key={i}\n                        value={selectedValue}\n                        dotViewWidth={dotViewWidth}\n                        handleSelectionChanged={handleSelectionChanged}\n                        dotNumber={i}\n                    />)\n            }\n        }\n        return dots\n    }\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.dotSliderView}>\n                {displayDotSlider()}\n            </View>\n        </View>\n\n    )\n\n\n})\n\nexport default DottedSlider\n\n\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n        marginBottom: 50,\n    },\n    instructionText: {\n        color: '#B9CC3F',\n        fontFamily: 'Arial',\n        fontWeight: 'bold',\n        marginBottom: 15,\n    },\n    dotSliderView: {\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n})\n\n","import React, { useState } from 'react'\nimport { View, TouchableOpacity,  StyleSheet, Text } from 'react-native'\nimport { connect } from 'react-redux'\nimport { setGameSettings } from '../../reducers/gameReducer'\nimport DottedSlider from './DottedSlider'\n\n\nconst SelectionView = (props) => {\n\n    const scaleUnit = props.scaleUnit\n    const styles = getStyles(scaleUnit)\n\n    const referenceSkill = React.createRef()\n    const referenceSpeed = React.createRef()\n\n    const saveSelectedSettings = () => {\n        console.log('referenceSkill', referenceSkill.current.getSelectedValue())\n    }\n\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.instructionText}>select opponent skill level</Text>\n            <DottedSlider\n                scaleUnit={scaleUnit}\n                optionCount={3}\n                ref={referenceSkill}\n            />\n            <Text style={styles.instructionText}>select opponent speed</Text>\n            <DottedSlider\n                scaleUnit={scaleUnit}\n                optionCount={5}\n                ref={referenceSpeed}\n            />\n            <TouchableOpacity onPress={saveSelectedSettings} style={styles.buttonView}>\n                <Text style={styles.buttonText}>save settings</Text>\n            </TouchableOpacity>\n        </View>\n    )\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n    setGameSettings,\n}\n\nconst ConnectedSelectionView = connect(mapStateToProps, mapDispatchToProps)(SelectionView)\n\nexport default ConnectedSelectionView\n\n\nconst getStyles = (scaleUnit) => {\n    return  StyleSheet.create({\n        container: {\n            alignItems: 'center',\n            marginTop: 50,\n        },\n        instructionText: {\n            fontSize: scaleUnit / 2.5,\n            color: '#B9CC3F',\n            fontFamily: 'Arial',\n            marginBottom: scaleUnit / 3,\n        },\n        spacer: {\n            height: scaleUnit / 2,\n        },\n        buttonView: {\n            backgroundColor: '#B9CC3F',\n            padding: scaleUnit / 5,\n            borderRadius: 8,\n            marginTop: scaleUnit / 5,\n        },\n        buttonText: {\n            color: 'green',\n            fontFamily: 'Arial',\n            fontSize: scaleUnit / 2.5,\n        },\n    })\n}\n\n\n","import React, { useState } from 'react'\nimport { View, Dimensions,  StyleSheet } from 'react-native'\nimport WelcomeView from './WelcomeView'\nimport SelectionView from './SelectionView'\n\n\nconst SetUpGame = () => {\n\n    const screenWidth = Dimensions.get('window').width\n    const screenHeight = Dimensions.get('window').height\n    const scaleUnit = Math.min(screenWidth / 6, screenHeight /(6 * 1.7))\n\n    const styles = getStyles(screenWidth, screenHeight)\n    const [settingNew, setSettingNew] = useState(false)\n\n    const startSettingUpNewGame = () => {\n        setSettingNew(true)\n    }\n\n\n    return (\n        <View style={styles.screen}>\n            {settingNew ?\n                <SelectionView  scaleUnit={scaleUnit}/>\n                :\n                <WelcomeView startSetting={startSettingUpNewGame} scaleUnit={scaleUnit}/>\n            }\n        </View>\n    )\n}\n\nexport default SetUpGame\n\n\nconst getStyles = (screenWidth, screenHeight) => {\n    return StyleSheet.create({\n        screen: {\n            alignItems: 'center',\n            width: screenWidth,\n            height: screenHeight,\n            backgroundColor: 'green',\n        },\n    })\n}\n\n\n\n\n","import React from 'react'\nimport { View } from 'react-native'\nimport { connect } from 'react-redux'\nimport Game from './game/Game'\nimport SetUpGame from './setup/SetUpGame'\n\n\n\nconst GameOfNopsa = (props) => {\n\n    const gameIsOn = props.game.isOn\n    console.log('GameOfNopsa')\n\n    return (\n        <View>\n            {gameIsOn ?\n                <Game/>\n                :\n                <SetUpGame/>\n            }\n        </View>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n}\n\nconst ConnectedGameOfNopsa = connect(mapStateToProps, mapDispatchToProps)(GameOfNopsa)\n\nexport default ConnectedGameOfNopsa\n\n\n\n\n","\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers/rootReducer'\nimport GameOfNopsa from './components/GameOfNopsa'\n\nconst store = createStore(rootReducer)\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            <GameOfNopsa/>\n        </Provider>\n    )\n}\n\nexport default App\n","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n"],"sourceRoot":""}