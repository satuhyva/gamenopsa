{"version":3,"sources":["reducers/gameReducer.js","reducers/rootReducer.js","components/cards/CardFront.js","components/cards/CardBack.js","components/cards/FlippableCard.js","components/cards/MovableFlippableCard.js","components/cards/DraggableCard.js","components/game/helperFunctions.js","components/game/ControllablePlayerCard.js","components/game/PlayerCards.js","components/game/CommonGameStacks.js","components/game/Game.js","components/setup/WelcomeView.js","components/setup/SmallDot.js","components/setup/LargeDot.js","components/setup/DottedSlider.js","components/setup/Stack.js","components/setup/StackSelection.js","components/setup/SelectionView.js","components/setup/createStacks.js","components/setup/SetUpGame.js","components/GameOfNopsa.js","App.js","index.js"],"names":["initialState","isOn","gameReducer","state","action","type","data","rootReducer","combineReducers","game","CardFront","card","color","char","suit","cardText","value","View","style","justifyContent","alignItems","Text","fontSize","CardBack","scaleUnit","viewStyle","backgroundColor","width","height","borderRadius","rows","i","push","key","displayCards","FlippableCard","React","forwardRef","props","ref","size","cardStyle","animatedFlipBackside","Animated","Value","animatedFlipBacksideStyle","transform","rotateX","interpolate","inputRange","outputRange","animatedFlipFrontside","animatedFlipFrontsideStyle","flip","newState","index","sequence","timing","toValue","tension","friction","duration","start","performFlipAnimations","setTimeout","convertCardState","useImperativeHandle","position","left","MovableFlippableCard","useState","ValueXY","animatedMove","animatedMoveStyle","translateX","x","translateY","y","startLocation","referenceFlip","createRef","current","moveAndPossiblyFlip","delay","newLocation","moveToNewLocation","endLocation","top","DraggableCard","animatedDraggable","dragStyle","handleReleasedCard","releaseX","releaseY","returnCardToStartDragPosition","panResponder","PanResponder","create","onStartShouldSetPanResponder","evt","gestureState","onPanResponderMove","event","dx","dy","moveCardAlongDrag","onPanResponderRelease","moveX","moveY","TouchableOpacity","disabled","panHandlers","toLeftOrRightGameStackInSingleCardDealing","cardIndex","playerCardCount","countOfPlayerCardsToDeal","computerCardCount","countOfComputerCardsToDeal","Math","min","getPlayerCardSolitaireLocation","scalingUnit","spacing","positionX","positionY","unitHeight","origoY","ControllablePlayerCard","cardState","setCardState","locationAtStart","cardCount","getPlayerCardLocationAfterDealing","locationAfterDealing","getCardFlipStateAfterDealing","cardWillFlipAfterDealing","PlayerCards","playerCards","map","cardReferences","length","indexDealNext","setIndexDealNext","dealSolitaireCards","limit","dealSingleCard","changeTopmostRight","changeTopmostLeft","GameStack","topmost","background","CommonGameStacks","topmostLeft","topmostRight","cardViewStyleLeft","zIndex","getCardViewStyleLeft","cardViewStyleRight","getCardViewStyleRight","ConnectedGame","connect","setTopmostRight","playerStack","referencePlayerCards","console","log","onPress","getStyles","StyleSheet","contents","marginTop","titleText","fontWeigth","fontFamily","infoText","spacer","buttonView","padding","buttonText","WelcomeView","startSetting","styles","visibility","animatedVisibility","opacity","SmallDot","dotViewWidth","styleOuterView","styleInnerView","dotNumber","LargeDot","handleSelectionChanged","borderWidth","borderColor","DottedSlider","optionCount","selectedValue","setSelectedValue","newValue","changeInterval","startValue","changes","max","changeUpOrDown","direction","setInterval","clearInterval","getSelectedValue","container","dotSliderView","dots","displayDotSlider","marginBottom","instructionText","fontWeight","flexDirection","Stack","displayColor","number","selectStack","stackStyle","StackSelection","selectedStack","setSelectedStack","changedSelection","id","getSelectedStack","player","computer","borderColorStack1","borderColorStack2","mapDispatchToProps","setGameSettings","settings","ConnectedSelectionView","referenceSkill","referenceSpeed","referenceStack","stacks","stack","j","stackShuffled","shuffle","slice","createStacks","skill","speed","computerStack","SetUpGame","settingNew","setSettingNew","ConnectedGameOfNopsa","screenWidth","Dimensions","get","screenHeight","gameIsOn","screen","store","createStore","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0047aa2.chunk.js","sourcesContent":["const initialState = { isOn: false }\n\nconst gameReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n    case 'SET_GAME_SETTINGS':\n        return action.data\n    default:\n        return state\n    }\n\n}\n\nexport const setGameSettings = (settings) => {\n    return {\n        type: 'SET_GAME_SETTINGS',\n        data: settings,\n    }\n}\n\n\nexport default gameReducer\n\n","import { combineReducers } from 'redux'\nimport gameReducer from './gameReducer'\n\nconst rootReducer = combineReducers({\n    game: gameReducer,\n})\n\nexport default rootReducer\n\n\n","import React from 'react'\nimport { View, Text } from 'react-native'\n\nconst CardFront = ({ card }) => {\n\n    let color = 'black'\n    let char = ''\n    switch (card.suit) {\n    case 2:\n        char = '♥'\n        color = 'red'\n        break\n    case 3:\n        char = '♣'\n        break\n    case 4:\n        char = '♦'\n        color = 'red'\n        break\n    default:\n        char = '♠'\n        break\n    }\n\n    const cardText = card.value === 1 ? 'A' : card.value\n\n    return (\n        <View  style={{ justifyContent: 'center', alignItems: 'center' }}>\n            <Text style={{ color: color, fontSize: 30 }}>{char}</Text>\n            <Text style={{ color: color, fontSize: 30 }}>{cardText}</Text>\n        </View>\n    )\n}\n\n\nexport default CardFront\n\n\n","import React from 'react'\nimport { View, Text } from 'react-native'\n\nconst CardBack = ({ scaleUnit }) => {\n\n    const viewStyle = {\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#B9CC3F',\n        width: scaleUnit,\n        height: scaleUnit * 1.7,\n        borderRadius: 6,\n    }\n\n    const displayCards = () => {\n        let rows = []\n        for (let i = 0; i < 9 ; i++) {\n            rows.push(<Text key={i} style={{ color: 'green', fontSize: scaleUnit / 7 }}>©©©©©©©</Text>)\n        }\n        return rows\n    }\n\n    return (\n        <View  style={viewStyle}>\n            {displayCards()}\n        </View>\n    )\n}\n\nexport default CardBack\n\n","import React, { useImperativeHandle } from 'react'\nimport { View, Animated } from 'react-native'\nimport CardFront from './CardFront'\nimport CardBack from './CardBack'\n\n\nconst getCardStyle = (size) => {\n    return {\n        width: size,\n        height: size * 1.7,\n        borderRadius: 7,\n        backgroundColor: 'papayawhip',\n    }\n}\n\nconst performFlipAnimations = (animatedFlipBackside, animatedFlipFrontside) => {\n    Animated.sequence([\n        Animated.timing(animatedFlipBackside, {\n            toValue: 90, tension: 10, friction: 10, duration: 300,\n        }),\n        Animated.timing(animatedFlipFrontside, {\n            toValue: 180, tension: 10, friction: 10, duration: 300,\n        }),\n    ]).start()\n}\n\n\n\nconst FlippableCard = React.forwardRef((props, ref) => {\n\n    const cardStyle = getCardStyle(props.size)\n\n    let animatedFlipBackside = new Animated.Value(0)\n    const interpolatedFlipBackside = animatedFlipBackside.interpolate({\n        inputRange: [0, 180], outputRange: ['180deg', '360deg'],\n    })\n    const animatedFlipBacksideStyle = { transform: [ { rotateX: interpolatedFlipBackside } ] }\n\n    let animatedFlipFrontside = new Animated.Value(90)\n    const interpolatedFlipFrontside = animatedFlipFrontside.interpolate({\n        inputRange: [0, 180], outputRange: ['180deg', '360deg'],\n    })\n    const animatedFlipFrontsideStyle = { transform: [ { rotateX: interpolatedFlipFrontside } ] }\n\n\n    const flip = () => {\n        const newState = props.index > 14 ? 'null' : 'draggable'\n        performFlipAnimations(animatedFlipBackside, animatedFlipFrontside)\n        setTimeout(() => {\n            props.convertCardState(newState)\n        }, 600)\n    }\n\n    useImperativeHandle(ref, () => {\n        return { flip }\n    })\n\n\n    return (\n        <View>\n            <Animated.View style={[cardStyle, { position: 'absolute', left: 0 }, animatedFlipBacksideStyle]}>\n                <CardBack scaleUnit={props.size}/>\n            </Animated.View>\n            <Animated.View style={[cardStyle, animatedFlipFrontsideStyle]}>\n                <CardFront card={props.card}/>\n            </Animated.View>\n        </View>\n    )\n})\n\nexport default FlippableCard\n\n","import React, { useImperativeHandle, useState } from 'react'\nimport { Animated } from 'react-native'\nimport FlippableCard from '../cards/FlippableCard'\n\n\nconst moveToNewLocation = (animatedMove, startLocation, delay, newLocation) => {\n    Animated.sequence([\n        Animated.delay(delay),\n        Animated.timing(animatedMove, {\n            toValue: { x: newLocation.x - startLocation.x, y: newLocation.y - startLocation.y }, duration: 1000,\n        }),\n    ]).start()\n}\n\n\n\nconst MovableFlippableCard = React.forwardRef((props, ref) => {\n\n    const [animatedMove] = useState(new Animated.ValueXY())\n    const animatedMoveStyle = { transform: [ { translateX: animatedMove.x }, { translateY: animatedMove.y } ] }\n    const [startLocation] = useState(props.startLocation)\n    const referenceFlip = React.createRef()\n\n    const flip = () => {\n        referenceFlip.current.flip()\n    }\n\n    const moveAndPossiblyFlip = () => {\n        const delay = props.index > 14 ? 0 : 500 * props.index\n        moveToNewLocation(animatedMove, startLocation, delay, props.endLocation)\n        if (props.flip) {\n            setTimeout(() => {\n                flip()\n            }, delay + 1000)\n        }\n    }\n\n    useImperativeHandle(ref, () => {\n        return { moveAndPossiblyFlip, flip }\n    })\n\n    return (\n        <Animated.View style={[animatedMoveStyle, { position: 'absolute', left: startLocation.x, top: startLocation.y }]}>\n            <FlippableCard\n                ref={referenceFlip}\n                index={props.index}\n                card={props.card}\n                size={props.scaleUnit}\n                convertCardState={props.convertCardState}\n            />\n        </Animated.View>\n    )\n})\n\nexport default MovableFlippableCard\n\n\n","import React, { useState } from 'react'\nimport { Animated, PanResponder, TouchableOpacity } from 'react-native'\nimport CardFront from './CardFront'\n\n\nconst getCardStyle = (size) => {\n    return {\n        width: size,\n        height: size * 1.7,\n        borderRadius: 7,\n        backgroundColor: 'papayawhip',\n    }\n}\n\nconst returnCardToStartDragPosition = (animatedDraggable) => {\n    Animated.timing(animatedDraggable, {\n        toValue: { x: 0, y: 0 }, duration: 500,\n    }).start()\n}\n\nconst moveCardAlongDrag = (dx, dy, animatedDraggable) => {\n    Animated.timing(animatedDraggable, {\n        toValue: { x: dx, y: dy }, duration: 0,\n    }).start()\n}\n\n\n\nconst DraggableCard = React.forwardRef((props, ref) => {\n\n    const cardStyle = getCardStyle(props.size)\n    const [startLocation] = useState(props.startLocation)\n\n    let animatedDraggable = new Animated.ValueXY()\n    const dragStyle = { transform: [ { translateX: animatedDraggable.x }, { translateY: animatedDraggable.y }] }\n\n\n    const handleReleasedCard = (releaseX, releaseY) => {\n        // const wasReleasedOnRight = wasReleasedOnRightGamingPack(releaseX, releaseY, unitWidth, bufferLeft)\n        // const valueOkForRight = valueIsSuitable(topmostGamingRight.value, card.value)\n        // if (wasReleasedOnRight && valueOkForRight) {\n        //     moveCardOntoRightGamePack(releaseX, releaseY)\n        //     setTimeout(() => {\n        //         props.updateRightGamingPack(index)\n        //     }, 500)\n        // } else {\n        returnCardToStartDragPosition(animatedDraggable)\n        // }\n\n    }\n    const panResponder = PanResponder.create({\n        onStartShouldSetPanResponder: (evt, gestureState) => true,\n        onPanResponderMove: (event, gestureState) => {\n            moveCardAlongDrag(gestureState.dx, gestureState.dy, animatedDraggable)\n        },\n        onPanResponderRelease: (evt, gestureState) => {\n            handleReleasedCard(gestureState.moveX, gestureState.moveY)\n        },\n    })\n\n\n    return (\n        <TouchableOpacity  disabled={false}>\n            <Animated.View style={[cardStyle, dragStyle, { position: 'absolute', left: startLocation.x, top: startLocation.y }]} {...panResponder.panHandlers} >\n                <CardFront card={props.card}/>\n            </Animated.View>\n        </TouchableOpacity>\n    )\n})\n\nexport default DraggableCard\n\n\n\n","\nexport const getPlayerCardStartLocation = (scalingUnit, spacing) => {\n    const positionX = spacing + (1/6 + 1 + 4/6 + 1 + 2/6 + 1 + 4/6) * scalingUnit\n    const positionY = (0.5 + 1.5 + 0.75) * 1.7 * scalingUnit\n    return { x: positionX, y: positionY }\n}\n\nexport const getCardFlipStateAfterDealing = (cardIndex, cardCount) => {\n    let flip = false\n    switch (cardIndex) {\n    case 0: case 5: case 9: case 12: case 14:\n        flip = true\n        break\n    case 1: case 2: case 3: case 4:\n        if (cardIndex + 4 > cardCount) {\n            flip = true\n        }\n        break\n    case 6: case 7: case 8:\n        if (cardIndex + 4 > cardCount) {\n            flip = true\n        }\n        break\n    case 10: case 11:\n        if (cardIndex + 4 > cardCount) {\n            flip = true\n        }\n        break\n    case 13:\n        if (cardIndex + 4 > cardCount) {\n            flip = true\n        }\n        break\n    default:\n        break\n    }\n    if (cardIndex > 14) {\n        flip = true\n    }\n    return flip\n}\n\n\nexport const getPlayerCardLocationAfterDealing = (cardIndex, scalingUnit, spacing, cardCount) => {\n\n    if (cardIndex < 15) {\n        return getPlayerCardSolitaireLocation(cardIndex, scalingUnit, spacing)\n    } else {\n        const positionY = (0.5 + 1.5 + 0.75) * 1.7 * scalingUnit\n        const toLeftOrRightStack = toLeftOrRightGameStackInSingleCardDealing(cardIndex, cardCount)\n        if (toLeftOrRightStack === 'right') {\n            const rightPackPositionX = spacing + (1/6 + 1 + 4/6 + 1 + 2/6) * scalingUnit\n            return { x: rightPackPositionX, y: positionY }\n        } else {\n            const leftPackPositionX = spacing + (1/6 + 1 + 4/6) * scalingUnit\n            return { x: leftPackPositionX, y: positionY }\n        }\n    }\n\n}\n\n\nexport const toLeftOrRightGameStackInSingleCardDealing = (cardIndex, playerCardCount) => {\n    const countOfPlayerCardsToDeal = playerCardCount - 15 > 0 ? playerCardCount - 15 : 0\n    const computerCardCount = 52 - playerCardCount\n    const countOfComputerCardsToDeal = computerCardCount - 15 > 0 ? computerCardCount - 15 : 0\n    const numberOfBothPlayersDealCards = Math.min(countOfPlayerCardsToDeal, countOfComputerCardsToDeal)\n    if (cardIndex < 15 + numberOfBothPlayersDealCards) {\n        return 'right'\n    } else {\n        if (computerCardCount % 2 === 0 && cardIndex% 2 === 0) {\n            return 'right'\n        } else {\n            return 'left'\n        }\n    }\n}\n\n\nconst getPlayerCardSolitaireLocation = (cardIndex, scalingUnit, spacing) => {\n\n    const unitHeight = 1.7 * scalingUnit\n    const origoY =  (0.5 + 1.5 + 0.75 + 1.0 + 0.75) * unitHeight\n\n    let positionX\n\n    switch (cardIndex) {\n    case 0:\n        positionX = spacing + 1 / 6 * scalingUnit\n        break\n    case 1: case 5:\n        positionX = spacing + (2 / 6  + 1)* scalingUnit\n        break\n    case 2: case 6: case 9:\n        positionX = spacing +  (3 / 6 + 2) * scalingUnit\n        break\n    case 3: case 7: case 10: case 12:\n        positionX = spacing +  (4 / 6 + 3) * scalingUnit\n        break\n    default:\n        positionX = spacing +  (5 / 6 + 4) * scalingUnit\n    }\n\n    let positionY\n\n    switch (cardIndex) {\n    case 14:\n        positionY = origoY + (4 * 0.125) * unitHeight\n        break\n    case 12: case 13:\n        positionY = origoY + (3 * 0.125) * unitHeight\n        break\n    case 9: case 10: case 11:\n        positionY = origoY + (2 * 0.125) * unitHeight\n        break\n    case 5: case 6: case 7: case 8:\n        positionY = origoY + (1 * 0.125) * unitHeight\n        break\n    default:\n        positionY = origoY\n    }\n\n    return { x: positionX, y: positionY }\n}\n\n\nexport const getGameStackForDealingSingleCard = (cardIndex, cardCount) => {\n\n}","import React, { useState } from 'react'\nimport MovableFlippableCard from '../cards/MovableFlippableCard'\nimport DraggableCard from '../cards/DraggableCard'\nimport { getPlayerCardLocationAfterDealing, getPlayerCardStartLocation, getCardFlipStateAfterDealing } from './helperFunctions.js'\n\n\nconst ControllablePlayerCard = React.forwardRef((props, ref) => {\n\n    const [cardState, setCardState] = useState('movable')\n    const [locationAtStart] = useState(getPlayerCardStartLocation(props.scaleUnit, props.spacing))\n    const [locationAfterDealing] = useState(getPlayerCardLocationAfterDealing(props.index, props.scaleUnit, props.spacing, props.cardCount))\n    const [cardWillFlipAfterDealing] = useState(getCardFlipStateAfterDealing(props.index, props.cardCount))\n\n    const convertCardState = (newState) => {\n        setCardState(newState)\n    }\n\n    if (cardState === 'null') {\n        return null\n    } else if (cardState === 'draggable') {\n        return (\n            <DraggableCard\n                card={props.card}\n                ref={ref}\n                index={props.index}\n                size={props.scaleUnit}\n                startLocation={locationAfterDealing}\n            />\n        )\n    } else {\n        return (\n            <MovableFlippableCard\n                ref={ref}\n                index={props.index}\n                scaleUnit={props.scaleUnit}\n                startLocation={locationAtStart}\n                card={props.card}\n                endLocation={locationAfterDealing}\n                flip={cardWillFlipAfterDealing}\n                convertCardState={convertCardState}\n            />\n        )\n    }\n\n})\n\nexport default ControllablePlayerCard\n\n","import React, { useState, useImperativeHandle } from 'react'\nimport { View } from 'react-native'\nimport ControllablePlayerCard from './ControllablePlayerCard'\nimport { toLeftOrRightGameStackInSingleCardDealing } from './helperFunctions.js'\n\n\nconst PlayerCards = React.forwardRef((props, ref) => {\n\n    const [playerCards] = useState(props.playerCards)\n    const [cardReferences] = useState(playerCards.map(card => React.createRef()))\n    const [indexDealNext, setIndexDealNext] = useState(props.playerCards.length > 15 ? 15 : 100)\n\n    const dealSolitaireCards = () => {\n        const limit = Math.min(playerCards.length, 15)\n        for (let i = 0; i < limit; i++) {\n            cardReferences[i].current.moveAndPossiblyFlip()\n        }\n    }\n\n    const dealSingleCard = () => {\n        if (indexDealNext < props.playerCards.length) {\n            cardReferences[indexDealNext].current.moveAndPossiblyFlip()\n            setTimeout(() => {\n                const toWhichStack = toLeftOrRightGameStackInSingleCardDealing(indexDealNext, playerCards.length)\n                if (toWhichStack === 'right')  {\n                    props.changeTopmostRight(playerCards[indexDealNext])\n                } else {\n                    props.changeTopmostLeft(playerCards[indexDealNext])\n                }\n                setIndexDealNext(indexDealNext + 1)\n            }, 1600)\n        }\n    }\n\n    useImperativeHandle(ref, () => {\n        return { dealSolitaireCards, dealSingleCard }\n    })\n\n\n    return (\n        <View>\n            {playerCards.map((card, index) => {\n                return (\n                    <ControllablePlayerCard\n                        key={index}\n                        index={index}\n                        card={card}\n                        ref={cardReferences[index]}\n                        scaleUnit={props.scaleUnit}\n                        spacing={props.spacing}\n                        cardCount={playerCards.length}\n                    />\n                )\n            })}\n        </View>\n    )\n})\n\n\nexport default PlayerCards\n\n","import React from 'react'\nimport { View } from 'react-native'\nimport CardFront from '../cards/CardFront'\n\n\nconst getCardViewStyleLeft = (scaleUnit, spacing) => {\n    return {\n        position: 'absolute',\n        left: spacing + (1/6 + 1 + 4/6) * scaleUnit,\n        top: (0.5 + 1.5 + 0.75) * 1.7 * scaleUnit,\n        width: scaleUnit,\n        height: 1.7 * scaleUnit,\n        borderRadius: 7,\n        zIndex: 0,\n    }\n}\n\nconst getCardViewStyleRight = (scaleUnit, spacing) => {\n    return {\n        position: 'absolute',\n        left: spacing + (1/6 + 1 + 4/6 + 1 + 2/6) * scaleUnit,\n        top: (0.5 + 1.5 + 0.75) * 1.7 * scaleUnit,\n        width: scaleUnit,\n        height: 1.7 * scaleUnit,\n        borderRadius: 7,\n        zIndex: 0,\n    }\n}\n\n\nconst GameStack = ({ viewStyle, topmost }) => {\n    const background = topmost === '' ? 'green' : 'papayawhip'\n    return (\n        <View style={[viewStyle, { backgroundColor: background }]}>\n            {topmost !== '' ?\n                <CardFront card={topmost}/>\n                :\n                null\n            }\n        </View>\n    )\n}\n\nconst CommonGameStacks = ({ topmostLeft, topmostRight,  scaleUnit, spacing }) => {\n\n    const cardViewStyleLeft = getCardViewStyleLeft(scaleUnit, spacing)\n    const cardViewStyleRight = getCardViewStyleRight(scaleUnit, spacing)\n\n    return (\n        <View>\n            <GameStack\n                viewStyle={cardViewStyleLeft}\n                topmost={topmostLeft}\n            />\n            <GameStack\n                viewStyle={cardViewStyleRight}\n                topmost={topmostRight}\n            />\n        </View>\n    )\n}\n\nexport default CommonGameStacks\n\n","import React, { useState } from 'react'\nimport { View, TouchableOpacity, Text } from 'react-native'\nimport { connect } from 'react-redux'\nimport PlayerCards from './PlayerCards'\nimport CommonGameStacks from './CommonGameStacks'\n\n\nconst Game = (props) => {\n\n    const [topmostLeft, setTopmostLeft] = useState('')\n    const [topmostRight, setTopmostRight] = useState('')\n    const [playerCards] = useState(props.game.playerStack)\n    const referencePlayerCards = React.createRef()\n\n    const dealSolitaireCards = () => {\n        referencePlayerCards.current.dealSolitaireCards()\n    }\n    const dealSingleCards = () => {\n        referencePlayerCards.current.dealSingleCard()\n    }\n\n    const changeTopmostRight = (card) => {\n        setTopmostRight(card)\n    }\n    const changeTopmostLeft = (card) => {\n        console.log('changeTopmostLeft')\n    }\n\n\n    return (\n        <View>\n            <CommonGameStacks\n                topmostLeft={topmostLeft}\n                topmostRight={topmostRight}\n                scaleUnit={props.scaleUnit}\n                spacing={props.spacing}\n            />\n            <PlayerCards\n                playerCards={playerCards}\n                ref={referencePlayerCards}\n                scaleUnit={props.scaleUnit}\n                spacing={props.spacing}\n                changeTopmostRight={changeTopmostRight}\n                changeTopmostLeft={changeTopmostLeft}\n            />\n            <TouchableOpacity onPress={dealSolitaireCards} >\n                <Text >deal solitaire</Text>\n            </TouchableOpacity>\n            <TouchableOpacity onPress={dealSingleCards} >\n                <Text >deal single</Text>\n            </TouchableOpacity>\n        </View>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n\n}\n\nconst ConnectedGame = connect(mapStateToProps, mapDispatchToProps)(Game)\n\n\nexport default ConnectedGame\n\n\n","import React from 'react'\nimport { View, TouchableOpacity, StyleSheet, Text, Animated } from 'react-native'\n\n\nconst WelcomeView = ({ startSetting, scaleUnit }) => {\n\n    const styles = getStyles(scaleUnit)\n\n    const visibility = new Animated.Value(1)\n    const animatedVisibility = { opacity: visibility }\n    const fadeOut = () => {\n        Animated.timing(visibility, {\n            toValue: 0, duration: 1000,\n        }).start()\n        setTimeout(() => {\n            startSetting()\n        }, 1000)\n    }\n\n    return (\n        <View>\n            <Animated.View style={animatedVisibility}>\n                <View style={styles.contents}>\n                    <Text style={styles.titleText}>nopsa</Text>\n                    <Text style={styles.infoText}>a card game for those with</Text>\n                    <Text style={styles.infoText}> skill, speed and luck</Text>\n                    <View style={styles.spacer}></View>\n                    <Text style={styles.infoText}>feel like playing?</Text>\n                    <TouchableOpacity onPress={fadeOut} style={styles.buttonView}>\n                        <Text style={styles.buttonText}>setup a new game</Text>\n                    </TouchableOpacity>\n                </View>\n            </Animated.View>\n        </View>\n    )\n}\n\n\nconst getStyles = (scaleUnit) => {\n    return StyleSheet.create({\n        contents:{\n            alignItems: 'center',\n            marginTop: scaleUnit / 2,\n        },\n        titleText: {\n            fontSize: scaleUnit / 1.5,\n            fontWeigth: 'bold',\n            color: '#B9CC3F',\n            fontFamily: 'Arial Black',\n        },\n        infoText: {\n            fontSize: scaleUnit / 2.5,\n            color: '#B9CC3F',\n            fontFamily: 'Arial',\n        },\n        spacer: {\n            height: scaleUnit / 2,\n        },\n        buttonView: {\n            backgroundColor: '#B9CC3F',\n            padding: scaleUnit / 5,\n            borderRadius: 8,\n            marginTop: scaleUnit / 5,\n        },\n        buttonText: {\n            color: 'green',\n            fontFamily: 'Arial',\n            fontSize: scaleUnit / 2.5,\n        },\n    })\n}\n\n\nexport default WelcomeView\n\n","import React from 'react'\nimport {  View } from 'react-native'\n\nconst SmallDot = ({ value, dotViewWidth, dotNumber }) => {\n\n    const changingOpacity = (value >= dotNumber) ? 1 : 0.2\n\n    const styleOuterView = {\n        width: dotViewWidth,\n        height: dotViewWidth * 1.4,\n        justifyContent: 'center',\n        alignItems: 'center',\n    }\n    const styleInnerView = {\n        width: 4,\n        height: 4,\n        opacity: changingOpacity,\n        backgroundColor: '#B9CC3F',\n        borderRadius: 3,\n    }\n\n\n    return (\n        <View style={styleOuterView}>\n            <View style={styleInnerView}/>\n        </View>\n    )\n}\n\nexport default SmallDot\n\n","import React from 'react'\nimport {  View, TouchableOpacity } from 'react-native'\n\n\nconst LargeDot = ({ value, dotNumber, dotViewWidth, handleSelectionChanged }) => {\n\n    const changingOpacity = (value >= dotNumber) ? 1 : 0.2\n\n    const styleOuterView = {\n        width: dotViewWidth,\n        height: dotViewWidth * 1.4,\n        justifyContent: 'center',\n        alignItems: 'center',\n        borderWidth: 1.5,\n        opacity: changingOpacity,\n        borderColor: '#B9CC3F',\n        borderRadius: dotViewWidth,\n    }\n    const styleInnerView = {\n        width: 4,\n        height: 4,\n        backgroundColor: '#B9CC3F',\n        borderRadius: 2.0,\n    }\n\n\n    return (\n        <TouchableOpacity onPress={() => handleSelectionChanged(dotNumber)}>\n            <View style={styleOuterView}>\n                <View  style={styleInnerView}/>\n            </View>\n        </TouchableOpacity>\n    )\n}\n\nexport default LargeDot\n\n","import React, { useState, useImperativeHandle } from 'react'\nimport {  View, StyleSheet } from 'react-native'\nimport SmallDot from './SmallDot'\nimport LargeDot from './LargeDot'\n\n\n\n\nconst DottedSlider = React.forwardRef((props, ref) => {\n\n    const scaleUnit = props.scaleUnit\n    const index = props.optionCount - 1\n    const [selectedValue, setSelectedValue] = useState(1)\n    const dotViewWidth = 6 * scaleUnit / 30\n\n    const handleSelectionChanged = (newValue) => {\n        let startValue = selectedValue\n        const changes = Math.max(newValue - selectedValue, selectedValue - newValue)\n        function changeUpOrDown(direction) {\n            return setInterval(() => {\n                if (direction === 'up' && startValue < newValue) {\n                    startValue++\n                    setSelectedValue(startValue)\n                } else if (direction === 'down' && newValue < startValue) {\n                    startValue--\n                    setSelectedValue(startValue)\n                }\n            }, 180 / changes)\n        }\n        let changeInterval\n        if (selectedValue < newValue) {\n            changeInterval = changeUpOrDown('up')\n        } else if (selectedValue > newValue) {\n            changeInterval = changeUpOrDown('down')\n        }\n        setTimeout(() => {\n            clearInterval(changeInterval)\n        }, 180 * changes)\n    }\n\n    const getSelectedValue = () => {\n        return (selectedValue - 1) / 6 + 1\n    }\n    useImperativeHandle(ref, () => {\n        return { getSelectedValue }\n    })\n\n\n    const displayDotSlider = () => {\n        let dots = []\n        for (let i = 1; i <= index * 6 + 1; i++) {\n            if ((i - 1) % 6 !== 0) {\n                dots.push(\n                    <SmallDot\n                        key={i}\n                        value={selectedValue}\n                        dotViewWidth={dotViewWidth}\n                        dotNumber={i}\n                    />)\n            } else {\n                dots.push(\n                    <LargeDot\n                        key={i}\n                        value={selectedValue}\n                        dotViewWidth={dotViewWidth}\n                        handleSelectionChanged={handleSelectionChanged}\n                        dotNumber={i}\n                    />)\n            }\n        }\n        return dots\n    }\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.dotSliderView}>\n                {displayDotSlider()}\n            </View>\n        </View>\n\n    )\n\n\n})\n\nexport default DottedSlider\n\n\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n        marginBottom: 50,\n    },\n    instructionText: {\n        color: '#B9CC3F',\n        fontFamily: 'Arial',\n        fontWeight: 'bold',\n        marginBottom: 15,\n    },\n    dotSliderView: {\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n})\n\n","import React from 'react'\nimport { View, TouchableOpacity } from 'react-native'\nimport CardBack from '../cards/CardBack'\n\nconst Stack = ({ displayColor, number, selectStack, scaleUnit }) => {\n\n    const stackStyle = {\n        width: scaleUnit * 1.5,\n        height: scaleUnit * 1.7 * 1.3,\n        borderRadius: 7 * 1.3,\n        borderWidth: 1.3,\n        justifyContent: 'center',\n        alignItems: 'center',\n    }\n\n    return (\n        <TouchableOpacity onPress={() => selectStack(number)}>\n            <View style={[stackStyle, displayColor]}>\n                <CardBack scaleUnit={scaleUnit}/>\n            </View>\n        </TouchableOpacity>\n    )\n}\n\nexport default Stack\n\n","import React, { useState, useImperativeHandle } from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport Stack from './Stack'\n\n\nconst StackSelection = React.forwardRef((props, ref) => {\n\n    const scaleUnit = props.scaleUnit\n    const styles = getStyles()\n\n    const [selectedStack, setSelectedStack] = useState(0)\n    const changedSelection = (id) => {\n        setSelectedStack(id)\n    }\n\n    const getSelectedStack = () => {\n        if (selectedStack === 0) {\n            return { player: 0, computer: 1 }\n        } else {\n            return { player: 1, computer: 0 }\n        }\n    }\n    useImperativeHandle(ref, () => {\n        return { getSelectedStack }\n    })\n\n    const borderColorStack1 = selectedStack === 0 ? { borderColor: '#B9CC3F' } : { borderColor: 'green' }\n    const borderColorStack2 = selectedStack === 1 ?  { borderColor: '#B9CC3F' } : { borderColor: 'green' }\n\n\n    return (\n        <View style={styles.container}>\n            <View style={{ flexDirection: 'row' }}>\n                <Stack displayColor={borderColorStack1} number={0} selectStack={changedSelection} scaleUnit={scaleUnit}/>\n                <View style={{ width: 30 }}/>\n                <Stack displayColor={borderColorStack2} number={1} selectStack={changedSelection} scaleUnit={scaleUnit}/>\n            </View>\n        </View>\n    )\n})\n\nexport default StackSelection\n\n\nconst getStyles = (scaleUnit) => {\n    return  StyleSheet.create({\n        container: {\n            alignItems: 'center',\n        },\n        instructionText: {\n            fontSize: scaleUnit / 2.5,\n            color: '#B9CC3F',\n            fontFamily: 'Arial',\n            marginBottom: scaleUnit / 3,\n        },\n    })\n}\n","import React from 'react'\nimport { View, TouchableOpacity, Animated, StyleSheet, Text } from 'react-native'\nimport { connect } from 'react-redux'\nimport { setGameSettings } from '../../reducers/gameReducer'\nimport DottedSlider from './DottedSlider'\nimport StackSelection from './StackSelection'\nimport { createStacks } from './createStacks.js'\n\n\nconst SelectionView = (props) => {\n\n    const scaleUnit = props.scaleUnit\n    const styles = getStyles(scaleUnit)\n\n    const referenceSkill = React.createRef()\n    const referenceSpeed = React.createRef()\n    const referenceStack = React.createRef()\n\n    const visibility = new Animated.Value(1)\n    const animatedVisibility = { opacity: visibility }\n\n    const saveSelectedSettings = () => {\n        Animated.timing(visibility, {\n            toValue: 0, duration: 1000,\n        }).start()\n        const stacks = createStacks()\n        setTimeout(() => {\n            props.setGameSettings({\n                skill: referenceSkill.current.getSelectedValue(),\n                speed: referenceSpeed.current.getSelectedValue(),\n                playerStack: stacks[referenceStack.current.getSelectedStack().player],\n                computerStack : stacks[referenceStack.current.getSelectedStack().computer],\n                isOn: true,\n            })\n        }, 1000)\n\n    }\n\n\n    return (\n        <Animated.View style={[styles.container, animatedVisibility]}>\n            <Text style={styles.instructionText}>select opponent skill level</Text>\n            <DottedSlider\n                scaleUnit={scaleUnit}\n                optionCount={3}\n                ref={referenceSkill}\n            />\n            <Text style={styles.instructionText}>select opponent speed</Text>\n            <DottedSlider\n                scaleUnit={scaleUnit}\n                optionCount={5}\n                ref={referenceSpeed}\n            />\n            <Text style={styles.instructionText}>select your stack</Text>\n            <StackSelection\n                scaleUnit={scaleUnit}\n                ref={referenceStack}\n            />\n            <View style={styles.spacer}></View>\n            <TouchableOpacity onPress={saveSelectedSettings} style={styles.buttonView}>\n                <Text style={styles.buttonText}>save settings</Text>\n            </TouchableOpacity>\n        </Animated.View>\n    )\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n    setGameSettings,\n}\n\nconst ConnectedSelectionView = connect(mapStateToProps, mapDispatchToProps)(SelectionView)\n\nexport default ConnectedSelectionView\n\n\nconst getStyles = (scaleUnit) => {\n    return  StyleSheet.create({\n        container: {\n            alignItems: 'center',\n            marginTop: 50,\n        },\n        instructionText: {\n            fontSize: scaleUnit / 2.5,\n            color: '#B9CC3F',\n            fontFamily: 'Arial',\n            marginBottom: scaleUnit / 3,\n        },\n        spacer: {\n            height: scaleUnit / 2,\n        },\n        buttonView: {\n            backgroundColor: '#B9CC3F',\n            padding: scaleUnit / 5,\n            borderRadius: 8,\n            marginTop: scaleUnit / 5,\n        },\n        buttonText: {\n            color: 'green',\n            fontFamily: 'Arial',\n            fontSize: scaleUnit / 2.5,\n        },\n    })\n}\n\n\n","import shuffle from 'shuffle-array'\n\nexport const createStacks = () => {\n    const stack = []\n    for (let j = 1; j < 5; j++) {\n\n        for (let i = 1; i < 14; i++) {\n            stack.push({ suit: j, value: i })\n        }\n\n    }\n\n    const stackShuffled = shuffle(stack)\n\n    return [ stackShuffled.slice(0, 26), stackShuffled.slice(26) ]\n}\n\n","import React, { useState } from 'react'\nimport { View } from 'react-native'\nimport WelcomeView from './WelcomeView'\nimport SelectionView from './SelectionView'\n\n\nconst SetUpGame = ({ scaleUnit }) => {\n\n    const [settingNew, setSettingNew] = useState(false)\n\n    const startSettingUpNewGame = () => {\n        setSettingNew(true)\n    }\n\n    return (\n        <View>\n            {settingNew ?\n                <SelectionView  scaleUnit={scaleUnit}/>\n                :\n                <WelcomeView startSetting={startSettingUpNewGame} scaleUnit={scaleUnit}/>\n            }\n        </View>\n    )\n}\n\nexport default SetUpGame\n\n\n\n\n\n\n","import React from 'react'\nimport { View, Dimensions, StyleSheet } from 'react-native'\nimport { connect } from 'react-redux'\nimport Game from './game/Game'\nimport SetUpGame from './setup/SetUpGame'\n\n\n\nconst GameOfNopsa = (props) => {\n\n    const screenWidth = Dimensions.get('window').width\n    const screenHeight = Dimensions.get('window').height\n    const scaleUnit = Math.min(screenWidth / 6, screenHeight /(6 * 1.7))\n    const styles = getStyles(screenWidth, screenHeight)\n    const spacing = (screenWidth - 6 * scaleUnit) / 2\n\n    const gameIsOn = props.game.isOn\n\n\n    return (\n        <View style={styles.screen}>\n            {gameIsOn ?\n                <Game scaleUnit={scaleUnit} spacing={spacing}/>\n                :\n                <SetUpGame scaleUnit={scaleUnit}/>\n            }\n        </View>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n}\n\nconst ConnectedGameOfNopsa = connect(mapStateToProps, mapDispatchToProps)(GameOfNopsa)\n\nexport default ConnectedGameOfNopsa\n\nconst getStyles = (screenWidth, screenHeight) => {\n    return StyleSheet.create({\n        screen: {\n            width: screenWidth,\n            height: screenHeight,\n            backgroundColor: 'green',\n        },\n    })\n}\n\n\n\n","\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers/rootReducer'\nimport GameOfNopsa from './components/GameOfNopsa'\n\nconst store = createStore(rootReducer)\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            <GameOfNopsa/>\n        </Provider>\n    )\n}\n\nexport default App\n","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n"],"sourceRoot":""}