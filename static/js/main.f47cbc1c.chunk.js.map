{"version":3,"sources":["reducers/gameReducer.js","reducers/rootReducer.js","components/cards/CardFront.js","components/cards/CardBack.js","components/cards/FlippableCard.js","components/cards/MovableFlippableCard.js","components/game/helperFunctions.js","components/cards/DraggableCard.js","components/game/ControllablePlayerCard.js","components/game/PlayerCards.js","components/game/CommonGameStacks.js","components/game/ControllableComputerCard.js","components/game/ComputerCards.js","components/game/ControlPanel.js","components/game/Game.js","components/setup/WelcomeView.js","components/setup/SmallDot.js","components/setup/LargeDot.js","components/setup/DottedSlider.js","components/setup/Stack.js","components/setup/StackSelection.js","components/setup/SelectionView.js","components/setup/createStacks.js","components/setup/SetUpGame.js","components/game/Winner.js","components/GameOfNopsa.js","App.js","index.js"],"names":["initialState","isOn","gameReducer","state","action","type","data","rootReducer","combineReducers","game","CardFront","card","color","char","suit","cardText","value","View","style","justifyContent","alignItems","Text","fontSize","CardBack","scaleUnit","viewStyle","backgroundColor","width","height","borderRadius","rows","i","push","key","displayCards","FlippableCard","React","forwardRef","props","ref","cardStyle","getCardStyle","unitsAndLocations","unit","animatedFlipBacksideValue","Animated","Value","animatedFlipBacksideStyle","transform","rotateX","interpolate","inputRange","outputRange","animatedFlipFrontsideValue","animatedFlipFrontsideStyle","flip","flipDuration","performFlipAnimations","useImperativeHandle","position","left","sequence","timing","toValue","tension","friction","duration","start","MovableFlippableCard","useState","ValueXY","animatedMove","animatedMoveStyle","translateX","x","translateY","y","startLocation","referenceFlip","createRef","flipOnly","flipDurationDealing","current","moveAndPossiblyFlipWithDelay","moveDurationDealing","delay","index","moveToNewLocation","endLocation","setTimeout","moveCardToLocation","location","top","convertCardState","newLocation","moveDuration","getCardFlipStateAfterDealing","cardIndex","cardCount","toLeftOrRightGameStackInSingleCardDealing","side","countOfCardsToDeal","opponentCardCount","countOfComputerCardsToDeal","Math","min","getPlayerCardSolitaireLocation","scalingUnit","spacing","positionX","positionY","unitHeight","origoY","wasReleasedOnRightStack","releaseX","releaseY","gamingStackRightX","gamingStackRightY","wasReleasedOnLeftStack","gamingStackLeftX","gamingStackLeftY","valueIsOKforPlacingOntoStack","whatStack","topmostLeft","topmostRight","newCard","currentTopmostValue","newValue","getIndexOfPossibleCardBelow","onTopAndBelowCardIndexPairs","Map","get","getComputerCardLocationAfterDealing","getComputerCardSolitaireLocation","getCardStatesAtStart","cardStates","getOccupancyDataAfterFirstDealingCards","occupancies","number","handleCardStateChanges","cardsAndNewStates","setCardStates","updatedCardStates","length","newState","handleOccupancyDataChanges","positionToOccupy","occupancyData","setOccupancyData","locationToFree","updatedOccupancyData","j","getCurrentPosition","updateGameStackTopmostCard","topmostStuff","changeLeft","changeRight","DraggableCard","animatedDraggable","dragStyle","updatedLocation","setUpdatedLocation","panResponder","PanResponder","create","onStartShouldSetPanResponder","evt","gestureState","onPanResponderMove","event","moveCardAlongDrag","dx","dy","onPanResponderRelease","moveX","moveY","cardReleasedOnStackAndValueSuitableAndMoveFinalized","handleChangesAfterPlayingACard","cardReleasedOnEmptyPositionAndMoveFinalized","handleMovedCardToEmptyPosition","returnCardToStartDragPosition","TouchableOpacity","disabled","panHandlers","size","moveDurationComputerCardGaming","moveToNewPosition","newPosition","oldPosition","valueLeft","valueRight","whatStackCardWasReleasedOn","wasReleasedOnLeft","wasReleasedOnRight","whatStackWasReleasedOn","movementFinalization","moveCardToGameStack","whatEmptyPositionTheCardWasReleasedOn","emptyPositionsX","emptyPositionsY","emptyPosition","whatEmptyPositionWasReleasedOn","positionIndex","moveCardToEmptyPosition","ControllablePlayerCard","locationAtStart","getPlayerCardLocationAfterDealing","locationAfterDealing","cardWillFlipAfterDealing","cardState","PlayerCards","playerCards","map","cardReferences","indexDealNext","setIndexDealNext","dealSolitaireCards","limit","updateCardStatesAfterSolitaireDealing","dealSingleCard","toWhichStack","gamingStack","currentPosition","indexOfCardBelow","flipDurationGaming","emptyPositionIndex","isThereAPositionBelow","returnState","returnTopmostValues","right","getCardViewStyle","commonStyles","zIndex","leftGamingStackXY","rightGamingStackXY","GameStack","topmost","background","CommonGameStacks","cardViewStyleLeft","cardViewStyleRight","ControllableComputerCard","ComputerCards","computerCards","startComputerCardMoveIfPossible","stack","indexOfCardToMove","visibleCardIndexes","sets","look","indexOfCardAtThisPosition","cardAndTarget","k","visibleCard","leftOK","rightOK","target","getIndexOfCardToMoveAndTargetStack","targetPackLocation","finalizeCardMoveOrSendCardBackToSolitaire","targetStack","flipPossibleCardBelow","ControlPanel","dealSingleCards","gameIsActive","changeGameIsActiveState","solitaireDealingDone","setSolitaireDealingDone","displayText","setDisplayText","styles","getStyles","alignSelf","onPress","buttonView","buttonText","StyleSheet","contents","marginTop","titleText","fontWeigth","fontFamily","infoText","spacer","padding","ConnectedGame","connect","setTopmostLeft","setTopmostRight","playerStack","computerStack","referencePlayerCards","referenceComputerCards","cumulativeLeftStack","setCumulativeLeftStack","cumulativeRightStack","setCumulativeRightStack","setGameIsActive","computerPlayingInterval","setComputerPlayingInterval","newCardsNeededInterval","setNewCardsNeededInterval","gameOverEndRound","theWinner","gameRoundOver","updated","clearInterval","setInterval","occupancyDataPlayer","occupancyDataComputer","topmostValues","dealingOfNewCardsIsNeeded","newCardsAreNeeded","console","log","visiblePlayerCardValues","getVisibleCards","visibleComputerCardValues","newOneCardDealingIsNeeded","visibleCardValues","leftValue","rightValue","valueIsOKforPlacingOntoAStack","cards","WelcomeView","startSetting","visibility","animatedVisibility","opacity","SmallDot","dotViewWidth","styleOuterView","styleInnerView","dotNumber","LargeDot","handleSelectionChanged","borderWidth","borderColor","DottedSlider","optionCount","selectedValue","setSelectedValue","changeInterval","startValue","changes","max","changeUpOrDown","direction","getSelectedValue","container","dotSliderView","dots","displayDotSlider","marginBottom","instructionText","fontWeight","flexDirection","Stack","displayColor","selectStack","stackStyle","StackSelection","selectedStack","setSelectedStack","changedSelection","id","getSelectedStack","player","computer","borderColorStack1","borderColorStack2","mapDispatchToProps","setGameSettings","settings","ConnectedSelectionView","referenceSkill","referenceSpeed","referenceStack","stacks","stackShuffled","shuffle","slice","createStacks","skill","speed","SetUpGame","settingNew","setSettingNew","ConnectedWinner","winner","ConnectedGameOfNopsa","screenWidth","Dimensions","screenHeight","getUnitsAndLocations","gameIsOn","setWinner","GameWithRounds","screen","leftDealingStackXY","rightDealingStackXY","store","createStore","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f47cbc1c.chunk.js","sourcesContent":["const initialState = { isOn: false }\n\nconst gameReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n    case 'SET_GAME_SETTINGS':\n        return action.data\n    default:\n        return state\n    }\n\n}\n\nexport const setGameSettings = (settings) => {\n    return {\n        type: 'SET_GAME_SETTINGS',\n        data: settings,\n    }\n}\n\n\nexport default gameReducer\n\n","import { combineReducers } from 'redux'\nimport gameReducer from './gameReducer'\n\nconst rootReducer = combineReducers({\n    game: gameReducer,\n})\n\nexport default rootReducer\n\n\n","import React from 'react'\nimport { View, Text } from 'react-native'\n\nconst CardFront = ({ card }) => {\n\n    let color = 'black'\n    let char = ''\n    switch (card.suit) {\n    case 2:\n        char = '♥'\n        color = 'red'\n        break\n    case 3:\n        char = '♣'\n        break\n    case 4:\n        char = '♦'\n        color = 'red'\n        break\n    default:\n        char = '♠'\n        break\n    }\n\n    const cardText = card.value === 1 ? 'A' : card.value\n\n    return (\n        <View  style={{ justifyContent: 'center', alignItems: 'center' }}>\n            <Text style={{ color: color, fontSize: 30 }}>{char}</Text>\n            <Text style={{ color: color, fontSize: 30 }}>{cardText}</Text>\n        </View>\n    )\n}\n\n\nexport default CardFront\n\n\n","import React from 'react'\nimport { View, Text } from 'react-native'\n\nconst CardBack = ({ scaleUnit }) => {\n\n    const viewStyle = {\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#B9CC3F',\n        width: scaleUnit,\n        height: scaleUnit * 1.7,\n        borderRadius: 6,\n    }\n\n    const displayCards = () => {\n        let rows = []\n        for (let i = 0; i < 9 ; i++) {\n            rows.push(<Text key={i} style={{ color: 'green', fontSize: scaleUnit / 7 }}>©©©©©©©</Text>)\n        }\n        return rows\n    }\n\n    return (\n        <View  style={viewStyle}>\n            {displayCards()}\n        </View>\n    )\n}\n\nexport default CardBack\n\n","import React, { useImperativeHandle } from 'react'\nimport { View, Animated } from 'react-native'\nimport CardFront from './CardFront'\nimport CardBack from './CardBack'\n\n\nconst FlippableCard = React.forwardRef((props, ref) => {\n\n    const cardStyle = getCardStyle(props.unitsAndLocations.unit)\n\n    let animatedFlipBacksideValue = new Animated.Value(0)\n    const interpolatedFlipBackside = animatedFlipBacksideValue.interpolate({\n        inputRange: [0, 180], outputRange: ['180deg', '360deg'],\n    })\n    const animatedFlipBacksideStyle = { transform: [ { rotateX: interpolatedFlipBackside } ] }\n\n    let animatedFlipFrontsideValue = new Animated.Value(90)\n    const interpolatedFlipFrontside = animatedFlipFrontsideValue.interpolate({\n        inputRange: [0, 180], outputRange: ['180deg', '360deg'],\n    })\n    const animatedFlipFrontsideStyle = { transform: [ { rotateX: interpolatedFlipFrontside } ] }\n\n    const flip = (flipDuration) => {\n        performFlipAnimations(animatedFlipBacksideValue, animatedFlipFrontsideValue, flipDuration)\n    }\n\n    useImperativeHandle(ref, () => {\n        return { flip }\n    })\n\n    return (\n        <View>\n            <Animated.View style={[cardStyle, { position: 'absolute', left: 0 }, animatedFlipBacksideStyle]}>\n                <CardBack scaleUnit={props.unitsAndLocations.unit}/>\n            </Animated.View>\n            <Animated.View style={[cardStyle, animatedFlipFrontsideStyle]}>\n                <CardFront card={props.card}/>\n            </Animated.View>\n        </View>\n    )\n})\n\nexport default FlippableCard\n\n\n\n// HELPER FUNCTIONS FOR THE COMPONENT FlippableCard\n\nconst getCardStyle = (unit) => {\n    return {\n        width: unit,\n        height: unit * 1.7,\n        borderRadius: 7,\n        backgroundColor: 'papayawhip',\n    }\n}\n\nconst performFlipAnimations = (animatedFlipBacksideValue, animatedFlipFrontsideValue, flipDuration) => {\n    Animated.sequence([\n        Animated.timing(animatedFlipBacksideValue, {\n            toValue: 90, tension: 10, friction: 10, duration: flipDuration / 2,\n        }),\n        Animated.timing(animatedFlipFrontsideValue, {\n            toValue: 180, tension: 10, friction: 10, duration: flipDuration / 2,\n        }),\n    ]).start()\n}\n\n","import React, { useImperativeHandle, useState } from 'react'\nimport { Animated } from 'react-native'\nimport FlippableCard from '../cards/FlippableCard'\n\n\nconst MovableFlippableCard = React.forwardRef((props, ref) => {\n\n    const [animatedMove] = useState(new Animated.ValueXY())\n    const animatedMoveStyle = { transform: [ { translateX: animatedMove.x }, { translateY: animatedMove.y } ] }\n    const [startLocation] = useState(props.startLocation)\n    const referenceFlip = React.createRef()\n\n    const flipOnly = (flipDurationDealing) => {\n        referenceFlip.current.flip(flipDurationDealing)\n    }\n\n    const moveAndPossiblyFlipWithDelay = (moveDurationDealing, flipDurationDealing) => {\n        const delay = props.index > 14 ? 0 : 500 * props.index\n        moveToNewLocation(animatedMove, startLocation, delay, props.endLocation, moveDurationDealing)\n        if (props.flip) {\n            setTimeout(() => {\n                flipOnly(flipDurationDealing)\n            }, delay + moveDurationDealing)\n        }\n    }\n\n    const moveCardToLocation = (location) => {\n        moveToNewLocation(animatedMove, startLocation, 0, location, 1000)\n    }\n\n    useImperativeHandle(ref, () => {\n        return { moveAndPossiblyFlipWithDelay, flipOnly, moveCardToLocation }\n    })\n\n    return (\n        <Animated.View style={[animatedMoveStyle, { position: 'absolute', left: startLocation.x, top: startLocation.y }]}>\n            <FlippableCard\n                ref={referenceFlip}\n                index={props.index}\n                card={props.card}\n                convertCardState={props.convertCardState}\n                unitsAndLocations={props.unitsAndLocations}\n            />\n        </Animated.View>\n    )\n})\n\nexport default MovableFlippableCard\n\n\n// HELPER FUNCTIONS FOR THE COMPONENT MovableFlippableCard\n\nconst moveToNewLocation = (animatedMove, startLocation, delay, newLocation, moveDuration) => {\n    Animated.sequence([\n        Animated.delay(delay),\n        Animated.timing(animatedMove, {\n            toValue: { x: newLocation.x - startLocation.x, y: newLocation.y - startLocation.y }, duration: moveDuration,\n        }),\n    ]).start()\n}\n\n\n\n","\nexport const getPlayerCardStartLocation = (scalingUnit, spacing) => {\n    const positionX = spacing + (1/6 + 1 + 4/6 + 1 + 2/6 + 1 + 4/6) * scalingUnit\n    const positionY = (0.5 + 1.5 + 0.75) * 1.7 * scalingUnit\n    return { x: positionX, y: positionY }\n}\n\nexport const getCardFlipStateAfterDealing = (cardIndex, cardCount) => {\n    let flip = false\n    switch (cardIndex) {\n    case 0: case 5: case 9: case 12: case 14:\n        flip = true\n        break\n    case 1: case 2: case 3: case 4:\n        if (cardIndex + 4 > cardCount) {\n            flip = true\n        }\n        break\n    case 6: case 7: case 8:\n        if (cardIndex + 4 > cardCount) {\n            flip = true\n        }\n        break\n    case 10: case 11:\n        if (cardIndex + 4 > cardCount) {\n            flip = true\n        }\n        break\n    case 13:\n        if (cardIndex + 4 > cardCount) {\n            flip = true\n        }\n        break\n    default:\n        break\n    }\n    if (cardIndex > 14) {\n        flip = true\n    }\n    return flip\n}\n\n\nexport const getPlayerCardLocationAfterDealing = (cardIndex, scalingUnit, spacing, cardCount) => {\n    if (cardIndex < 15) {\n        return getPlayerCardSolitaireLocation(cardIndex, scalingUnit, spacing)\n    } else {\n        const positionY = (0.5 + 1.5 + 0.75) * 1.7 * scalingUnit\n        const toLeftOrRightStack = toLeftOrRightGameStackInSingleCardDealing('right', cardIndex, cardCount)\n        if (toLeftOrRightStack === 'right') {\n            const rightPackPositionX = spacing + (1/6 + 1 + 4/6 + 1 + 2/6) * scalingUnit\n            return { x: rightPackPositionX, y: positionY }\n        } else {\n            const leftPackPositionX = spacing + (1/6 + 1 + 4/6) * scalingUnit\n            return { x: leftPackPositionX, y: positionY }\n        }\n    }\n}\n\n\nexport const toLeftOrRightGameStackInSingleCardDealing = (side, cardIndex, cardCount) => {\n    const countOfCardsToDeal = cardCount - 15 > 0 ? cardCount - 15 : 0\n    const opponentCardCount = 52 - cardCount\n    const countOfComputerCardsToDeal = opponentCardCount - 15 > 0 ? opponentCardCount - 15 : 0\n    const numberOfBothPlayersDealCards = Math.min(countOfCardsToDeal, countOfComputerCardsToDeal)\n    if (cardIndex < 15 + numberOfBothPlayersDealCards) {\n        return side\n    } else {\n        if (opponentCardCount % 2 === 0 && cardIndex% 2 === 0) {\n            return side\n        } else {\n            return side === 'right' ? 'left' : 'right'\n        }\n    }\n}\n\n\nconst getPlayerCardSolitaireLocation = (cardIndex, scalingUnit, spacing) => {\n\n    const unitHeight = 1.7 * scalingUnit\n    const origoY =  (0.5 + 1.5 + 0.75 + 1.0 + 0.75) * unitHeight\n\n    let positionX\n    switch (cardIndex) {\n    case 0:\n        positionX = spacing + 1 / 6 * scalingUnit\n        break\n    case 1: case 5:\n        positionX = spacing + (2 / 6  + 1)* scalingUnit\n        break\n    case 2: case 6: case 9:\n        positionX = spacing +  (3 / 6 + 2) * scalingUnit\n        break\n    case 3: case 7: case 10: case 12:\n        positionX = spacing +  (4 / 6 + 3) * scalingUnit\n        break\n    default:\n        positionX = spacing +  (5 / 6 + 4) * scalingUnit\n    }\n\n    let positionY\n    switch (cardIndex) {\n    case 14:\n        positionY = origoY + (4 * 0.125) * unitHeight\n        break\n    case 12: case 13:\n        positionY = origoY + (3 * 0.125) * unitHeight\n        break\n    case 9: case 10: case 11:\n        positionY = origoY + (2 * 0.125) * unitHeight\n        break\n    case 5: case 6: case 7: case 8:\n        positionY = origoY + (1 * 0.125) * unitHeight\n        break\n    default:\n        positionY = origoY\n    }\n\n    return { x: positionX, y: positionY }\n}\n\nexport const whatStackWasReleasedOn = (releaseX, releaseY, scaleUnit, spacing) => {\n    const wasReleasedOnLeft = wasReleasedOnLeftStack(releaseX, releaseY, scaleUnit, spacing)\n    const wasReleasedOnRight = wasReleasedOnRightStack(releaseX, releaseY, scaleUnit, spacing)\n    if (wasReleasedOnLeft) {\n        return 'left'\n    } else if (wasReleasedOnRight) {\n        return 'right'\n    } else {\n        return 'none'\n    }\n}\n\nconst wasReleasedOnRightStack = (releaseX, releaseY, scaleUnit, spacing) => {\n    const gamingStackRightX = spacing + (1/6 + 1 + 4/6 + 1 + 2/6) * scaleUnit\n    const gamingStackRightY = (0.5 + 1.5 + 0.75) * scaleUnit * 1.7\n    if (!(releaseX > gamingStackRightX && releaseX < gamingStackRightX + scaleUnit)) {\n        return false\n    }\n    if (!(releaseY > gamingStackRightY && releaseY < gamingStackRightY + scaleUnit * 1.7)) {\n        return false\n    }\n    return true\n}\n\nconst wasReleasedOnLeftStack = (releaseX, releaseY, scaleUnit, spacing) => {\n    const gamingStackLeftX = spacing + (1/6 + 1 + 4/6) * scaleUnit\n    const gamingStackLeftY = (0.5 + 1.5 + 0.75) * scaleUnit * 1.7\n    if (!(releaseX > gamingStackLeftX && releaseX < gamingStackLeftX + scaleUnit)) {\n        return false\n    }\n    if (!(releaseY > gamingStackLeftY && releaseY < gamingStackLeftY + scaleUnit * 1.7)) {\n        return false\n    }\n    return true\n}\n\n\nexport const valueIsOKforPlacingOntoStack = (whatStack, topmostLeft, topmostRight, newCard) => {\n    const currentTopmostValue = whatStack === 'left' ? topmostLeft.value : topmostRight.value\n    const newValue = newCard.value\n    if (currentTopmostValue === 1) {\n        if (newValue === 2 || newValue === 13) {\n            return true\n        }\n    } else if (currentTopmostValue === 13) {\n        if (newValue === 12 || newValue === 1) {\n            return true\n        }\n    } else {\n        if (newValue === currentTopmostValue + 1 || newValue === currentTopmostValue - 1) {\n            return true\n        } else {\n            return false\n        }\n    }\n}\n\nexport const getIndexOfPossibleCardBelow = (cardIndex) => {\n    const onTopAndBelowCardIndexPairs = new Map([\n        [14, 13],\n        [13, 11],\n        [12, 10],\n        [11, 8],\n        [10, 7],\n        [9, 6],\n        [8, 4],\n        [7, 3],\n        [6, 2],\n        [5, 1],\n        ['default', -1],\n    ])\n    return onTopAndBelowCardIndexPairs.get(cardIndex) || onTopAndBelowCardIndexPairs.get('default')\n}\n\n\n\nexport const whatEmptyPositionWasReleasedOn = (releaseX, releaseY, scaleUnit, spacing, occupancyData) => {\n    const emptyPositionsX = []\n    for (let i = 0; i < 5; i++) {\n        emptyPositionsX.push(spacing + (1/6 + i * (1 + 1/6)) * scaleUnit)\n    }\n    const emptyPositionsY = (0.5 + 1.5 + 0.75 + 1 + 0.75) * 1.7 * scaleUnit\n    let emptyPosition = 'none'\n    for (let i = 0; i < 5; i++) {\n        const indexOfCardAtPosition = occupancyData[i]\n        if (indexOfCardAtPosition === -1) {\n            if ((releaseX > emptyPositionsX[i] && releaseX < emptyPositionsX[i] + scaleUnit)) {\n                if ((releaseY > emptyPositionsY && releaseY < emptyPositionsY + scaleUnit * 1.7)) {\n                    emptyPosition = i\n                }\n            }\n        }\n    }\n    return emptyPosition\n}\n\n\nexport const getComputerCardStartLocation = (scalingUnit, spacing) => {\n    const positionX = spacing + (1/6) * scalingUnit\n    const positionY = (0.5 + 1.5 + 0.75) * 1.7 * scalingUnit\n    return { x: positionX, y: positionY }\n}\n\nexport const getComputerCardLocationAfterDealing = (cardIndex, scalingUnit, spacing, cardCount) => {\n\n    if (cardIndex < 15) {\n        return getComputerCardSolitaireLocation(cardIndex, scalingUnit, spacing)\n    } else {\n        const positionY = (0.5 + 1.5 + 0.75) * 1.7 * scalingUnit\n        const toLeftOrRightStack = toLeftOrRightGameStackInSingleCardDealing('left', cardIndex, cardCount)\n        if (toLeftOrRightStack === 'right') {\n            const rightPackPositionX = spacing + (1/6 + 1 + 4/6 + 1 + 2/6) * scalingUnit\n            return { x: rightPackPositionX, y: positionY }\n        } else {\n            const leftPackPositionX = spacing + (1/6 + 1 + 4/6) * scalingUnit\n            return { x: leftPackPositionX, y: positionY }\n        }\n    }\n\n}\n\nexport const getComputerCardSolitaireLocation = (cardIndex, scalingUnit, spacing) => {\n    const unitHeight = 1.7 * scalingUnit\n    const origoY =  0.5 * unitHeight\n\n    let positionX = spacing\n    switch (cardIndex) {\n    case 14: case 13: case 11: case 8: case 4:\n        positionX += 1 / 6 * scalingUnit\n        break\n    case 12: case 10: case 7: case 3:\n        positionX += (2 / 6  + 1)* scalingUnit\n        break\n    case 9: case 6: case 2:\n        positionX +=  (3 / 6 + 2) * scalingUnit\n        break\n    case 5: case 1:\n        positionX +=  (4 / 6 + 3) * scalingUnit\n        break\n    default:\n        positionX +=  (5 / 6 + 4) * scalingUnit\n    }\n\n    let positionY = 0\n    switch (cardIndex) {\n    case 4: case 3: case 2: case 1: case 0:\n        positionY = origoY + (4 * 0.125) * unitHeight\n        break\n    case 8: case 7: case 6: case 5:\n        positionY = origoY + (3 * 0.125) * unitHeight\n        break\n    case 11: case 10: case 9:\n        positionY = origoY + (2 * 0.125) * unitHeight\n        break\n    case 13: case 12:\n        positionY = origoY + (1 * 0.125) * unitHeight\n        break\n    default:\n        positionY = origoY\n    }\n    return { x: positionX, y: positionY }\n}\n\n\n\nexport const getIndexOfCardToMoveAndTargetStack = (computerCards, occupancyData, topmostLeft, topmostRight) => {\n    let visibleCardIndexes = []\n    const sets = [[0], [5,1], [9,6,2], [12,10,7,3], [14,13,11,8,4]]\n    let i = 0\n    while (i < 5) {\n        let j = 0\n        let look = true\n        while (look && j < sets[i].length) {\n            if (sets[i][j] < computerCards.length) {\n                const indexOfCardAtThisPosition = occupancyData[sets[i][j]]\n                if (indexOfCardAtThisPosition !== -1) {\n                    visibleCardIndexes.push(indexOfCardAtThisPosition)\n                    look = false\n                }\n            }\n            j++\n        }\n        i++\n    }\n\n    let cardAndTarget = { cardIndex: -1, stack: 'none' }\n    let k = 0\n    while (k < visibleCardIndexes.length) {\n        let visibleCard = computerCards[visibleCardIndexes[k]]\n        const leftOK =  valueIsOKforPlacingOntoStack('left', topmostLeft, topmostRight, visibleCard)\n        const rightOK =  valueIsOKforPlacingOntoStack('right', topmostLeft, topmostRight, visibleCard)\n        if (leftOK) {\n            cardAndTarget = { cardIndex: visibleCardIndexes[k], target: 'left' }\n            k = 100\n        } else if (rightOK) {\n            cardAndTarget = { cardIndex: visibleCardIndexes[k], target: 'right' }\n            k = 100\n        }\n        k++\n    }\n    return cardAndTarget\n}\n\nexport const getTargetPackLocation = (stack, scaleUnit, spacing) => {\n    const locations = new Map([\n        ['left', { x: spacing +(1/6 + 1 + 4/6) * scaleUnit, y: (0.5 + 1.5 + 0.75) * 1.7 * scaleUnit }],\n        ['right', { x: spacing + (1/6 + 1 + 4/6 + 1 + 2/6) * scaleUnit, y: (0.5 + 1.5 + 0.75) * 1.7 * scaleUnit }],\n    ])\n    return locations.get(stack)\n}\n\n\nexport const getCardStatesAtStart = (cardCount) => {\n    let cardStates = []\n    for (let i = 0; i < cardCount; i++) {\n        cardStates.push('movable')\n    }\n    return cardStates\n}\n\n\nexport const getOccupancyDataAfterFirstDealingCards = (cardCount) => {\n    let occupancies = []\n    const number = Math.min(15, cardCount)\n    for (let i = 0; i < number; i++) {\n        occupancies.push(i)\n    }\n    return occupancies\n}\n\n\nexport const isThereAPositionBelow = (cardIndex, occupancyData) => {\n    let position\n    for (let i = 0; i < occupancyData.length; i++) {\n        if (occupancyData[i] === cardIndex) {\n            position = i\n        }\n    }\n    if (position < 5) {\n        return false\n    } else {\n        return true\n    }\n}\n\nexport const getPlacementValidity = (card, targetStack, topmostStuff) => {\n    if (targetStack === 'left') {\n        return valueIsOKforPlacingOntoStack('left', topmostStuff.valueLeft, topmostStuff.valueRight, card)\n    } else {\n        return valueIsOKforPlacingOntoStack('right', topmostStuff.valueLeft, topmostStuff.valueRight, card)\n    }\n}\n\nexport const handleCardStateChanges = (cardsAndNewStates, cardStates, setCardStates) => {\n    const updatedCardStates = [...cardStates]\n    for (let i = 0; i < cardsAndNewStates.length; i++) {\n        updatedCardStates[cardsAndNewStates[i].index] = cardsAndNewStates[i].newState\n    }\n    setCardStates(updatedCardStates)\n}\n\nexport const handleOccupancyDataChanges = (cardIndex, action, positionToOccupy, occupancyData, setOccupancyData) => {\n    let updatedOccupancyData = [...occupancyData]\n    let locationToFree\n    for (let j = 0; j < updatedOccupancyData.length; j++) {\n        if (updatedOccupancyData[j] === cardIndex) {\n            locationToFree = j\n        }\n    }\n    updatedOccupancyData[locationToFree] = -1\n    if (action === 'occupy') {\n        updatedOccupancyData[positionToOccupy] = cardIndex\n    }\n    setOccupancyData(updatedOccupancyData)\n}\n\nexport const getCurrentPosition = (cardIndex, occupancyData) => {\n    let position\n    for (let i = 0; i < occupancyData.length; i++) {\n        if (occupancyData[i] === cardIndex) {\n            position = i\n        }\n    }\n    return position\n}\n\nexport const updateGameStackTopmostCard = (side, topmostStuff, card) => {\n    if (side === 'left') {\n        topmostStuff.changeLeft(card)\n    } else {\n        topmostStuff.changeRight(card)\n    }\n}\n","import React, { useState } from 'react'\nimport { Animated, PanResponder, TouchableOpacity } from 'react-native'\nimport CardFront from './CardFront'\nimport { whatStackWasReleasedOn, valueIsOKforPlacingOntoStack, whatEmptyPositionWasReleasedOn } from '../game/helperFunctions.js'\n\n\n\nconst DraggableCard = React.forwardRef((props, ref) => {\n\n    const cardStyle = getCardStyle(props.unitsAndLocations.unit)\n    const [startLocation] = useState(props.startLocation)\n    const [animatedDraggable] = useState(new Animated.ValueXY())\n    const dragStyle = { transform: [ { translateX: animatedDraggable.x }, { translateY: animatedDraggable.y }] }\n    const [updatedLocation, setUpdatedLocation] = useState({ x: 0, y: 0 })\n    const [timing] = useState(props.unitsAndLocations.timing)\n\n    const handleReleasedCardSomewhere = (releaseX, releaseY) => {\n        const wasReleasedOnStackAndMoveFinalized = cardReleasedOnStackAndValueSuitableAndMoveFinalized(releaseX, releaseY,\n            props.unitsAndLocations, props.topmostStuff, props.card, startLocation, animatedDraggable,\n            props.handleChangesAfterPlayingACard, props.index, timing)\n        if (!wasReleasedOnStackAndMoveFinalized) {\n            const wasReleasedOnEmptyPositionAndMoveFinalized = cardReleasedOnEmptyPositionAndMoveFinalized(releaseX, releaseY,\n                props.unitsAndLocations, props.occupancyData, animatedDraggable, startLocation, setUpdatedLocation,\n                props.handleMovedCardToEmptyPosition, props.index, timing)\n            if (!wasReleasedOnEmptyPositionAndMoveFinalized) {\n                returnCardToStartDragPosition(animatedDraggable, updatedLocation, timing)\n            }\n        }\n    }\n\n    const panResponder = PanResponder.create({\n        onStartShouldSetPanResponder: (evt, gestureState) => true,\n        onPanResponderMove: (event, gestureState) => {\n            moveCardAlongDrag(gestureState.dx, gestureState.dy, animatedDraggable, updatedLocation)\n        },\n        onPanResponderRelease: (evt, gestureState) => {\n            handleReleasedCardSomewhere(gestureState.moveX, gestureState.moveY)\n        },\n    })\n\n    return (\n        <TouchableOpacity  disabled={false}>\n            <Animated.View style={[cardStyle, dragStyle, { position: 'absolute', left: startLocation.x, top: startLocation.y }]} {...panResponder.panHandlers} >\n                <CardFront card={props.card}/>\n            </Animated.View>\n        </TouchableOpacity>\n    )\n})\n\nexport default DraggableCard\n\n\n\n// SOME HELPER FUNCTIONS for the component DraggableCard\n\nconst getCardStyle = (size) => {\n    return {\n        width: size,\n        height: size * 1.7,\n        borderRadius: 7,\n        backgroundColor: 'papayawhip',\n    }\n}\n\nconst returnCardToStartDragPosition = (animatedDraggable, updatedLocation, timing) => {\n    const duration = timing.moveDurationComputerCardGaming\n    Animated.timing(animatedDraggable, {\n        toValue: {  x: 0 - updatedLocation.x, y: 0 - updatedLocation.y  }, duration: duration,\n    }).start()\n}\n\nconst moveCardAlongDrag = (dx, dy, animatedDraggable, updatedLocation) => {\n    Animated.timing(animatedDraggable, {\n        toValue: { x: dx - updatedLocation.x, y: dy - updatedLocation.y }, duration: 0,\n    }).start()\n}\n\nconst moveToNewPosition = (animatedDraggable, newPosition, oldPosition, duration) => {\n    Animated.timing(animatedDraggable, {\n        toValue: { x: newPosition.x - oldPosition.x, y: newPosition.y - oldPosition.y }, duration: duration,\n    }).start()\n}\n\nconst moveCardToGameStack = (animatedDraggable, side, scaleUnit, spacing, startLocation, duration) => {\n    const newX =  side === 'left' ? (spacing + (1/6 + 1 + 4/6) * scaleUnit) : (spacing + (1/6 + 1 + 4/6 + 1 + 2/6) * scaleUnit)\n    const newY = (0.5 + 1.5 + 0.75) * 1.7 * scaleUnit\n    moveToNewPosition(animatedDraggable, { x: newX, y: newY }, startLocation, duration )\n}\n\nconst moveCardToEmptyPosition = (animatedDraggable, positionIndex, scaleUnit, spacing, startLocation, duration) => {\n    const newX = spacing + (1/6 + positionIndex * (1 + 1/6)) * scaleUnit\n    const newY = (0.5 + 1.5 + 0.75 + 1 + 0.75) * 1.7 * scaleUnit\n    moveToNewPosition(animatedDraggable, { x: newX, y: newY }, startLocation, duration)\n}\n\nconst cardReleasedOnStackAndValueSuitableAndMoveFinalized = (releaseX, releaseY, unitsAndLocations, topmostStuff, card, startLocation, animatedDraggable, handleChangesAfterPlayingACard, index, timing) => {\n    const unit = unitsAndLocations.unit\n    const spacing = unitsAndLocations.spacing\n    const topmostLeft = topmostStuff.valueLeft\n    const topmostRight = topmostStuff.valueRight\n    const whatStackCardWasReleasedOn = whatStackWasReleasedOn(releaseX, releaseY, unit, spacing)\n    const duration = timing.movementFinalization\n    if (whatStackCardWasReleasedOn !== 'none') {\n        const valueIsOK = valueIsOKforPlacingOntoStack(whatStackCardWasReleasedOn, topmostLeft, topmostRight, card)\n        if (valueIsOK) {\n            moveCardToGameStack(animatedDraggable, whatStackCardWasReleasedOn, unit, spacing, startLocation, duration)\n            setTimeout(() => {\n                handleChangesAfterPlayingACard(index, whatStackCardWasReleasedOn)\n            }, duration)\n            return true\n        }\n        return false\n    }\n}\n\nconst cardReleasedOnEmptyPositionAndMoveFinalized = (releaseX, releaseY, unitsAndLocations, occupancyData, animatedDraggable, startLocation, setUpdatedLocation, handleMovedCardToEmptyPosition, index, timing) => {\n    const unit = unitsAndLocations.unit\n    const spacing = unitsAndLocations.spacing\n    const whatEmptyPositionTheCardWasReleasedOn = whatEmptyPositionWasReleasedOn(releaseX, releaseY, unit, spacing, occupancyData)\n    const duration = timing.movementFinalization\n    if (whatEmptyPositionTheCardWasReleasedOn !== 'none') {\n        moveCardToEmptyPosition(animatedDraggable, whatEmptyPositionTheCardWasReleasedOn, unit, spacing, startLocation, duration)\n        setTimeout(() => {\n            setUpdatedLocation({\n                x: (startLocation.x - (spacing + (1/6 + whatEmptyPositionTheCardWasReleasedOn * (1 + 1/6)) * unit)),\n                y: (startLocation.y - ((0.5 + 1.5 + 0.75 + 1 + 0.75) * 1.7 * unit)),\n            })\n            handleMovedCardToEmptyPosition(index, whatEmptyPositionTheCardWasReleasedOn)\n        }, duration)\n        return true\n    }\n    return false\n}\n\n\n\n","import React, { useState } from 'react'\nimport MovableFlippableCard from '../cards/MovableFlippableCard'\nimport DraggableCard from '../cards/DraggableCard'\nimport { getPlayerCardLocationAfterDealing, getPlayerCardStartLocation, getCardFlipStateAfterDealing } from './helperFunctions.js'\n\n\nconst ControllablePlayerCard = React.forwardRef((props, ref) => {\n\n    const [locationAtStart] = useState(getPlayerCardStartLocation(props.unitsAndLocations.unit, props.unitsAndLocations.spacing))\n    const [locationAfterDealing] = useState(getPlayerCardLocationAfterDealing(props.index, props.unitsAndLocations.unit, props.unitsAndLocations.spacing, props.cardCount))\n    const [cardWillFlipAfterDealing] = useState(getCardFlipStateAfterDealing(props.index, props.cardCount))\n\n    if (props.cardState === 'null') {\n        return null\n    } else if (props.cardState === 'draggable') {\n        return (\n            <DraggableCard\n                card={props.card}\n                ref={ref}\n                index={props.index}\n                startLocation={locationAfterDealing}\n                unitsAndLocations={props.unitsAndLocations}\n                topmostStuff={props.topmostStuff}\n                handleChangesAfterPlayingACard={props.handleChangesAfterPlayingACard}\n                handleMovedCardToEmptyPosition={props.handleMovedCardToEmptyPosition}\n                occupancyData={props.occupancyData}\n            />\n        )\n    } else {\n        return (\n            <MovableFlippableCard\n                ref={ref}\n                index={props.index}\n                startLocation={locationAtStart}\n                card={props.card}\n                endLocation={locationAfterDealing}\n                flip={cardWillFlipAfterDealing}\n                unitsAndLocations={props.unitsAndLocations}\n            />\n        )\n    }\n})\n\nexport default ControllablePlayerCard\n\n","import React, { useState, useImperativeHandle } from 'react'\nimport { View } from 'react-native'\nimport ControllablePlayerCard from './ControllablePlayerCard'\nimport { toLeftOrRightGameStackInSingleCardDealing,\n    getIndexOfPossibleCardBelow,\n    getCardStatesAtStart,\n    getCardFlipStateAfterDealing,\n    getOccupancyDataAfterFirstDealingCards,\n    isThereAPositionBelow,\n    handleCardStateChanges,\n    handleOccupancyDataChanges,\n    getCurrentPosition,\n    updateGameStackTopmostCard,\n} from './helperFunctions.js'\n\n\nconst PlayerCards = React.forwardRef((props, ref) => {\n\n    const [playerCards] = useState(props.playerCards)\n    const [cardReferences] = useState(playerCards.map(card => React.createRef()))\n    const [indexDealNext, setIndexDealNext] = useState(props.playerCards.length > 15 ? 15 : 100)\n    const [cardStates, setCardStates] = useState(getCardStatesAtStart(props.playerCards.length))\n    const [occupancyData, setOccupancyData] = useState(getOccupancyDataAfterFirstDealingCards(props.playerCards.length))\n    const timing = props.unitsAndLocations.timing\n\n    const dealSolitaireCards = () => {\n        const limit = Math.min(playerCards.length, 15)\n        for (let i = 0; i < limit; i++) {\n            cardReferences[i].current.moveAndPossiblyFlipWithDelay(timing.moveDurationDealing, timing.flipDurationDealing)\n        }\n        setTimeout(() => {\n            updateCardStatesAfterSolitaireDealing(cardStates, setCardStates)\n        }, (timing.moveDurationDealing + timing.flipDurationDealing) + 500 * limit)\n    }\n\n    const dealSingleCard = () => {\n        if (indexDealNext < props.playerCards.length) {\n            cardReferences[indexDealNext].current.moveAndPossiblyFlipWithDelay(timing.moveDurationDealing, timing.flipDurationDealing)\n            setTimeout(() => {\n                const toWhichStack = toLeftOrRightGameStackInSingleCardDealing(indexDealNext, playerCards.length)\n                updateGameStackTopmostCard(toWhichStack, props.topmostStuff, playerCards[indexDealNext])\n                handleCardStateChanges([{ index: indexDealNext, newState: 'null' }], cardStates, setCardStates)\n                setIndexDealNext(indexDealNext + 1)\n            }, timing.moveDurationDealing + timing.flipDurationDealing)\n        }\n    }\n\n    const handleChangesAfterPlayingACard = (cardIndex, gamingStack) => {\n        const currentPosition = getCurrentPosition(cardIndex, occupancyData)\n        updateGameStackTopmostCard(gamingStack, props.topmostStuff, playerCards[cardIndex])\n        handleCardStateChanges([{ index: cardIndex, newState: 'null' }], cardStates, setCardStates)\n        handleOccupancyDataChanges(cardIndex, 'vacate', 'none', occupancyData, setOccupancyData)\n        const indexOfCardBelow = getIndexOfPossibleCardBelow(cardIndex)\n        if (currentPosition > 4 && indexOfCardBelow !== -1) {\n            cardReferences[indexOfCardBelow].current.flipOnly(timing.flipDurationGaming)\n            setTimeout(() => {\n                handleCardStateChanges([{ index: cardIndex, newState: 'null' }, { index: indexOfCardBelow, newState: 'draggable' }], cardStates, setCardStates)\n            }, timing.flipDurationGaming)\n        }\n    }\n\n    const handleMovedCardToEmptyPosition = (cardIndex, emptyPositionIndex) => {\n        handleOccupancyDataChanges(cardIndex, 'occupy', emptyPositionIndex, occupancyData, setOccupancyData)\n        const isTherePositioBelow = isThereAPositionBelow(cardIndex, occupancyData)\n        if (isTherePositioBelow) {\n            const indexOfCardBelow = getIndexOfPossibleCardBelow(cardIndex)\n            if (indexOfCardBelow !== -1) {\n                cardReferences[indexOfCardBelow].current.flipOnly(timing.flipDurationGaming)\n                setTimeout(() => {\n                    handleCardStateChanges([{ index: cardIndex, newState: 'draggable' }, { index: indexOfCardBelow, newState: 'draggable' }], cardStates, setCardStates)\n                }, timing.flipDurationGaming)\n            }\n        }\n    }\n\n    const returnState = () => {\n        return occupancyData\n    }\n    const returnTopmostValues = () => {\n        return { left: props.topmostStuff.valueLeft.value, right: props.topmostStuff.valueRight.value }\n    }\n\n    useImperativeHandle(ref, () => {\n        return { dealSolitaireCards, dealSingleCard, returnState, returnTopmostValues }\n    })\n\n    return (\n        <View>\n            {playerCards.map((card, index) => {\n                return (\n                    <ControllablePlayerCard\n                        key={index}\n                        index={index}\n                        card={card}\n                        ref={cardReferences[index]}\n                        cardCount={playerCards.length}\n                        unitsAndLocations={props.unitsAndLocations}\n                        topmostStuff={props.topmostStuff}\n                        cardState={cardStates[index]}\n                        handleChangesAfterPlayingACard={handleChangesAfterPlayingACard}\n                        handleMovedCardToEmptyPosition={handleMovedCardToEmptyPosition}\n                        occupancyData={occupancyData}\n                    />\n                )\n            })}\n        </View>\n    )\n})\n\n\nexport default PlayerCards\n\n\n// HELPER FUNCTIONS FOR COMPONENT PlayerCards\n\nconst updateCardStatesAfterSolitaireDealing = (cardStates, setCardStates) => {\n    const updatedCardStates = [...cardStates]\n    const number = Math.min(cardStates.length, 15)\n    for (let i = 0; i < number; i++) {\n        const willFlipAfterDealing = getCardFlipStateAfterDealing(i, cardStates.length)\n        if (willFlipAfterDealing) {\n            updatedCardStates[i] = 'draggable'\n        }\n    }\n    setCardStates(updatedCardStates)\n}\n\n\n\n\n\n// useEffect(() => {\n//     let gameOver = true\n//     let min = Math.min(15, playerCards.length)\n//     for (let i = 0; i < min; i++) {\n//         if (playedStates[i] === false) {\n//             gameOver = false\n//         }\n//     }\n//     if (gameOver) {\n//         props.gameOverEndRound('player')\n//     }\n// },[playedStates, playerCards.length, props])\n\n","import React from 'react'\nimport { View } from 'react-native'\nimport CardFront from '../cards/CardFront'\n\n\nconst getCardViewStyle = (side, unitsAndLocations) => {\n    let commonStyles = {\n        position: 'absolute',\n        width: unitsAndLocations.unit,\n        height: 1.7 * unitsAndLocations.unit,\n        borderRadius: 7,\n        zIndex: 0,\n    }\n    if (side === 'left') {\n        return { ...commonStyles,\n            left: unitsAndLocations.leftGamingStackXY.x,\n            top: unitsAndLocations.leftGamingStackXY.y,\n        }\n    } else {\n        return { ...commonStyles,\n            left: unitsAndLocations.rightGamingStackXY.x,\n            top: unitsAndLocations.rightGamingStackXY.y,\n        }\n    }\n}\n\n\nconst GameStack = ({ viewStyle, topmost }) => {\n    const background = topmost === '' ? 'green' : 'papayawhip'\n    return (\n        <View style={[viewStyle, { backgroundColor: background }]}>\n            {topmost !== '' ?\n                <CardFront card={topmost}/>\n                :\n                null\n            }\n        </View>\n    )\n}\n\nconst CommonGameStacks = ({ topmostLeft, topmostRight, unitsAndLocations }) => {\n\n    const cardViewStyleLeft = getCardViewStyle('left', unitsAndLocations)\n    const cardViewStyleRight = getCardViewStyle('right', unitsAndLocations)\n\n    return (\n        <View>\n            <GameStack\n                viewStyle={cardViewStyleLeft}\n                topmost={topmostLeft}\n            />\n            <GameStack\n                viewStyle={cardViewStyleRight}\n                topmost={topmostRight}\n            />\n        </View>\n    )\n}\n\nexport default CommonGameStacks\n\n","import React, { useState } from 'react'\nimport MovableFlippableCard from '../cards/MovableFlippableCard'\nimport { getCardFlipStateAfterDealing,\n    getComputerCardLocationAfterDealing,\n    getComputerCardStartLocation,\n} from './helperFunctions.js'\n\n\n\nconst ControllableComputerCard = React.forwardRef((props, ref) => {\n\n    const [locationAtStart] = useState(getComputerCardStartLocation(props.unitsAndLocations.unit, props.unitsAndLocations.spacing))\n    const [locationAfterDealing] = useState(getComputerCardLocationAfterDealing(props.index, props.unitsAndLocations.unit, props.unitsAndLocations.spacing, props.cardCount))\n    const [cardWillFlipAfterDealing] = useState(getCardFlipStateAfterDealing(props.index, props.cardCount))\n\n    if (props.cardState === 'null') {\n        return null\n    } else {\n        return (\n            <MovableFlippableCard\n                ref={ref}\n                index={props.index}\n                startLocation={locationAtStart}\n                card={props.card}\n                endLocation={locationAfterDealing}\n                flip={cardWillFlipAfterDealing}\n                unitsAndLocations={props.unitsAndLocations}\n            />\n        )\n    }\n})\n\nexport default ControllableComputerCard\n\n","import React, { useState, useImperativeHandle } from 'react'\nimport { View } from 'react-native'\nimport ControllableComputerCard from './ControllableComputerCard'\nimport { toLeftOrRightGameStackInSingleCardDealing,\n    getIndexOfPossibleCardBelow,\n    getIndexOfCardToMoveAndTargetStack,\n    getTargetPackLocation,\n    getCardStatesAtStart,\n    getPlacementValidity,\n    getComputerCardLocationAfterDealing,\n    getOccupancyDataAfterFirstDealingCards,\n    handleCardStateChanges,\n    handleOccupancyDataChanges,\n    getCurrentPosition,\n    updateGameStackTopmostCard,\n} from './helperFunctions.js'\n\n\nconst ComputerCards = React.forwardRef((props, ref) => {\n\n    const [computerCards] = useState(props.computerCards)\n    const [cardReferences] = useState(computerCards.map(card => React.createRef()))\n    const [indexDealNext, setIndexDealNext] = useState(props.computerCards.length > 15 ? 15 : 100)\n    const [cardStates, setCardStates] = useState(getCardStatesAtStart(props.computerCards.length))\n    const [occupancyData, setOccupancyData] = useState(getOccupancyDataAfterFirstDealingCards(props.computerCards.length))\n    const timing = props.unitsAndLocations.timing\n\n    const dealSolitaireCards = () => {\n        const limit = Math.min(computerCards.length, 15)\n        for (let i = 0; i < limit; i++) {\n            cardReferences[i].current.moveAndPossiblyFlipWithDelay(timing.moveDurationDealing, timing.flipDurationDealing)\n        }\n    }\n\n    const dealSingleCard = () => {\n        if (indexDealNext < props.computerCards.length) {\n            cardReferences[indexDealNext].current.moveAndPossiblyFlipWithDelay(timing.moveDurationDealing, timing.flipDurationDealing)\n            setTimeout(() => {\n                const toWhichStack = toLeftOrRightGameStackInSingleCardDealing('left', indexDealNext, computerCards.length)\n                updateGameStackTopmostCard(toWhichStack, props.topmostStuff, computerCards[indexDealNext])\n                handleCardStateChanges([{ index: indexDealNext, newState: 'null' }], cardStates, setCardStates)\n                setIndexDealNext(indexDealNext + 1)\n            }, timing.moveDurationDealing + timing.flipDurationDealing)\n        }\n    }\n\n    const startComputerCardMoveIfPossible = () => {\n        const indexOfCardToMove = getIndexOfCardToMoveAndTargetStack(computerCards, occupancyData, props.topmostStuff.valueLeft, props.topmostStuff.valueRight)\n        if (indexOfCardToMove.cardIndex !== -1) {\n            const targetPackLocation = getTargetPackLocation(indexOfCardToMove.target, props.unitsAndLocations.unit, props.unitsAndLocations.spacing)\n            cardReferences[indexOfCardToMove.cardIndex].current.moveCardToLocation(targetPackLocation, timing.moveDurationComputerCardGaming)\n            finalizeCardMoveOrSendCardBackToSolitaire(indexOfCardToMove)\n        }\n    }\n\n    const finalizeCardMoveOrSendCardBackToSolitaire = (indexOfCardToMove) => {\n        setTimeout(() => {\n            const placementIsStillValid = getPlacementValidity(computerCards[indexOfCardToMove.cardIndex], indexOfCardToMove.target, props.topmostStuff)\n            if (placementIsStillValid) {\n                const currentPosition = getCurrentPosition(indexOfCardToMove.cardIndex, occupancyData)\n                updateGameStackTopmostCard(indexOfCardToMove.target, props.topmostStuff, computerCards[indexOfCardToMove.cardIndex])\n                handleCardStateChanges([{ index: indexOfCardToMove.cardIndex, newState: 'null' }], cardStates, setCardStates)\n                handleOccupancyDataChanges(indexOfCardToMove.cardIndex, 'vacate', 'none', occupancyData, setOccupancyData)\n                const indexOfCardBelow = getIndexOfPossibleCardBelow(indexOfCardToMove.cardIndex)\n                if (currentPosition > 4 && indexOfCardBelow !== -1) {\n                    cardReferences[indexOfCardBelow].current.flipOnly(timing.flipDurationGaming)\n                    setTimeout(() => {\n                        handleCardStateChanges([{ index: indexOfCardToMove.cardIndex, newState: 'null' }, { index: indexOfCardBelow, newState: 'movable' }], cardStates, setCardStates)\n                    }, timing.flipDurationGaming)\n                }\n            } else {\n                const location = getComputerCardLocationAfterDealing(indexOfCardToMove.cardIndex, props.unitsAndLocations.unit, props.unitsAndLocations.spacing, props.computerCards.length)\n                cardReferences[indexOfCardToMove.cardIndex].current.moveCardToLocation(location)\n            }\n        }, timing.moveDurationComputerCardGaming)\n    }\n\n\n    const returnState = () => {\n        return occupancyData\n    }\n\n\n    useImperativeHandle(ref, () => {\n        return { dealSolitaireCards, dealSingleCard, startComputerCardMoveIfPossible, returnState }\n    })\n\n    const flipPossibleCardBelow = (cardIndex) => {\n        const indexOfCardBelow = getIndexOfPossibleCardBelow(cardIndex)\n        if (indexOfCardBelow !== -1) {\n            cardReferences[indexOfCardBelow].current.flipOnly(timing.flipDurationGaming)\n        }\n    }\n\n    return (\n        <View>\n            {computerCards.map((card, index) => {\n                return (\n                    <ControllableComputerCard\n                        key={index}\n                        index={index}\n                        card={card}\n                        ref={cardReferences[index]}\n                        spacing={props.spacing}\n                        cardCount={computerCards.length}\n                        flipPossibleCardBelow={flipPossibleCardBelow}\n                        unitsAndLocations={props.unitsAndLocations}\n                        cardState={cardStates[index]}\n                    />\n                )\n            })}\n        </View>\n    )\n\n\n})\n\nexport default ComputerCards\n\n\n","import React, { useState } from 'react'\nimport { View, TouchableOpacity, Text, StyleSheet } from 'react-native'\n\n\n\nconst ControlPanel = ({ unitsAndLocations, dealSolitaireCards, dealSingleCards, gameIsActive, changeGameIsActiveState }) => {\n\n    const [solitaireDealingDone, setSolitaireDealingDone] = useState(false)\n    const [displayText, setDisplayText] = useState('deal solitaire cards')\n\n    const styles = getStyles(unitsAndLocations.unit)\n\n    const performActions = () => {\n        if (solitaireDealingDone) {\n            setDisplayText('')\n            dealSingleCards()\n            setTimeout(() => {\n                changeGameIsActiveState()\n                setDisplayText('continue')\n            }, 2000)\n        } else {\n            setDisplayText('')\n            dealSolitaireCards()\n            setTimeout(() => {\n                setSolitaireDealingDone(true)\n                setDisplayText('continue')\n            }, 10000)\n        }\n    }\n\n    if (displayText === '' || gameIsActive) {\n        return null\n    } else {\n        return (\n            <View style={{ position: 'absolute', top: 0, alignSelf: 'center' }}>\n                <TouchableOpacity onPress={performActions} style={styles.buttonView}>\n                    <Text style={styles.buttonText}>{displayText}</Text>\n                </TouchableOpacity>\n            </View>\n        )\n    }\n}\n\nexport default ControlPanel\n\n\n\nconst getStyles = (scaleUnit) => {\n    return StyleSheet.create({\n        contents:{\n            alignItems: 'center',\n            marginTop: scaleUnit / 2,\n        },\n        titleText: {\n            fontSize: scaleUnit / 1.5,\n            fontWeigth: 'bold',\n            color: '#B9CC3F',\n            fontFamily: 'Arial Black',\n        },\n        infoText: {\n            fontSize: scaleUnit / 2.75,\n            color: '#B9CC3F',\n            fontFamily: 'Arial',\n        },\n        spacer: {\n            height: scaleUnit / 2,\n        },\n        buttonView: {\n            backgroundColor: '#B9CC3F',\n            padding: scaleUnit / 10,\n            borderRadius: 8,\n            marginTop: scaleUnit / 10,\n        },\n        buttonText: {\n            color: 'green',\n            fontFamily: 'Arial',\n            fontSize: scaleUnit / 3,\n        },\n    })\n}","import React, { useState } from 'react'\nimport { View } from 'react-native'\nimport { connect } from 'react-redux'\nimport PlayerCards from './PlayerCards'\nimport CommonGameStacks from './CommonGameStacks'\nimport ComputerCards from './ComputerCards'\nimport ControlPanel from './ControlPanel'\n\n\n\nconst Game = (props) => {\n\n    const [topmostLeft, setTopmostLeft] = useState('')\n    const [topmostRight, setTopmostRight] = useState('')\n    const [playerCards] = useState(props.game.playerStack)\n    const [computerCards] = useState(props.game.computerStack)\n    const [referencePlayerCards] = useState(React.createRef())\n    const [referenceComputerCards] = useState(React.createRef())\n    const [unitsAndLocations] = useState(props.unitsAndLocations)\n    const [cumulativeLeftStack, setCumulativeLeftStack] = useState([])\n    const [cumulativeRightStack, setCumulativeRightStack] = useState([])\n    const [gameIsActive, setGameIsActive] = useState(false)\n    const [computerPlayingInterval, setComputerPlayingInterval] = useState('')\n    const [newCardsNeededInterval, setNewCardsNeededInterval] = useState('')\n\n    const dealSolitaireCards = () => {\n        referencePlayerCards.current.dealSolitaireCards()\n        referenceComputerCards.current.dealSolitaireCards()\n    }\n    const dealSingleCards = () => {\n        referencePlayerCards.current.dealSingleCard()\n        referenceComputerCards.current.dealSingleCard()\n    }\n\n    const changeTopmostLeft = (card) => {\n        setTopmostLeft(card)\n        let updated = [...cumulativeLeftStack]\n        updated.push(card)\n        setCumulativeLeftStack(updated)\n    }\n\n    const changeTopmostRight = (card) => {\n        setTopmostRight(card)\n        let updated = [...cumulativeRightStack]\n        updated.push(card)\n        setCumulativeRightStack(updated)\n    }\n\n    const gameOverEndRound = (theWinner) => {\n        setTimeout(() => {\n            props.gameRoundOver(theWinner)\n        }, 2000)\n    }\n\n    const topmostStuff = {\n        valueLeft: topmostLeft,\n        valueRight: topmostRight,\n        changeLeft: changeTopmostLeft,\n        changeRight: changeTopmostRight,\n    }\n\n\n    const changeGameIsActiveState = () => {\n        if (!gameIsActive) {\n            setComputerPlayingInterval(\n                setInterval(() => {\n                    referenceComputerCards.current.startComputerCardMoveIfPossible()\n                }, 4000),\n            )\n            setNewCardsNeededInterval(\n                setInterval(() => {\n                    const occupancyDataPlayer = referencePlayerCards.current.returnState()\n                    const occupancyDataComputer = referenceComputerCards.current.returnState()\n                    const topmostValues = referencePlayerCards.current.returnTopmostValues()\n                    const dealingOfNewCardsIsNeeded = newCardsAreNeeded(occupancyDataPlayer, occupancyDataComputer, topmostValues.left, topmostValues.right, playerCards, computerCards)\n                    console.log('dealingOfNewCardsIsNeeded', dealingOfNewCardsIsNeeded)\n                    if (dealingOfNewCardsIsNeeded) {\n                        setGameIsActive()\n                    }\n                }, 4000),\n            )\n        } else {\n            clearInterval(computerPlayingInterval)\n            clearInterval(newCardsNeededInterval)\n        }\n        setGameIsActive(!gameIsActive)\n    }\n\n\n\n    return (\n        <View>\n            <CommonGameStacks\n                topmostLeft={topmostLeft}\n                topmostRight={topmostRight}\n                unitsAndLocations={unitsAndLocations}\n            />\n            <PlayerCards\n                playerCards={playerCards}\n                ref={referencePlayerCards}\n                gameOverEndRound={gameOverEndRound}\n                unitsAndLocations={unitsAndLocations}\n                topmostStuff={topmostStuff}\n                gameIsActive={gameIsActive}\n            />\n            <ComputerCards\n                computerCards={computerCards}\n                ref={referenceComputerCards}\n                gameOverEndRound={gameOverEndRound}\n                unitsAndLocations={unitsAndLocations}\n                topmostStuff={topmostStuff}\n                gameIsActive={gameIsActive}\n            />\n            <ControlPanel\n                unitsAndLocations={unitsAndLocations}\n                dealSolitaireCards={dealSolitaireCards}\n                dealSingleCards={dealSingleCards}\n                gameIsActive={gameIsActive}\n                changeGameIsActiveState={changeGameIsActiveState}\n            />\n        </View>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n\n}\n\nconst ConnectedGame = connect(mapStateToProps, mapDispatchToProps)(Game)\n\n\nexport default ConnectedGame\n\n\n// HELPER FUNCTIONS FOR COMPONENT ConnectedGame\n\nconst newCardsAreNeeded = (occupancyDataPlayer, occupancyDataComputer, topmostLeft, topmostRight, playerCards, computerCards) => {\n    const visiblePlayerCardValues = getVisibleCards(occupancyDataPlayer, playerCards)\n    const visibleComputerCardValues = getVisibleCards(occupancyDataComputer, computerCards)\n    const playerCardsNeedNewDealing = newOneCardDealingIsNeeded(visiblePlayerCardValues, topmostLeft, topmostRight)\n    if (!playerCardsNeedNewDealing) {\n        return false\n    }\n    const computerCardsNeedNewDealing = newOneCardDealingIsNeeded(visibleComputerCardValues, topmostLeft, topmostRight)\n    if (!computerCardsNeedNewDealing) {\n        return false\n    }\n    return true\n}\n\nconst newOneCardDealingIsNeeded = (visibleCardValues, leftValue, rightValue) => {\n    for (let i = 0; i < visibleCardValues.length; i++) {\n        const leftOK = valueIsOKforPlacingOntoAStack(visibleCardValues[i], leftValue)\n        console.log('card', visibleCardValues[i], 'top', leftValue)\n        if (leftOK) {\n            return false\n        }\n        const rightOK = valueIsOKforPlacingOntoAStack(visibleCardValues[i], rightValue)\n        console.log('card', visibleCardValues[i], 'top', rightValue)\n        if (rightOK) {\n            return false\n        }\n    }\n    return true\n}\n\nconst getVisibleCards = (occupancies, cards) => {\n    let visibleCardValues = []\n    const sets = [[0], [5,1], [9,6,2], [12,10,7,3], [14,13,11,8,4]]\n    let i = 0\n    while (i < 5) {\n        let j = 0\n        let look = true\n        while (look && j < sets[i].length) {\n            if (sets[i][j] < cards.length) {\n                const indexOfCardAtThisPosition = occupancies[sets[i][j]]\n                if (indexOfCardAtThisPosition !== -1) {\n                    visibleCardValues.push(cards[indexOfCardAtThisPosition].value)\n                    look = false\n                }\n            }\n            j++\n        }\n        i++\n    }\n    return visibleCardValues\n}\n\nexport const valueIsOKforPlacingOntoAStack = (newValue, currentTopmostValue) => {\n    if (currentTopmostValue === 1) {\n        if (newValue === 2 || newValue === 13) {\n            return true\n        }\n    } else if (currentTopmostValue === 13) {\n        if (newValue === 12 || newValue === 1) {\n            return true\n        }\n    } else {\n        if (newValue === currentTopmostValue + 1 || newValue === currentTopmostValue - 1) {\n            return true\n        } else {\n            return false\n        }\n    }\n}\n\n\n\n\n","import React from 'react'\nimport { View, TouchableOpacity, StyleSheet, Text, Animated } from 'react-native'\n\n\nconst WelcomeView = ({ startSetting, scaleUnit }) => {\n\n    const styles = getStyles(scaleUnit)\n\n    const visibility = new Animated.Value(1)\n    const animatedVisibility = { opacity: visibility }\n    const fadeOut = () => {\n        Animated.timing(visibility, {\n            toValue: 0, duration: 1000,\n        }).start()\n        setTimeout(() => {\n            startSetting()\n        }, 1000)\n    }\n\n    return (\n        <View>\n            <Animated.View style={animatedVisibility}>\n                <View style={styles.contents}>\n                    <Text style={styles.titleText}>nopsa</Text>\n                    <Text style={styles.infoText}>a card game for those with</Text>\n                    <Text style={styles.infoText}> skill, speed and luck</Text>\n                    <View style={styles.spacer}></View>\n                    <Text style={styles.infoText}>feel like playing?</Text>\n                    <TouchableOpacity onPress={fadeOut} style={styles.buttonView}>\n                        <Text style={styles.buttonText}>setup a new game</Text>\n                    </TouchableOpacity>\n                </View>\n            </Animated.View>\n        </View>\n    )\n}\n\n\nconst getStyles = (scaleUnit) => {\n    return StyleSheet.create({\n        contents:{\n            alignItems: 'center',\n            marginTop: scaleUnit / 2,\n        },\n        titleText: {\n            fontSize: scaleUnit / 1.5,\n            fontWeigth: 'bold',\n            color: '#B9CC3F',\n            fontFamily: 'Arial Black',\n        },\n        infoText: {\n            fontSize: scaleUnit / 2.5,\n            color: '#B9CC3F',\n            fontFamily: 'Arial',\n        },\n        spacer: {\n            height: scaleUnit / 2,\n        },\n        buttonView: {\n            backgroundColor: '#B9CC3F',\n            padding: scaleUnit / 5,\n            borderRadius: 8,\n            marginTop: scaleUnit / 5,\n        },\n        buttonText: {\n            color: 'green',\n            fontFamily: 'Arial',\n            fontSize: scaleUnit / 2.5,\n        },\n    })\n}\n\n\nexport default WelcomeView\n\n","import React from 'react'\nimport {  View } from 'react-native'\n\nconst SmallDot = ({ value, dotViewWidth, dotNumber }) => {\n\n    const changingOpacity = (value >= dotNumber) ? 1 : 0.2\n\n    const styleOuterView = {\n        width: dotViewWidth,\n        height: dotViewWidth * 1.4,\n        justifyContent: 'center',\n        alignItems: 'center',\n    }\n    const styleInnerView = {\n        width: 4,\n        height: 4,\n        opacity: changingOpacity,\n        backgroundColor: '#B9CC3F',\n        borderRadius: 3,\n    }\n\n\n    return (\n        <View style={styleOuterView}>\n            <View style={styleInnerView}/>\n        </View>\n    )\n}\n\nexport default SmallDot\n\n","import React from 'react'\nimport {  View, TouchableOpacity } from 'react-native'\n\n\nconst LargeDot = ({ value, dotNumber, dotViewWidth, handleSelectionChanged }) => {\n\n    const changingOpacity = (value >= dotNumber) ? 1 : 0.2\n\n    const styleOuterView = {\n        width: dotViewWidth,\n        height: dotViewWidth * 1.4,\n        justifyContent: 'center',\n        alignItems: 'center',\n        borderWidth: 1.5,\n        opacity: changingOpacity,\n        borderColor: '#B9CC3F',\n        borderRadius: dotViewWidth,\n    }\n    const styleInnerView = {\n        width: 4,\n        height: 4,\n        backgroundColor: '#B9CC3F',\n        borderRadius: 2.0,\n    }\n\n\n    return (\n        <TouchableOpacity onPress={() => handleSelectionChanged(dotNumber)}>\n            <View style={styleOuterView}>\n                <View  style={styleInnerView}/>\n            </View>\n        </TouchableOpacity>\n    )\n}\n\nexport default LargeDot\n\n","import React, { useState, useImperativeHandle } from 'react'\nimport {  View, StyleSheet } from 'react-native'\nimport SmallDot from './SmallDot'\nimport LargeDot from './LargeDot'\n\n\n\n\nconst DottedSlider = React.forwardRef((props, ref) => {\n\n    const scaleUnit = props.scaleUnit\n    const index = props.optionCount - 1\n    const [selectedValue, setSelectedValue] = useState(1)\n    const dotViewWidth = 6 * scaleUnit / 30\n\n    const handleSelectionChanged = (newValue) => {\n        let startValue = selectedValue\n        const changes = Math.max(newValue - selectedValue, selectedValue - newValue)\n        function changeUpOrDown(direction) {\n            return setInterval(() => {\n                if (direction === 'up' && startValue < newValue) {\n                    startValue++\n                    setSelectedValue(startValue)\n                } else if (direction === 'down' && newValue < startValue) {\n                    startValue--\n                    setSelectedValue(startValue)\n                }\n            }, 180 / changes)\n        }\n        let changeInterval\n        if (selectedValue < newValue) {\n            changeInterval = changeUpOrDown('up')\n        } else if (selectedValue > newValue) {\n            changeInterval = changeUpOrDown('down')\n        }\n        setTimeout(() => {\n            clearInterval(changeInterval)\n        }, 180 * changes)\n    }\n\n    const getSelectedValue = () => {\n        return (selectedValue - 1) / 6 + 1\n    }\n    useImperativeHandle(ref, () => {\n        return { getSelectedValue }\n    })\n\n\n    const displayDotSlider = () => {\n        let dots = []\n        for (let i = 1; i <= index * 6 + 1; i++) {\n            if ((i - 1) % 6 !== 0) {\n                dots.push(\n                    <SmallDot\n                        key={i}\n                        value={selectedValue}\n                        dotViewWidth={dotViewWidth}\n                        dotNumber={i}\n                    />)\n            } else {\n                dots.push(\n                    <LargeDot\n                        key={i}\n                        value={selectedValue}\n                        dotViewWidth={dotViewWidth}\n                        handleSelectionChanged={handleSelectionChanged}\n                        dotNumber={i}\n                    />)\n            }\n        }\n        return dots\n    }\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.dotSliderView}>\n                {displayDotSlider()}\n            </View>\n        </View>\n\n    )\n\n\n})\n\nexport default DottedSlider\n\n\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n        marginBottom: 50,\n    },\n    instructionText: {\n        color: '#B9CC3F',\n        fontFamily: 'Arial',\n        fontWeight: 'bold',\n        marginBottom: 15,\n    },\n    dotSliderView: {\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n})\n\n","import React from 'react'\nimport { View, TouchableOpacity } from 'react-native'\nimport CardBack from '../cards/CardBack'\n\nconst Stack = ({ displayColor, number, selectStack, scaleUnit }) => {\n\n    const stackStyle = {\n        width: scaleUnit * 1.5,\n        height: scaleUnit * 1.7 * 1.3,\n        borderRadius: 7 * 1.3,\n        borderWidth: 1.3,\n        justifyContent: 'center',\n        alignItems: 'center',\n    }\n\n    return (\n        <TouchableOpacity onPress={() => selectStack(number)}>\n            <View style={[stackStyle, displayColor]}>\n                <CardBack scaleUnit={scaleUnit}/>\n            </View>\n        </TouchableOpacity>\n    )\n}\n\nexport default Stack\n\n","import React, { useState, useImperativeHandle } from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport Stack from './Stack'\n\n\nconst StackSelection = React.forwardRef((props, ref) => {\n\n    const scaleUnit = props.scaleUnit\n    const styles = getStyles()\n\n    const [selectedStack, setSelectedStack] = useState(0)\n    const changedSelection = (id) => {\n        setSelectedStack(id)\n    }\n\n    const getSelectedStack = () => {\n        if (selectedStack === 0) {\n            return { player: 0, computer: 1 }\n        } else {\n            return { player: 1, computer: 0 }\n        }\n    }\n    useImperativeHandle(ref, () => {\n        return { getSelectedStack }\n    })\n\n    const borderColorStack1 = selectedStack === 0 ? { borderColor: '#B9CC3F' } : { borderColor: 'green' }\n    const borderColorStack2 = selectedStack === 1 ?  { borderColor: '#B9CC3F' } : { borderColor: 'green' }\n\n\n    return (\n        <View style={styles.container}>\n            <View style={{ flexDirection: 'row' }}>\n                <Stack displayColor={borderColorStack1} number={0} selectStack={changedSelection} scaleUnit={scaleUnit}/>\n                <View style={{ width: 30 }}/>\n                <Stack displayColor={borderColorStack2} number={1} selectStack={changedSelection} scaleUnit={scaleUnit}/>\n            </View>\n        </View>\n    )\n})\n\nexport default StackSelection\n\n\nconst getStyles = (scaleUnit) => {\n    return  StyleSheet.create({\n        container: {\n            alignItems: 'center',\n        },\n        instructionText: {\n            fontSize: scaleUnit / 2.5,\n            color: '#B9CC3F',\n            fontFamily: 'Arial',\n            marginBottom: scaleUnit / 3,\n        },\n    })\n}\n","import React from 'react'\nimport { View, TouchableOpacity, Animated, StyleSheet, Text } from 'react-native'\nimport { connect } from 'react-redux'\nimport { setGameSettings } from '../../reducers/gameReducer'\nimport DottedSlider from './DottedSlider'\nimport StackSelection from './StackSelection'\nimport { createStacks } from './createStacks.js'\n\n\nconst SelectionView = (props) => {\n\n    const scaleUnit = props.scaleUnit\n    const styles = getStyles(scaleUnit)\n\n    const referenceSkill = React.createRef()\n    const referenceSpeed = React.createRef()\n    const referenceStack = React.createRef()\n\n    const visibility = new Animated.Value(1)\n    const animatedVisibility = { opacity: visibility }\n\n    const saveSelectedSettings = () => {\n        Animated.timing(visibility, {\n            toValue: 0, duration: 1000,\n        }).start()\n        const stacks = createStacks()\n        setTimeout(() => {\n            props.setGameSettings({\n                skill: referenceSkill.current.getSelectedValue(),\n                speed: referenceSpeed.current.getSelectedValue(),\n                playerStack: stacks[referenceStack.current.getSelectedStack().player],\n                computerStack : stacks[referenceStack.current.getSelectedStack().computer],\n                isOn: true,\n            })\n        }, 1000)\n\n    }\n\n\n    return (\n        <Animated.View style={[styles.container, animatedVisibility]}>\n            <Text style={styles.instructionText}>select opponent skill level</Text>\n            <DottedSlider\n                scaleUnit={scaleUnit}\n                optionCount={3}\n                ref={referenceSkill}\n            />\n            <Text style={styles.instructionText}>select opponent speed</Text>\n            <DottedSlider\n                scaleUnit={scaleUnit}\n                optionCount={5}\n                ref={referenceSpeed}\n            />\n            <Text style={styles.instructionText}>select your stack</Text>\n            <StackSelection\n                scaleUnit={scaleUnit}\n                ref={referenceStack}\n            />\n            <View style={styles.spacer}></View>\n            <TouchableOpacity onPress={saveSelectedSettings} style={styles.buttonView}>\n                <Text style={styles.buttonText}>save settings</Text>\n            </TouchableOpacity>\n        </Animated.View>\n    )\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n    setGameSettings,\n}\n\nconst ConnectedSelectionView = connect(mapStateToProps, mapDispatchToProps)(SelectionView)\n\nexport default ConnectedSelectionView\n\n\nconst getStyles = (scaleUnit) => {\n    return  StyleSheet.create({\n        container: {\n            alignItems: 'center',\n            marginTop: 50,\n        },\n        instructionText: {\n            fontSize: scaleUnit / 2.5,\n            color: '#B9CC3F',\n            fontFamily: 'Arial',\n            marginBottom: scaleUnit / 3,\n        },\n        spacer: {\n            height: scaleUnit / 2,\n        },\n        buttonView: {\n            backgroundColor: '#B9CC3F',\n            padding: scaleUnit / 5,\n            borderRadius: 8,\n            marginTop: scaleUnit / 5,\n        },\n        buttonText: {\n            color: 'green',\n            fontFamily: 'Arial',\n            fontSize: scaleUnit / 2.5,\n        },\n    })\n}\n\n\n","import shuffle from 'shuffle-array'\n\nexport const createStacks = () => {\n    const stack = []\n    for (let j = 1; j < 5; j++) {\n\n        for (let i = 1; i < 14; i++) {\n            stack.push({ suit: j, value: i })\n        }\n\n    }\n\n    const stackShuffled = shuffle(stack)\n\n    return [ stackShuffled.slice(0, 26), stackShuffled.slice(26) ]\n}\n\n","import React, { useState } from 'react'\nimport { View } from 'react-native'\nimport WelcomeView from './WelcomeView'\nimport SelectionView from './SelectionView'\n\n\nconst SetUpGame = ({ scaleUnit }) => {\n\n    const [settingNew, setSettingNew] = useState(false)\n\n    const startSettingUpNewGame = () => {\n        setSettingNew(true)\n    }\n\n    return (\n        <View>\n            {settingNew ?\n                <SelectionView  scaleUnit={scaleUnit}/>\n                :\n                <WelcomeView startSetting={startSettingUpNewGame} scaleUnit={scaleUnit}/>\n            }\n        </View>\n    )\n}\n\nexport default SetUpGame\n\n\n\n\n\n\n","import React from 'react'\nimport { View, Text } from 'react-native'\nimport { connect } from 'react-redux'\n\n\nconst Winner = (props) => {\n\n    return (\n        <View>\n            <Text>Winner of the round:</Text>\n            <Text>{props.winner}</Text>\n        </View>\n    )\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n}\n\nconst ConnectedWinner = connect(mapStateToProps, mapDispatchToProps)(Winner)\n\nexport default ConnectedWinner\n\n\n\n","import React, { useState } from 'react'\nimport { View, Dimensions, StyleSheet } from 'react-native'\nimport { connect } from 'react-redux'\nimport Game from './game/Game'\nimport SetUpGame from './setup/SetUpGame'\nimport Winner from './game/Winner'\n\n\nconst GameOfNopsa = (props) => {\n\n    const screenWidth = Dimensions.get('window').width\n    const screenHeight = Dimensions.get('window').height\n    const scaleUnit = Math.min(screenWidth / 6, screenHeight /(6 * 1.7))\n    const styles = getStyles(screenWidth, screenHeight)\n    const spacing = (screenWidth - 6 * scaleUnit) / 2\n    const unitsAndLocations = getUnitsAndLocations(scaleUnit, spacing)\n    const gameIsOn = props.game.isOn\n\n    const [winner, setWinner] = useState('none')\n\n    const gameRoundOver = (theWinner) => {\n\n        setWinner(theWinner)\n    }\n    const GameWithRounds = () => {\n        if (winner === 'none') {\n            return <Game scaleUnit={scaleUnit} spacing={spacing} gameRoundOver={gameRoundOver} unitsAndLocations={unitsAndLocations}/>\n        } else {\n            return <Winner winner={winner}/>\n        }\n    }\n\n\n    return (\n        <View style={styles.screen}>\n            {gameIsOn ?\n                <GameWithRounds/>\n                :\n                <SetUpGame scaleUnit={scaleUnit}/>\n            }\n        </View>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n}\n\nconst ConnectedGameOfNopsa = connect(mapStateToProps, mapDispatchToProps)(GameOfNopsa)\n\nexport default ConnectedGameOfNopsa\n\nconst getStyles = (screenWidth, screenHeight) => {\n    return StyleSheet.create({\n        screen: {\n            width: screenWidth,\n            height: screenHeight,\n            backgroundColor: 'green',\n        },\n    })\n}\n\n\nconst getUnitsAndLocations = (unit, spacing) => {\n\n    const leftDealingStackXY = {\n        x: spacing + (1/6) * unit,\n        y: (0.5 + 1.5 + 0.75) * 1.7 * unit,\n    }\n    const leftGamingStackXY = {\n        x: spacing + (1/6 + 1 + 4/6) * unit,\n        y: (0.5 + 1.5 + 0.75) * 1.7 * unit,\n    }\n    const rightGamingStackXY = {\n        x: spacing + (1/6 + 1 + 4/6 + 1 + 2/6) * unit,\n        y: (0.5 + 1.5 + 0.75) * 1.7 * unit,\n    }\n    const rightDealingStackXY = {\n        x: spacing + (1/6 + 1 + 4/6 + 1 + 2/6 + 1 + 4/6) * unit,\n        y: (0.5 + 1.5 + 0.75) * 1.7 * unit,\n    }\n\n    return {\n        unit: unit,\n        spacing: spacing,\n        leftDealingStackXY: leftDealingStackXY,\n        leftGamingStackXY: leftGamingStackXY,\n        rightGamingStackXY: rightGamingStackXY,\n        rightDealingStackXY: rightDealingStackXY,\n        timing: {\n            moveDurationDealing: 1000,\n            flipDurationDealing: 600,\n            moveDurationComputerCardGaming: 1000,\n            flipDurationGaming: 200,\n            movementFinalization: 100,\n        },\n    }\n}\n\n\n\n\n\n","\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers/rootReducer'\nimport GameOfNopsa from './components/GameOfNopsa'\n\nconst store = createStore(rootReducer)\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            <GameOfNopsa/>\n        </Provider>\n    )\n}\n\nexport default App\n","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n"],"sourceRoot":""}