{"version":3,"sources":["reducers/gameReducer.js","reducers/rootReducer.js","components/cards/CardFront.js","components/cards/CardBack.js","components/cards/FlippableCard.js","components/cards/MovableFlippableCard.js","components/game/helperFunctions.js","components/cards/DraggableCard.js","components/game/ControllablePlayerCard.js","components/game/PlayerCards.js","components/game/CommonGameStacks.js","components/game/ControllableComputerCard.js","components/game/ComputerCards.js","components/game/Game.js","components/setup/WelcomeView.js","components/setup/SmallDot.js","components/setup/LargeDot.js","components/setup/DottedSlider.js","components/setup/Stack.js","components/setup/StackSelection.js","components/setup/SelectionView.js","components/setup/createStacks.js","components/setup/SetUpGame.js","components/GameOfNopsa.js","App.js","index.js"],"names":["initialState","isOn","gameReducer","state","action","type","data","rootReducer","combineReducers","game","CardFront","card","color","char","suit","cardText","value","View","style","justifyContent","alignItems","Text","fontSize","CardBack","scaleUnit","viewStyle","backgroundColor","width","height","borderRadius","rows","i","push","key","displayCards","FlippableCard","React","forwardRef","props","ref","size","cardStyle","animatedFlipBackside","Animated","Value","animatedFlipBacksideStyle","transform","rotateX","interpolate","inputRange","outputRange","animatedFlipFrontside","animatedFlipFrontsideStyle","flip","newState","index","sequence","timing","toValue","tension","friction","duration","start","performFlipAnimations","setTimeout","convertCardState","useImperativeHandle","position","left","MovableFlippableCard","useState","ValueXY","animatedMove","animatedMoveStyle","translateX","x","translateY","y","startLocation","referenceFlip","createRef","current","moveAndPossiblyFlip","delay","newLocation","moveToNewLocation","endLocation","top","getCardFlipStateAfterDealing","cardIndex","cardCount","toLeftOrRightGameStackInSingleCardDealing","side","countOfCardsToDeal","opponentCardCount","countOfComputerCardsToDeal","Math","min","getPlayerCardSolitaireLocation","scalingUnit","spacing","positionX","positionY","unitHeight","origoY","wasReleasedOnRightStack","releaseX","releaseY","gamingStackRightX","gamingStackRightY","wasReleasedOnLeftStack","gamingStackLeftX","gamingStackLeftY","getIndexOfPossibleCardBelow","onTopAndBelowCardIndexPairs","Map","get","getComputerCardSolitaireLocation","moveToNewPosition","animatedDraggable","newPosition","oldPosition","DraggableCard","dragStyle","updatedLocation","setUpdatedLocation","movedToEmpty","setMovedToEmpty","handleReleasedCard","returnCard","whatStackCardWasReleasedOn","wasReleasedOnLeft","wasReleasedOnRight","whatStackWasReleasedOn","whatStack","topmostLeft","topmostRight","newCard","currentTopmostValue","newValue","valueIsOKforPlacingOntoStack","moveCardToGameStack","changeTopmostLeft","changeTopmostRight","setPlayerCardToPlayed","handleEmptyPositionStateChanged","flipPossibleCardBelow","whatEmptyPositionTheCardWasReleasedOn","emptyPositions","positionsX","emptyPosition","whatEmptyPositionWasReleasedOn","positionIndex","moveCardToEmptyPosition","returnCardToStartDragPosition","panResponder","PanResponder","create","onStartShouldSetPanResponder","evt","gestureState","onPanResponderMove","event","dx","dy","moveCardAlongDrag","onPanResponderRelease","moveX","moveY","TouchableOpacity","disabled","panHandlers","ControllablePlayerCard","cardState","setCardState","locationAtStart","getPlayerCardLocationAfterDealing","locationAfterDealing","cardWillFlipAfterDealing","PlayerCards","playerCards","map","cardReferences","length","indexDealNext","setIndexDealNext","playedStates","getPlayerCardsPlayedStates","setPlayedStates","setEmptyPositions","useEffect","console","log","updatedPlayedCards","dealSolitaireCards","limit","dealSingleCard","indexOfCardBelow","indexOfEmptyPosition","empties","GameStack","topmost","background","CommonGameStacks","cardViewStyleLeft","zIndex","getCardViewStyleLeft","cardViewStyleRight","getCardViewStyleRight","ControllableComputerCard","getComputerCardLocationAfterDealing","ComputerCards","computerCards","ConnectedGame","connect","setTopmostLeft","setTopmostRight","playerStack","computerStack","referencePlayerCards","referenceComputerCards","onPress","getStyles","StyleSheet","contents","marginTop","titleText","fontWeigth","fontFamily","infoText","spacer","buttonView","padding","buttonText","WelcomeView","startSetting","styles","visibility","animatedVisibility","opacity","SmallDot","dotViewWidth","styleOuterView","styleInnerView","dotNumber","LargeDot","handleSelectionChanged","borderWidth","borderColor","DottedSlider","optionCount","selectedValue","setSelectedValue","changeInterval","startValue","changes","max","changeUpOrDown","direction","setInterval","clearInterval","getSelectedValue","container","dotSliderView","dots","displayDotSlider","marginBottom","instructionText","fontWeight","flexDirection","Stack","displayColor","number","selectStack","stackStyle","StackSelection","selectedStack","setSelectedStack","changedSelection","id","getSelectedStack","player","computer","borderColorStack1","borderColorStack2","mapDispatchToProps","setGameSettings","settings","ConnectedSelectionView","referenceSkill","referenceSpeed","referenceStack","stacks","stack","j","stackShuffled","shuffle","slice","createStacks","skill","speed","SetUpGame","settingNew","setSettingNew","ConnectedGameOfNopsa","screenWidth","Dimensions","screenHeight","gameIsOn","screen","store","createStore","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c1d6078c.chunk.js","sourcesContent":["const initialState = { isOn: false }\n\nconst gameReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n    case 'SET_GAME_SETTINGS':\n        return action.data\n    default:\n        return state\n    }\n\n}\n\nexport const setGameSettings = (settings) => {\n    return {\n        type: 'SET_GAME_SETTINGS',\n        data: settings,\n    }\n}\n\n\nexport default gameReducer\n\n","import { combineReducers } from 'redux'\nimport gameReducer from './gameReducer'\n\nconst rootReducer = combineReducers({\n    game: gameReducer,\n})\n\nexport default rootReducer\n\n\n","import React from 'react'\nimport { View, Text } from 'react-native'\n\nconst CardFront = ({ card }) => {\n\n    let color = 'black'\n    let char = ''\n    switch (card.suit) {\n    case 2:\n        char = '♥'\n        color = 'red'\n        break\n    case 3:\n        char = '♣'\n        break\n    case 4:\n        char = '♦'\n        color = 'red'\n        break\n    default:\n        char = '♠'\n        break\n    }\n\n    const cardText = card.value === 1 ? 'A' : card.value\n\n    return (\n        <View  style={{ justifyContent: 'center', alignItems: 'center' }}>\n            <Text style={{ color: color, fontSize: 30 }}>{char}</Text>\n            <Text style={{ color: color, fontSize: 30 }}>{cardText}</Text>\n        </View>\n    )\n}\n\n\nexport default CardFront\n\n\n","import React from 'react'\nimport { View, Text } from 'react-native'\n\nconst CardBack = ({ scaleUnit }) => {\n\n    const viewStyle = {\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#B9CC3F',\n        width: scaleUnit,\n        height: scaleUnit * 1.7,\n        borderRadius: 6,\n    }\n\n    const displayCards = () => {\n        let rows = []\n        for (let i = 0; i < 9 ; i++) {\n            rows.push(<Text key={i} style={{ color: 'green', fontSize: scaleUnit / 7 }}>©©©©©©©</Text>)\n        }\n        return rows\n    }\n\n    return (\n        <View  style={viewStyle}>\n            {displayCards()}\n        </View>\n    )\n}\n\nexport default CardBack\n\n","import React, { useImperativeHandle } from 'react'\nimport { View, Animated } from 'react-native'\nimport CardFront from './CardFront'\nimport CardBack from './CardBack'\n\n\nconst getCardStyle = (size) => {\n    return {\n        width: size,\n        height: size * 1.7,\n        borderRadius: 7,\n        backgroundColor: 'papayawhip',\n    }\n}\n\nconst performFlipAnimations = (animatedFlipBackside, animatedFlipFrontside) => {\n    Animated.sequence([\n        Animated.timing(animatedFlipBackside, {\n            toValue: 90, tension: 10, friction: 10, duration: 300,\n        }),\n        Animated.timing(animatedFlipFrontside, {\n            toValue: 180, tension: 10, friction: 10, duration: 300,\n        }),\n    ]).start()\n}\n\n\n\nconst FlippableCard = React.forwardRef((props, ref) => {\n\n    const cardStyle = getCardStyle(props.size)\n\n    let animatedFlipBackside = new Animated.Value(0)\n    const interpolatedFlipBackside = animatedFlipBackside.interpolate({\n        inputRange: [0, 180], outputRange: ['180deg', '360deg'],\n    })\n    const animatedFlipBacksideStyle = { transform: [ { rotateX: interpolatedFlipBackside } ] }\n\n    let animatedFlipFrontside = new Animated.Value(90)\n    const interpolatedFlipFrontside = animatedFlipFrontside.interpolate({\n        inputRange: [0, 180], outputRange: ['180deg', '360deg'],\n    })\n    const animatedFlipFrontsideStyle = { transform: [ { rotateX: interpolatedFlipFrontside } ] }\n\n\n    const flip = () => {\n        const newState = props.index > 14 ? 'null' : 'draggable'\n        performFlipAnimations(animatedFlipBackside, animatedFlipFrontside)\n        setTimeout(() => {\n            props.convertCardState(newState)\n        }, 600)\n    }\n\n    useImperativeHandle(ref, () => {\n        return { flip }\n    })\n\n\n    return (\n        <View>\n            <Animated.View style={[cardStyle, { position: 'absolute', left: 0 }, animatedFlipBacksideStyle]}>\n                <CardBack scaleUnit={props.size}/>\n            </Animated.View>\n            <Animated.View style={[cardStyle, animatedFlipFrontsideStyle]}>\n                <CardFront card={props.card}/>\n            </Animated.View>\n        </View>\n    )\n})\n\nexport default FlippableCard\n\n","import React, { useImperativeHandle, useState } from 'react'\nimport { Animated } from 'react-native'\nimport FlippableCard from '../cards/FlippableCard'\n\n\nconst moveToNewLocation = (animatedMove, startLocation, delay, newLocation) => {\n    Animated.sequence([\n        Animated.delay(delay),\n        Animated.timing(animatedMove, {\n            toValue: { x: newLocation.x - startLocation.x, y: newLocation.y - startLocation.y }, duration: 1000,\n        }),\n    ]).start()\n}\n\n\n\nconst MovableFlippableCard = React.forwardRef((props, ref) => {\n\n    const [animatedMove] = useState(new Animated.ValueXY())\n    const animatedMoveStyle = { transform: [ { translateX: animatedMove.x }, { translateY: animatedMove.y } ] }\n    const [startLocation] = useState(props.startLocation)\n    const referenceFlip = React.createRef()\n\n    const flip = () => {\n        referenceFlip.current.flip()\n    }\n\n    const moveAndPossiblyFlip = () => {\n        const delay = props.index > 14 ? 0 : 500 * props.index\n        moveToNewLocation(animatedMove, startLocation, delay, props.endLocation)\n        if (props.flip) {\n            setTimeout(() => {\n                flip()\n            }, delay + 1000)\n        }\n    }\n\n    useImperativeHandle(ref, () => {\n        return { moveAndPossiblyFlip, flip }\n    })\n\n    return (\n        <Animated.View style={[animatedMoveStyle, { position: 'absolute', left: startLocation.x, top: startLocation.y }]}>\n            <FlippableCard\n                ref={referenceFlip}\n                index={props.index}\n                card={props.card}\n                size={props.scaleUnit}\n                convertCardState={props.convertCardState}\n            />\n        </Animated.View>\n    )\n})\n\nexport default MovableFlippableCard\n\n\n","\nexport const getPlayerCardStartLocation = (scalingUnit, spacing) => {\n    const positionX = spacing + (1/6 + 1 + 4/6 + 1 + 2/6 + 1 + 4/6) * scalingUnit\n    const positionY = (0.5 + 1.5 + 0.75) * 1.7 * scalingUnit\n    return { x: positionX, y: positionY }\n}\n\nexport const getCardFlipStateAfterDealing = (cardIndex, cardCount) => {\n    let flip = false\n    switch (cardIndex) {\n    case 0: case 5: case 9: case 12: case 14:\n        flip = true\n        break\n    case 1: case 2: case 3: case 4:\n        if (cardIndex + 4 > cardCount) {\n            flip = true\n        }\n        break\n    case 6: case 7: case 8:\n        if (cardIndex + 4 > cardCount) {\n            flip = true\n        }\n        break\n    case 10: case 11:\n        if (cardIndex + 4 > cardCount) {\n            flip = true\n        }\n        break\n    case 13:\n        if (cardIndex + 4 > cardCount) {\n            flip = true\n        }\n        break\n    default:\n        break\n    }\n    if (cardIndex > 14) {\n        flip = true\n    }\n    return flip\n}\n\n\nexport const getPlayerCardLocationAfterDealing = (cardIndex, scalingUnit, spacing, cardCount) => {\n\n    if (cardIndex < 15) {\n        return getPlayerCardSolitaireLocation(cardIndex, scalingUnit, spacing)\n    } else {\n        const positionY = (0.5 + 1.5 + 0.75) * 1.7 * scalingUnit\n        const toLeftOrRightStack = toLeftOrRightGameStackInSingleCardDealing('right', cardIndex, cardCount)\n        if (toLeftOrRightStack === 'right') {\n            const rightPackPositionX = spacing + (1/6 + 1 + 4/6 + 1 + 2/6) * scalingUnit\n            return { x: rightPackPositionX, y: positionY }\n        } else {\n            const leftPackPositionX = spacing + (1/6 + 1 + 4/6) * scalingUnit\n            return { x: leftPackPositionX, y: positionY }\n        }\n    }\n\n}\n\n\nexport const toLeftOrRightGameStackInSingleCardDealing = (side, cardIndex, cardCount) => {\n    const countOfCardsToDeal = cardCount - 15 > 0 ? cardCount - 15 : 0\n    const opponentCardCount = 52 - cardCount\n    const countOfComputerCardsToDeal = opponentCardCount - 15 > 0 ? opponentCardCount - 15 : 0\n    const numberOfBothPlayersDealCards = Math.min(countOfCardsToDeal, countOfComputerCardsToDeal)\n    if (cardIndex < 15 + numberOfBothPlayersDealCards) {\n        return side\n    } else {\n        if (opponentCardCount % 2 === 0 && cardIndex% 2 === 0) {\n            return side\n        } else {\n            return side === 'right' ? 'left' : 'right'\n        }\n    }\n}\n\n\nconst getPlayerCardSolitaireLocation = (cardIndex, scalingUnit, spacing) => {\n\n    const unitHeight = 1.7 * scalingUnit\n    const origoY =  (0.5 + 1.5 + 0.75 + 1.0 + 0.75) * unitHeight\n\n    let positionX\n\n    switch (cardIndex) {\n    case 0:\n        positionX = spacing + 1 / 6 * scalingUnit\n        break\n    case 1: case 5:\n        positionX = spacing + (2 / 6  + 1)* scalingUnit\n        break\n    case 2: case 6: case 9:\n        positionX = spacing +  (3 / 6 + 2) * scalingUnit\n        break\n    case 3: case 7: case 10: case 12:\n        positionX = spacing +  (4 / 6 + 3) * scalingUnit\n        break\n    default:\n        positionX = spacing +  (5 / 6 + 4) * scalingUnit\n    }\n\n    let positionY\n\n    switch (cardIndex) {\n    case 14:\n        positionY = origoY + (4 * 0.125) * unitHeight\n        break\n    case 12: case 13:\n        positionY = origoY + (3 * 0.125) * unitHeight\n        break\n    case 9: case 10: case 11:\n        positionY = origoY + (2 * 0.125) * unitHeight\n        break\n    case 5: case 6: case 7: case 8:\n        positionY = origoY + (1 * 0.125) * unitHeight\n        break\n    default:\n        positionY = origoY\n    }\n\n    return { x: positionX, y: positionY }\n}\n\nexport const whatStackWasReleasedOn = (releaseX, releaseY, scaleUnit, spacing) => {\n    const wasReleasedOnLeft = wasReleasedOnLeftStack(releaseX, releaseY, scaleUnit, spacing)\n    const wasReleasedOnRight = wasReleasedOnRightStack(releaseX, releaseY, scaleUnit, spacing)\n    if (wasReleasedOnLeft) {\n        return 'left'\n    } else if (wasReleasedOnRight) {\n        return 'right'\n    } else {\n        return 'none'\n    }\n}\n\nconst wasReleasedOnRightStack = (releaseX, releaseY, scaleUnit, spacing) => {\n    const gamingStackRightX = spacing + (1/6 + 1 + 4/6 + 1 + 2/6) * scaleUnit\n    const gamingStackRightY = (0.5 + 1.5 + 0.75) * scaleUnit * 1.7\n    if (!(releaseX > gamingStackRightX && releaseX < gamingStackRightX + scaleUnit)) {\n        return false\n    }\n    if (!(releaseY > gamingStackRightY && releaseY < gamingStackRightY + scaleUnit * 1.7)) {\n        return false\n    }\n    return true\n}\n\nconst wasReleasedOnLeftStack = (releaseX, releaseY, scaleUnit, spacing) => {\n    const gamingStackLeftX = spacing + (1/6 + 1 + 4/6) * scaleUnit\n    const gamingStackLeftY = (0.5 + 1.5 + 0.75) * scaleUnit * 1.7\n    if (!(releaseX > gamingStackLeftX && releaseX < gamingStackLeftX + scaleUnit)) {\n        return false\n    }\n    if (!(releaseY > gamingStackLeftY && releaseY < gamingStackLeftY + scaleUnit * 1.7)) {\n        return false\n    }\n    return true\n}\n\n\nexport const valueIsOKforPlacingOntoStack = (whatStack, topmostLeft, topmostRight, newCard) => {\n    const currentTopmostValue = whatStack === 'left' ? topmostLeft.value : topmostRight.value\n    const newValue = newCard.value\n    if (currentTopmostValue === 1) {\n        if (newValue === 2 || newValue === 13) {\n            return true\n        }\n    } else if (currentTopmostValue === 13) {\n        if (newValue === 12 || newValue === 1) {\n            return true\n        }\n    } else {\n        if (newValue === currentTopmostValue + 1 || newValue === currentTopmostValue - 1) {\n            return true\n        } else {\n            return false\n        }\n    }\n}\n\nexport const getIndexOfPossibleCardBelow = (cardIndex) => {\n    const onTopAndBelowCardIndexPairs = new Map([\n        [14, 13],\n        [13, 11],\n        [12, 10],\n        [11, 8],\n        [10, 7],\n        [9, 6],\n        [8, 4],\n        [7, 3],\n        [6, 2],\n        [5, 1],\n        ['default', -1],\n    ])\n    return onTopAndBelowCardIndexPairs.get(cardIndex) || onTopAndBelowCardIndexPairs.get('default')\n}\n\n\nexport const whatEmptyPositionWasReleasedOn = (releaseX, releaseY, scaleUnit, spacing, emptyPositions) => {\n\n    const positionsX = []\n    for (let i = 0; i < 5; i++) {\n        positionsX.push(spacing + (1/6 + i * (1 + 1/6)) * scaleUnit)\n    }\n    const positionY = (0.5 + 1.5 + 0.75 + 1 + 0.75) * 1.7 * scaleUnit\n\n    let emptyPosition = 'none'\n    for (let i = 0; i < 5; i++) {\n        if (emptyPositions[i]) {\n            if ((releaseX > positionsX[i] && releaseX < positionsX[i] + scaleUnit)) {\n                if ((releaseY > positionY && releaseY < positionY + scaleUnit * 1.7)) {\n                    emptyPosition = i\n                }\n            }\n        }\n    }\n    return emptyPosition\n}\n\n\n\nexport const getComputerCardStartLocation = (scalingUnit, spacing) => {\n    const positionX = spacing + (1/6) * scalingUnit\n    const positionY = (0.5 + 1.5 + 0.75) * 1.7 * scalingUnit\n    return { x: positionX, y: positionY }\n}\n\n\nexport const getComputerCardLocationAfterDealing = (cardIndex, scalingUnit, spacing, cardCount) => {\n\n    if (cardIndex < 15) {\n        return getComputerCardSolitaireLocation(cardIndex, scalingUnit, spacing)\n    } else {\n        const positionY = (0.5 + 1.5 + 0.75) * 1.7 * scalingUnit\n        const toLeftOrRightStack = toLeftOrRightGameStackInSingleCardDealing('left', cardIndex, cardCount)\n        if (toLeftOrRightStack === 'right') {\n            const rightPackPositionX = spacing + (1/6 + 1 + 4/6 + 1 + 2/6) * scalingUnit\n            return { x: rightPackPositionX, y: positionY }\n        } else {\n            const leftPackPositionX = spacing + (1/6 + 1 + 4/6) * scalingUnit\n            return { x: leftPackPositionX, y: positionY }\n        }\n    }\n\n}\n\n\n\nexport const getComputerCardSolitaireLocation = (cardIndex, scalingUnit, spacing) => {\n    const unitHeight = 1.7 * scalingUnit\n    const origoY =  0\n\n    let positionX = spacing\n    switch (cardIndex) {\n    case 14: case 13: case 11: case 8: case 4:\n        positionX += 1 / 6 * scalingUnit\n        break\n    case 12: case 10: case 7: case 3:\n        positionX += (2 / 6  + 1)* scalingUnit\n        break\n    case 9: case 6: case 2:\n        positionX +=  (3 / 6 + 2) * scalingUnit\n        break\n    case 5: case 1:\n        positionX +=  (4 / 6 + 3) * scalingUnit\n        break\n    default:\n        positionX +=  (5 / 6 + 4) * scalingUnit\n    }\n\n    let positionY = 0\n    switch (cardIndex) {\n    case 4: case 3: case 2: case 1: case 0:\n        positionY = origoY + (4 * 0.125) * unitHeight\n        break\n    case 8: case 7: case 6: case 5:\n        positionY = origoY + (3 * 0.125) * unitHeight\n        break\n    case 11: case 10: case 9:\n        positionY = origoY + (2 * 0.125) * unitHeight\n        break\n    case 13: case 12:\n        positionY = origoY + (1 * 0.125) * unitHeight\n        break\n    default:\n        positionY = origoY\n    }\n    return { x: positionX, y: positionY }\n}","import React, { useState } from 'react'\nimport { Animated, PanResponder, TouchableOpacity } from 'react-native'\nimport CardFront from './CardFront'\nimport { whatStackWasReleasedOn, valueIsOKforPlacingOntoStack, whatEmptyPositionWasReleasedOn } from '../game/helperFunctions.js'\n\n\nconst getCardStyle = (size) => {\n    return {\n        width: size,\n        height: size * 1.7,\n        borderRadius: 7,\n        backgroundColor: 'papayawhip',\n    }\n}\n\nconst returnCardToStartDragPosition = (animatedDraggable, updatedLocation) => {\n    Animated.timing(animatedDraggable, {\n        toValue: {  x: 0 - updatedLocation.x, y: 0 - updatedLocation.y  }, duration: 500,\n    }).start()\n}\n\nconst moveCardAlongDrag = (dx, dy, animatedDraggable, updatedLocation) => {\n    Animated.timing(animatedDraggable, {\n        toValue: { x: dx - updatedLocation.x, y: dy - updatedLocation.y }, duration: 0,\n    }).start()\n}\n\nconst moveToNewPosition = (animatedDraggable, newPosition, oldPosition) => {\n    Animated.timing(animatedDraggable, {\n        toValue: { x: newPosition.x - oldPosition.x, y: newPosition.y - oldPosition.y }, duration: 500,\n    }).start()\n}\n\nconst moveCardToGameStack = (animatedDraggable, side, scaleUnit, spacing, startLocation) => {\n    const newX =  side === 'left' ? (spacing + (1/6 + 1 + 4/6) * scaleUnit) : (spacing + (1/6 + 1 + 4/6 + 1 + 2/6) * scaleUnit)\n    const newY = (0.5 + 1.5 + 0.75) * 1.7 * scaleUnit\n    moveToNewPosition(animatedDraggable, { x: newX, y: newY }, startLocation )\n}\n\nconst updateGameStackTopmostCard = (side, changeTopmostLeft, changeTopmostRight, card) => {\n    if (side === 'left') {\n        changeTopmostLeft(card)\n    } else {\n        changeTopmostRight(card)\n    }\n}\n\nconst moveCardToEmptyPosition = (animatedDraggable, positionIndex, scaleUnit, spacing, startLocation) => {\n    const newX = spacing + (1/6 + positionIndex * (1 + 1/6)) * scaleUnit\n    const newY = (0.5 + 1.5 + 0.75 + 1 + 0.75) * 1.7 * scaleUnit\n    moveToNewPosition(animatedDraggable, { x: newX, y: newY }, startLocation )\n}\n\n\n\nconst DraggableCard = React.forwardRef((props, ref) => {\n\n    const cardStyle = getCardStyle(props.size)\n    const [startLocation] = useState(props.startLocation)\n\n    // let animatedDraggable = new Animated.ValueXY()\n    const [animatedDraggable, setAnimatedDraggable] = useState(new Animated.ValueXY())\n    const dragStyle = { transform: [ { translateX: animatedDraggable.x }, { translateY: animatedDraggable.y }] }\n    const [updatedLocation, setUpdatedLocation] = useState({ x: 0, y: 0 })\n    const [movedToEmpty, setMovedToEmpty] = useState(false)\n\n\n    const handleReleasedCard = (releaseX, releaseY) => {\n\n        let returnCard = true\n        // dealing with possible release of card on either of the middle game stacks\n        const whatStackCardWasReleasedOn = whatStackWasReleasedOn(releaseX, releaseY, props.size, props.spacing)\n        if (whatStackCardWasReleasedOn !== 'none') {\n            const valueIsOK = valueIsOKforPlacingOntoStack(whatStackCardWasReleasedOn, props.topmostLeft, props.topmostRight, props.card)\n            if (valueIsOK) {\n                returnCard = false\n                moveCardToGameStack(animatedDraggable, whatStackCardWasReleasedOn, props.size, props.spacing, props.startLocation)\n                setTimeout(() => {\n                    updateGameStackTopmostCard(whatStackCardWasReleasedOn, props.changeTopmostLeft, props.changeTopmostRight, props.card)\n                    props.convertCardState('null')\n                    props.setPlayerCardToPlayed(props.index)\n                    if (props.index < 5 || movedToEmpty) {\n                        props.handleEmptyPositionStateChanged('vacate', props.index)\n                    }\n                    if (!movedToEmpty) {\n                        props.flipPossibleCardBelow(props.index)\n                    }\n                }, 500)\n            }\n        }\n\n        // dealing with possible release of card on an empty position in the solitaire\n        const whatEmptyPositionTheCardWasReleasedOn = whatEmptyPositionWasReleasedOn(releaseX, releaseY, props.size, props.spacing, props.emptyPositions)\n        if (whatEmptyPositionTheCardWasReleasedOn !== 'none' && !movedToEmpty && props.index > 4) {\n            moveCardToEmptyPosition(animatedDraggable, whatEmptyPositionTheCardWasReleasedOn, props.size, props.spacing, props.startLocation)\n            setTimeout(() => {\n                props.flipPossibleCardBelow(props.index)\n            }, 500)\n            setTimeout(() => {\n                returnCard = false\n                setMovedToEmpty(true)\n                setUpdatedLocation({\n                    x: startLocation.x - (props.spacing + (1/6 + whatEmptyPositionTheCardWasReleasedOn * (1 + 1/6)) * props.size),\n                    y: startLocation.y - ((0.5 + 1.5 + 0.75 + 1 + 0.75) * 1.7 * props.size),\n                })\n                props.handleEmptyPositionStateChanged('occupy', whatEmptyPositionTheCardWasReleasedOn)\n            }, 1000)\n\n            return\n        }\n\n        // otherwise return the card to original position\n        if (returnCard) {\n            returnCardToStartDragPosition(animatedDraggable, updatedLocation)\n        }\n    }\n\n    const panResponder = PanResponder.create({\n        onStartShouldSetPanResponder: (evt, gestureState) => true,\n        onPanResponderMove: (event, gestureState) => {\n            moveCardAlongDrag(gestureState.dx, gestureState.dy, animatedDraggable, updatedLocation)\n        },\n        onPanResponderRelease: (evt, gestureState) => {\n            handleReleasedCard(gestureState.moveX, gestureState.moveY)\n        },\n    })\n\n\n    return (\n        <TouchableOpacity  disabled={false}>\n            <Animated.View style={[cardStyle, dragStyle, { position: 'absolute', left: startLocation.x, top: startLocation.y }]} {...panResponder.panHandlers} >\n                <CardFront card={props.card}/>\n            </Animated.View>\n        </TouchableOpacity>\n    )\n})\n\nexport default DraggableCard\n\n\n\n","import React, { useState } from 'react'\nimport MovableFlippableCard from '../cards/MovableFlippableCard'\nimport DraggableCard from '../cards/DraggableCard'\nimport { getPlayerCardLocationAfterDealing, getPlayerCardStartLocation, getCardFlipStateAfterDealing } from './helperFunctions.js'\n\n\nconst ControllablePlayerCard = React.forwardRef((props, ref) => {\n\n    const [cardState, setCardState] = useState('movable')\n    const [locationAtStart] = useState(getPlayerCardStartLocation(props.scaleUnit, props.spacing))\n    const [locationAfterDealing] = useState(getPlayerCardLocationAfterDealing(props.index, props.scaleUnit, props.spacing, props.cardCount))\n    const [cardWillFlipAfterDealing] = useState(getCardFlipStateAfterDealing(props.index, props.cardCount))\n\n    const convertCardState = (newState) => {\n        setCardState(newState)\n    }\n\n    if (cardState === 'null') {\n        return null\n    } else if (cardState === 'draggable') {\n        return (\n            <DraggableCard\n                card={props.card}\n                ref={ref}\n                index={props.index}\n                size={props.scaleUnit}\n                startLocation={locationAfterDealing}\n                topmostLeft={props.topmostLeft}\n                topmostRight={props.topmostRight}\n                changeTopmostRight={props.changeTopmostRight}\n                changeTopmostLeft={props.changeTopmostLeft}\n                spacing={props.spacing}\n                convertCardState={convertCardState}\n                flipPossibleCardBelow={props.flipPossibleCardBelow}\n                setPlayerCardToPlayed={props.setPlayerCardToPlayed}\n                emptyPositions={props.emptyPositions}\n                handleEmptyPositionStateChanged={props.handleEmptyPositionStateChanged}\n            />\n        )\n    } else {\n        return (\n            <MovableFlippableCard\n                ref={ref}\n                index={props.index}\n                scaleUnit={props.scaleUnit}\n                startLocation={locationAtStart}\n                card={props.card}\n                endLocation={locationAfterDealing}\n                flip={cardWillFlipAfterDealing}\n                convertCardState={convertCardState}\n            />\n        )\n    }\n\n})\n\nexport default ControllablePlayerCard\n\n","import React, { useState, useImperativeHandle, useEffect } from 'react'\nimport { View } from 'react-native'\nimport ControllablePlayerCard from './ControllablePlayerCard'\nimport { toLeftOrRightGameStackInSingleCardDealing, getIndexOfPossibleCardBelow } from './helperFunctions.js'\n\n\nconst getPlayerCardsPlayedStates = (cardCount) => {\n    let playedStates = []\n    for (let i = 0; i < cardCount; i++) {\n        playedStates.push(false)\n    }\n    return playedStates\n}\n\n\nconst PlayerCards = React.forwardRef((props, ref) => {\n\n    const [playerCards] = useState(props.playerCards)\n    const [cardReferences] = useState(playerCards.map(card => React.createRef()))\n    const [indexDealNext, setIndexDealNext] = useState(props.playerCards.length > 15 ? 15 : 100)\n    const [playedStates, setPlayedStates] = useState(getPlayerCardsPlayedStates(props.playerCards.length))\n    const [emptyPositions, setEmptyPositions] = useState([false, false, false, false, false])\n\n    // tämän päivittäminen muualla, että saadaan peli päättymään, jos pelaaja voittaa!!!\n    useEffect(() => {\n        console.log('åpåäpäpopöopo')\n    },[playedStates])\n\n    const setPlayerCardToPlayed = (cardIndex) => {\n        const updatedPlayedCards = [...playedStates]\n        updatedPlayedCards[cardIndex] = true\n        setPlayedStates(updatedPlayedCards)\n    }\n\n    const dealSolitaireCards = () => {\n        const limit = Math.min(playerCards.length, 15)\n        for (let i = 0; i < limit; i++) {\n            cardReferences[i].current.moveAndPossiblyFlip()\n        }\n    }\n\n    const dealSingleCard = () => {\n        if (indexDealNext < props.playerCards.length) {\n            cardReferences[indexDealNext].current.moveAndPossiblyFlip()\n            setTimeout(() => {\n                const toWhichStack = toLeftOrRightGameStackInSingleCardDealing(indexDealNext, playerCards.length)\n                if (toWhichStack === 'right')  {\n                    props.changeTopmostRight(playerCards[indexDealNext])\n                } else {\n                    props.changeTopmostLeft(playerCards[indexDealNext])\n                }\n                setIndexDealNext(indexDealNext + 1)\n            }, 1600)\n        }\n    }\n\n    const flipPossibleCardBelow = (cardIndex) => {\n        const indexOfCardBelow = getIndexOfPossibleCardBelow(cardIndex)\n        if (indexOfCardBelow !== -1) {\n            cardReferences[indexOfCardBelow].current.flip()\n        }\n    }\n\n    const handleEmptyPositionStateChanged = (action, indexOfEmptyPosition) => {\n        const empties = [ ...emptyPositions ]\n        if (action === 'occupy') {\n            empties[indexOfEmptyPosition] = false\n        } else {\n            empties[indexOfEmptyPosition] = true\n        }\n        setEmptyPositions(empties)\n    }\n\n    useImperativeHandle(ref, () => {\n        return { dealSolitaireCards, dealSingleCard }\n    })\n\n\n    return (\n        <View>\n            {playerCards.map((card, index) => {\n                return (\n                    <ControllablePlayerCard\n                        key={index}\n                        index={index}\n                        card={card}\n                        ref={cardReferences[index]}\n                        scaleUnit={props.scaleUnit}\n                        spacing={props.spacing}\n                        cardCount={playerCards.length}\n                        topmostLeft={props.topmostLeft}\n                        topmostRight={props.topmostRight}\n                        changeTopmostRight={props.changeTopmostRight}\n                        changeTopmostLeft={props.changeTopmostLeft}\n                        flipPossibleCardBelow={flipPossibleCardBelow}\n                        setPlayerCardToPlayed={setPlayerCardToPlayed}\n                        emptyPositions={emptyPositions}\n                        handleEmptyPositionStateChanged={handleEmptyPositionStateChanged}\n                    />\n                )\n            })}\n        </View>\n    )\n})\n\n\nexport default PlayerCards\n\n","import React from 'react'\nimport { View } from 'react-native'\nimport CardFront from '../cards/CardFront'\n\n\nconst getCardViewStyleLeft = (scaleUnit, spacing) => {\n    return {\n        position: 'absolute',\n        left: spacing + (1/6 + 1 + 4/6) * scaleUnit,\n        top: (0.5 + 1.5 + 0.75) * 1.7 * scaleUnit,\n        width: scaleUnit,\n        height: 1.7 * scaleUnit,\n        borderRadius: 7,\n        zIndex: 0,\n    }\n}\n\nconst getCardViewStyleRight = (scaleUnit, spacing) => {\n    return {\n        position: 'absolute',\n        left: spacing + (1/6 + 1 + 4/6 + 1 + 2/6) * scaleUnit,\n        top: (0.5 + 1.5 + 0.75) * 1.7 * scaleUnit,\n        width: scaleUnit,\n        height: 1.7 * scaleUnit,\n        borderRadius: 7,\n        zIndex: 0,\n    }\n}\n\n\nconst GameStack = ({ viewStyle, topmost }) => {\n    const background = topmost === '' ? 'green' : 'papayawhip'\n    return (\n        <View style={[viewStyle, { backgroundColor: background }]}>\n            {topmost !== '' ?\n                <CardFront card={topmost}/>\n                :\n                null\n            }\n        </View>\n    )\n}\n\nconst CommonGameStacks = ({ topmostLeft, topmostRight,  scaleUnit, spacing }) => {\n\n    const cardViewStyleLeft = getCardViewStyleLeft(scaleUnit, spacing)\n    const cardViewStyleRight = getCardViewStyleRight(scaleUnit, spacing)\n\n    return (\n        <View>\n            <GameStack\n                viewStyle={cardViewStyleLeft}\n                topmost={topmostLeft}\n            />\n            <GameStack\n                viewStyle={cardViewStyleRight}\n                topmost={topmostRight}\n            />\n        </View>\n    )\n}\n\nexport default CommonGameStacks\n\n","import React, { useState } from 'react'\nimport MovableFlippableCard from '../cards/MovableFlippableCard'\nimport { getCardFlipStateAfterDealing,\n    getComputerCardLocationAfterDealing,\n    getComputerCardStartLocation,\n} from './helperFunctions.js'\n\n\n\nconst ControllableComputerCard = React.forwardRef((props, ref) => {\n\n    const [cardState, setCardState] = useState('movable')\n    const [locationAtStart] = useState(getComputerCardStartLocation(props.scaleUnit, props.spacing))\n    const [locationAfterDealing] = useState(getComputerCardLocationAfterDealing(props.index, props.scaleUnit, props.spacing, props.cardCount))\n    const [cardWillFlipAfterDealing] = useState(getCardFlipStateAfterDealing(props.index, props.cardCount))\n\n    const convertCardState = (newState) => {\n        setCardState(newState)\n    }\n\n    if (cardState === 'null') {\n        return null\n    } else {\n        return (\n            <MovableFlippableCard\n                ref={ref}\n                index={props.index}\n                scaleUnit={props.scaleUnit}\n                startLocation={locationAtStart}\n                card={props.card}\n                endLocation={locationAfterDealing}\n                flip={cardWillFlipAfterDealing}\n                convertCardState={convertCardState}\n            />\n        )\n    }\n\n})\n\nexport default ControllableComputerCard\n\n","import React, { useState, useImperativeHandle } from 'react'\nimport { View } from 'react-native'\nimport ControllableComputerCard from './ControllableComputerCard'\nimport { toLeftOrRightGameStackInSingleCardDealing, getIndexOfPossibleCardBelow } from './helperFunctions.js'\n\n\n\n\nconst ComputerCards = React.forwardRef((props, ref) => {\n\n    const [computerCards] = useState(props.computerCards)\n    const [cardReferences] = useState(computerCards.map(card => React.createRef()))\n    const [indexDealNext, setIndexDealNext] = useState(props.computerCards.length > 15 ? 15 : 100)\n\n    const dealSolitaireCards = () => {\n        const limit = Math.min(computerCards.length, 15)\n        for (let i = 0; i < limit; i++) {\n            cardReferences[i].current.moveAndPossiblyFlip()\n        }\n    }\n\n    const dealSingleCard = () => {\n        if (indexDealNext < props.computerCards.length) {\n            cardReferences[indexDealNext].current.moveAndPossiblyFlip()\n            setTimeout(() => {\n                const toWhichStack = toLeftOrRightGameStackInSingleCardDealing('left', indexDealNext, computerCards.length)\n                if (toWhichStack === 'right')  {\n                    props.changeTopmostRight(computerCards[indexDealNext])\n                } else {\n                    props.changeTopmostLeft(computerCards[indexDealNext])\n                }\n                setIndexDealNext(indexDealNext + 1)\n            }, 1600)\n        }\n    }\n\n    useImperativeHandle(ref, () => {\n        return { dealSolitaireCards, dealSingleCard }\n    })\n\n    const flipPossibleCardBelow = (cardIndex) => {\n        const indexOfCardBelow = getIndexOfPossibleCardBelow(cardIndex)\n        if (indexOfCardBelow !== -1) {\n            cardReferences[indexOfCardBelow].current.flip()\n        }\n    }\n\n\n\n    return (\n        <View>\n            {computerCards.map((card, index) => {\n                return (\n                    <ControllableComputerCard\n                        key={index}\n                        index={index}\n                        card={card}\n                        ref={cardReferences[index]}\n                        scaleUnit={props.scaleUnit}\n                        spacing={props.spacing}\n                        cardCount={computerCards.length}\n                        flipPossibleCardBelow={flipPossibleCardBelow}\n                    />\n                )\n            })}\n        </View>\n    )\n\n\n})\n\nexport default ComputerCards\n\n\n","import React, { useState } from 'react'\nimport { View, TouchableOpacity, Text } from 'react-native'\nimport { connect } from 'react-redux'\nimport PlayerCards from './PlayerCards'\nimport CommonGameStacks from './CommonGameStacks'\nimport ComputerCards from './ComputerCards'\n\nconst Game = (props) => {\n\n    const [topmostLeft, setTopmostLeft] = useState('')\n    const [topmostRight, setTopmostRight] = useState('')\n    const [playerCards] = useState(props.game.playerStack)\n    const [computerCards] = useState(props.game.computerStack)\n    const referencePlayerCards = React.createRef()\n    const referenceComputerCards = React.createRef()\n\n    const dealSolitaireCards = () => {\n        referencePlayerCards.current.dealSolitaireCards()\n        referenceComputerCards.current.dealSolitaireCards()\n    }\n    const dealSingleCards = () => {\n        referencePlayerCards.current.dealSingleCard()\n        referenceComputerCards.current.dealSingleCard()\n    }\n\n    const changeTopmostRight = (card) => {\n        setTopmostRight(card)\n    }\n    const changeTopmostLeft = (card) => {\n        setTopmostLeft(card)\n    }\n\n\n    return (\n        <View>\n            <CommonGameStacks\n                topmostLeft={topmostLeft}\n                topmostRight={topmostRight}\n                scaleUnit={props.scaleUnit}\n                spacing={props.spacing}\n            />\n            <PlayerCards\n                playerCards={playerCards}\n                ref={referencePlayerCards}\n                scaleUnit={props.scaleUnit}\n                spacing={props.spacing}\n                changeTopmostRight={changeTopmostRight}\n                changeTopmostLeft={changeTopmostLeft}\n                topmostLeft={topmostLeft}\n                topmostRight={topmostRight}\n            />\n            <ComputerCards\n                computerCards={computerCards}\n                ref={referenceComputerCards}\n                scaleUnit={props.scaleUnit}\n                spacing={props.spacing}\n                changeTopmostRight={changeTopmostRight}\n                changeTopmostLeft={changeTopmostLeft}\n                topmostLeft={topmostLeft}\n                topmostRight={topmostRight}\n            />\n            <Text style={{ backgroundColor: 'powderblue' }}>THIS APP IS NOT READY, IT IS UNDER DEVELOPMENT!!!</Text>\n            <TouchableOpacity onPress={dealSolitaireCards} >\n                <Text  style={{  backgroundColor: 'rosybrown' }}>BUTTON deal player solitaire (press only ONCE)</Text>\n            </TouchableOpacity>\n            <TouchableOpacity onPress={dealSingleCards} >\n                <Text  style={{  backgroundColor: 'powderblue' }}>BUTTON deal single card (press after solitaire animations)</Text>\n            </TouchableOpacity>\n        </View>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n\n}\n\nconst ConnectedGame = connect(mapStateToProps, mapDispatchToProps)(Game)\n\n\nexport default ConnectedGame\n\n\n","import React from 'react'\nimport { View, TouchableOpacity, StyleSheet, Text, Animated } from 'react-native'\n\n\nconst WelcomeView = ({ startSetting, scaleUnit }) => {\n\n    const styles = getStyles(scaleUnit)\n\n    const visibility = new Animated.Value(1)\n    const animatedVisibility = { opacity: visibility }\n    const fadeOut = () => {\n        Animated.timing(visibility, {\n            toValue: 0, duration: 1000,\n        }).start()\n        setTimeout(() => {\n            startSetting()\n        }, 1000)\n    }\n\n    return (\n        <View>\n            <Animated.View style={animatedVisibility}>\n                <View style={styles.contents}>\n                    <Text style={styles.titleText}>nopsa</Text>\n                    <Text style={styles.infoText}>a card game for those with</Text>\n                    <Text style={styles.infoText}> skill, speed and luck</Text>\n                    <View style={styles.spacer}></View>\n                    <Text style={styles.infoText}>feel like playing?</Text>\n                    <TouchableOpacity onPress={fadeOut} style={styles.buttonView}>\n                        <Text style={styles.buttonText}>setup a new game</Text>\n                    </TouchableOpacity>\n                </View>\n            </Animated.View>\n        </View>\n    )\n}\n\n\nconst getStyles = (scaleUnit) => {\n    return StyleSheet.create({\n        contents:{\n            alignItems: 'center',\n            marginTop: scaleUnit / 2,\n        },\n        titleText: {\n            fontSize: scaleUnit / 1.5,\n            fontWeigth: 'bold',\n            color: '#B9CC3F',\n            fontFamily: 'Arial Black',\n        },\n        infoText: {\n            fontSize: scaleUnit / 2.5,\n            color: '#B9CC3F',\n            fontFamily: 'Arial',\n        },\n        spacer: {\n            height: scaleUnit / 2,\n        },\n        buttonView: {\n            backgroundColor: '#B9CC3F',\n            padding: scaleUnit / 5,\n            borderRadius: 8,\n            marginTop: scaleUnit / 5,\n        },\n        buttonText: {\n            color: 'green',\n            fontFamily: 'Arial',\n            fontSize: scaleUnit / 2.5,\n        },\n    })\n}\n\n\nexport default WelcomeView\n\n","import React from 'react'\nimport {  View } from 'react-native'\n\nconst SmallDot = ({ value, dotViewWidth, dotNumber }) => {\n\n    const changingOpacity = (value >= dotNumber) ? 1 : 0.2\n\n    const styleOuterView = {\n        width: dotViewWidth,\n        height: dotViewWidth * 1.4,\n        justifyContent: 'center',\n        alignItems: 'center',\n    }\n    const styleInnerView = {\n        width: 4,\n        height: 4,\n        opacity: changingOpacity,\n        backgroundColor: '#B9CC3F',\n        borderRadius: 3,\n    }\n\n\n    return (\n        <View style={styleOuterView}>\n            <View style={styleInnerView}/>\n        </View>\n    )\n}\n\nexport default SmallDot\n\n","import React from 'react'\nimport {  View, TouchableOpacity } from 'react-native'\n\n\nconst LargeDot = ({ value, dotNumber, dotViewWidth, handleSelectionChanged }) => {\n\n    const changingOpacity = (value >= dotNumber) ? 1 : 0.2\n\n    const styleOuterView = {\n        width: dotViewWidth,\n        height: dotViewWidth * 1.4,\n        justifyContent: 'center',\n        alignItems: 'center',\n        borderWidth: 1.5,\n        opacity: changingOpacity,\n        borderColor: '#B9CC3F',\n        borderRadius: dotViewWidth,\n    }\n    const styleInnerView = {\n        width: 4,\n        height: 4,\n        backgroundColor: '#B9CC3F',\n        borderRadius: 2.0,\n    }\n\n\n    return (\n        <TouchableOpacity onPress={() => handleSelectionChanged(dotNumber)}>\n            <View style={styleOuterView}>\n                <View  style={styleInnerView}/>\n            </View>\n        </TouchableOpacity>\n    )\n}\n\nexport default LargeDot\n\n","import React, { useState, useImperativeHandle } from 'react'\nimport {  View, StyleSheet } from 'react-native'\nimport SmallDot from './SmallDot'\nimport LargeDot from './LargeDot'\n\n\n\n\nconst DottedSlider = React.forwardRef((props, ref) => {\n\n    const scaleUnit = props.scaleUnit\n    const index = props.optionCount - 1\n    const [selectedValue, setSelectedValue] = useState(1)\n    const dotViewWidth = 6 * scaleUnit / 30\n\n    const handleSelectionChanged = (newValue) => {\n        let startValue = selectedValue\n        const changes = Math.max(newValue - selectedValue, selectedValue - newValue)\n        function changeUpOrDown(direction) {\n            return setInterval(() => {\n                if (direction === 'up' && startValue < newValue) {\n                    startValue++\n                    setSelectedValue(startValue)\n                } else if (direction === 'down' && newValue < startValue) {\n                    startValue--\n                    setSelectedValue(startValue)\n                }\n            }, 180 / changes)\n        }\n        let changeInterval\n        if (selectedValue < newValue) {\n            changeInterval = changeUpOrDown('up')\n        } else if (selectedValue > newValue) {\n            changeInterval = changeUpOrDown('down')\n        }\n        setTimeout(() => {\n            clearInterval(changeInterval)\n        }, 180 * changes)\n    }\n\n    const getSelectedValue = () => {\n        return (selectedValue - 1) / 6 + 1\n    }\n    useImperativeHandle(ref, () => {\n        return { getSelectedValue }\n    })\n\n\n    const displayDotSlider = () => {\n        let dots = []\n        for (let i = 1; i <= index * 6 + 1; i++) {\n            if ((i - 1) % 6 !== 0) {\n                dots.push(\n                    <SmallDot\n                        key={i}\n                        value={selectedValue}\n                        dotViewWidth={dotViewWidth}\n                        dotNumber={i}\n                    />)\n            } else {\n                dots.push(\n                    <LargeDot\n                        key={i}\n                        value={selectedValue}\n                        dotViewWidth={dotViewWidth}\n                        handleSelectionChanged={handleSelectionChanged}\n                        dotNumber={i}\n                    />)\n            }\n        }\n        return dots\n    }\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.dotSliderView}>\n                {displayDotSlider()}\n            </View>\n        </View>\n\n    )\n\n\n})\n\nexport default DottedSlider\n\n\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n        marginBottom: 50,\n    },\n    instructionText: {\n        color: '#B9CC3F',\n        fontFamily: 'Arial',\n        fontWeight: 'bold',\n        marginBottom: 15,\n    },\n    dotSliderView: {\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n})\n\n","import React from 'react'\nimport { View, TouchableOpacity } from 'react-native'\nimport CardBack from '../cards/CardBack'\n\nconst Stack = ({ displayColor, number, selectStack, scaleUnit }) => {\n\n    const stackStyle = {\n        width: scaleUnit * 1.5,\n        height: scaleUnit * 1.7 * 1.3,\n        borderRadius: 7 * 1.3,\n        borderWidth: 1.3,\n        justifyContent: 'center',\n        alignItems: 'center',\n    }\n\n    return (\n        <TouchableOpacity onPress={() => selectStack(number)}>\n            <View style={[stackStyle, displayColor]}>\n                <CardBack scaleUnit={scaleUnit}/>\n            </View>\n        </TouchableOpacity>\n    )\n}\n\nexport default Stack\n\n","import React, { useState, useImperativeHandle } from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport Stack from './Stack'\n\n\nconst StackSelection = React.forwardRef((props, ref) => {\n\n    const scaleUnit = props.scaleUnit\n    const styles = getStyles()\n\n    const [selectedStack, setSelectedStack] = useState(0)\n    const changedSelection = (id) => {\n        setSelectedStack(id)\n    }\n\n    const getSelectedStack = () => {\n        if (selectedStack === 0) {\n            return { player: 0, computer: 1 }\n        } else {\n            return { player: 1, computer: 0 }\n        }\n    }\n    useImperativeHandle(ref, () => {\n        return { getSelectedStack }\n    })\n\n    const borderColorStack1 = selectedStack === 0 ? { borderColor: '#B9CC3F' } : { borderColor: 'green' }\n    const borderColorStack2 = selectedStack === 1 ?  { borderColor: '#B9CC3F' } : { borderColor: 'green' }\n\n\n    return (\n        <View style={styles.container}>\n            <View style={{ flexDirection: 'row' }}>\n                <Stack displayColor={borderColorStack1} number={0} selectStack={changedSelection} scaleUnit={scaleUnit}/>\n                <View style={{ width: 30 }}/>\n                <Stack displayColor={borderColorStack2} number={1} selectStack={changedSelection} scaleUnit={scaleUnit}/>\n            </View>\n        </View>\n    )\n})\n\nexport default StackSelection\n\n\nconst getStyles = (scaleUnit) => {\n    return  StyleSheet.create({\n        container: {\n            alignItems: 'center',\n        },\n        instructionText: {\n            fontSize: scaleUnit / 2.5,\n            color: '#B9CC3F',\n            fontFamily: 'Arial',\n            marginBottom: scaleUnit / 3,\n        },\n    })\n}\n","import React from 'react'\nimport { View, TouchableOpacity, Animated, StyleSheet, Text } from 'react-native'\nimport { connect } from 'react-redux'\nimport { setGameSettings } from '../../reducers/gameReducer'\nimport DottedSlider from './DottedSlider'\nimport StackSelection from './StackSelection'\nimport { createStacks } from './createStacks.js'\n\n\nconst SelectionView = (props) => {\n\n    const scaleUnit = props.scaleUnit\n    const styles = getStyles(scaleUnit)\n\n    const referenceSkill = React.createRef()\n    const referenceSpeed = React.createRef()\n    const referenceStack = React.createRef()\n\n    const visibility = new Animated.Value(1)\n    const animatedVisibility = { opacity: visibility }\n\n    const saveSelectedSettings = () => {\n        Animated.timing(visibility, {\n            toValue: 0, duration: 1000,\n        }).start()\n        const stacks = createStacks()\n        setTimeout(() => {\n            props.setGameSettings({\n                skill: referenceSkill.current.getSelectedValue(),\n                speed: referenceSpeed.current.getSelectedValue(),\n                playerStack: stacks[referenceStack.current.getSelectedStack().player],\n                computerStack : stacks[referenceStack.current.getSelectedStack().computer],\n                isOn: true,\n            })\n        }, 1000)\n\n    }\n\n\n    return (\n        <Animated.View style={[styles.container, animatedVisibility]}>\n            <Text style={styles.instructionText}>select opponent skill level</Text>\n            <DottedSlider\n                scaleUnit={scaleUnit}\n                optionCount={3}\n                ref={referenceSkill}\n            />\n            <Text style={styles.instructionText}>select opponent speed</Text>\n            <DottedSlider\n                scaleUnit={scaleUnit}\n                optionCount={5}\n                ref={referenceSpeed}\n            />\n            <Text style={styles.instructionText}>select your stack</Text>\n            <StackSelection\n                scaleUnit={scaleUnit}\n                ref={referenceStack}\n            />\n            <View style={styles.spacer}></View>\n            <TouchableOpacity onPress={saveSelectedSettings} style={styles.buttonView}>\n                <Text style={styles.buttonText}>save settings</Text>\n            </TouchableOpacity>\n        </Animated.View>\n    )\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n    setGameSettings,\n}\n\nconst ConnectedSelectionView = connect(mapStateToProps, mapDispatchToProps)(SelectionView)\n\nexport default ConnectedSelectionView\n\n\nconst getStyles = (scaleUnit) => {\n    return  StyleSheet.create({\n        container: {\n            alignItems: 'center',\n            marginTop: 50,\n        },\n        instructionText: {\n            fontSize: scaleUnit / 2.5,\n            color: '#B9CC3F',\n            fontFamily: 'Arial',\n            marginBottom: scaleUnit / 3,\n        },\n        spacer: {\n            height: scaleUnit / 2,\n        },\n        buttonView: {\n            backgroundColor: '#B9CC3F',\n            padding: scaleUnit / 5,\n            borderRadius: 8,\n            marginTop: scaleUnit / 5,\n        },\n        buttonText: {\n            color: 'green',\n            fontFamily: 'Arial',\n            fontSize: scaleUnit / 2.5,\n        },\n    })\n}\n\n\n","import shuffle from 'shuffle-array'\n\nexport const createStacks = () => {\n    const stack = []\n    for (let j = 1; j < 5; j++) {\n\n        for (let i = 1; i < 14; i++) {\n            stack.push({ suit: j, value: i })\n        }\n\n    }\n\n    const stackShuffled = shuffle(stack)\n\n    return [ stackShuffled.slice(0, 26), stackShuffled.slice(26) ]\n}\n\n","import React, { useState } from 'react'\nimport { View } from 'react-native'\nimport WelcomeView from './WelcomeView'\nimport SelectionView from './SelectionView'\n\n\nconst SetUpGame = ({ scaleUnit }) => {\n\n    const [settingNew, setSettingNew] = useState(false)\n\n    const startSettingUpNewGame = () => {\n        setSettingNew(true)\n    }\n\n    return (\n        <View>\n            {settingNew ?\n                <SelectionView  scaleUnit={scaleUnit}/>\n                :\n                <WelcomeView startSetting={startSettingUpNewGame} scaleUnit={scaleUnit}/>\n            }\n        </View>\n    )\n}\n\nexport default SetUpGame\n\n\n\n\n\n\n","import React from 'react'\nimport { View, Dimensions, StyleSheet } from 'react-native'\nimport { connect } from 'react-redux'\nimport Game from './game/Game'\nimport SetUpGame from './setup/SetUpGame'\n\n\n\nconst GameOfNopsa = (props) => {\n\n    const screenWidth = Dimensions.get('window').width\n    const screenHeight = Dimensions.get('window').height\n    const scaleUnit = Math.min(screenWidth / 6, screenHeight /(6 * 1.7))\n    const styles = getStyles(screenWidth, screenHeight)\n    const spacing = (screenWidth - 6 * scaleUnit) / 2\n\n    const gameIsOn = props.game.isOn\n\n\n    return (\n        <View style={styles.screen}>\n            {gameIsOn ?\n                <Game scaleUnit={scaleUnit} spacing={spacing}/>\n                :\n                <SetUpGame scaleUnit={scaleUnit}/>\n            }\n        </View>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n}\n\nconst ConnectedGameOfNopsa = connect(mapStateToProps, mapDispatchToProps)(GameOfNopsa)\n\nexport default ConnectedGameOfNopsa\n\nconst getStyles = (screenWidth, screenHeight) => {\n    return StyleSheet.create({\n        screen: {\n            width: screenWidth,\n            height: screenHeight,\n            backgroundColor: 'green',\n        },\n    })\n}\n\n\n\n","\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers/rootReducer'\nimport GameOfNopsa from './components/GameOfNopsa'\n\nconst store = createStore(rootReducer)\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            <GameOfNopsa/>\n        </Provider>\n    )\n}\n\nexport default App\n","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n"],"sourceRoot":""}